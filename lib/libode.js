 var ODE = (function(){
 
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 33554432;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 11760;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([112,2,0,0,133,22,0,0,40,0,0,0,0,0,0,0,112,2,0,0,149,22,0,0,40,0,0,0,0,0,0,0,112,2,0,0,167,23,0,0,56,0,0,0,0,0,0,0,72,2,0,0,176,23,0,0,72,2,0,0,22,30,0,0,72,2,0,0,35,30,0,0,112,2,0,0,48,30,0,0,72,0,0,0,0,0,0,0,112,2,0,0,81,30,0,0,80,0,0,0,0,0,0,0,112,2,0,0,151,30,0,0,80,0,0,0,0,0,0,0,112,2,0,0,115,30,0,0,112,0,0,0,0,0,0,0,112,2,0,0,185,30,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,127,84,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,1,0,0,0,172,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,2,0,0,0,140,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,3,0,0,0,160,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,4,0,0,0,244,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,5,0,0,0,28,1,0,0,25,0,0,0,26,0,0,0,27,0,0,0,8,0,0,0,68,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,6,0,0,0,52,0,0,0,0,0,0,0,31,0,0,0,32,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,0,0,0,0,24,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,13,0,0,0,31,0,0,0,61,0,0,0,127,0,0,0,251,0,0,0,253,1,0,0,253,3,0,0,247,7,0,0,253,15,0,0,255,31,0,0,253,63,0,0,237,127,0,0,241,255,0,0,255,255,1,0,251,255,3,0,255,255,7,0,253,255,15,0,247,255,31,0,253,255,63,0,241,255,127,0,253,255,255,0,217,255,255,1,251,255,255,3,217,255,255,7,199,255,255,15,253,255,255,31,221,255,255,63,0,0,0,0,40,0,0,0,41,0,0,0,41,0,0,0,41,0,0,0,41,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,96,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,0,0,0,0,144,0,0,0,43,0,0,0,51,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,88,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,2,0,0,68,3,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,57,0,0,0,213,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,57,0,0,0,205,39,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,101,116,83,105,122,101,40,41,32,111,117,116,32,111,102,32,115,112,97,99,101,32,105,110,32,76,79,67,65,76,32,97,114,114,97,121,0,79,68,69,32,73,78,84,69,82,78,65,76,32,69,82,82,79,82,0,79,68,69,32,77,101,115,115,97,103,101,0,110,117,109,95,98,121,116,101,115,32,116,111,111,32,108,97,114,103,101,0,100,78,111,114,109,97,108,105,122,101,51,0,118,101,99,116,111,114,32,104,97,115,32,122,101,114,111,32,115,105,122,101,32,105,110,32,37,115,40,41,0,100,78,111,114,109,97,108,105,122,101,52,0,100,80,108,97,110,101,83,112,97,99,101,0,100,83,101,116,90,101,114,111,0,100,83,101,116,86,97,108,117,101,0,100,70,97,99,116,111,114,67,104,111,108,101,115,107,121,0,100,83,111,108,118,101,67,104,111,108,101,115,107,121,0,100,73,110,118,101,114,116,80,68,77,97,116,114,105,120,0,100,73,115,80,111,115,105,116,105,118,101,68,101,102,105,110,105,116,101,0,100,86,101,99,116,111,114,83,99,97,108,101,0,100,83,111,108,118,101,76,68,76,84,0,100,76,68,76,84,65,100,100,84,76,0,100,76,68,76,84,82,101,109,111,118,101,0,97,115,115,101,114,116,105,111,110,32,34,112,91,105,93,32,62,61,32,48,32,38,38,32,112,91,105,93,32,60,32,110,49,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,109,97,116,114,105,120,46,99,112,112,0,100,82,101,109,111,118,101,82,111,119,67,111,108,0,100,82,83,101,116,73,100,101,110,116,105,116,121,0,100,82,70,114,111,109,65,120,105,115,65,110,100,65,110,103,108,101,0,100,81,70,114,111,109,65,120,105,115,65,110,100,65,110,103,108,101,0,100,81,116,111,82,0,100,82,70,114,111,109,69,117,108,101,114,65,110,103,108,101,115,0,100,82,70,114,111,109,50,65,120,101,115,0,122,101,114,111,32,108,101,110,103,116,104,32,118,101,99,116,111,114,32,105,110,32,37,115,40,41,0,100,81,83,101,116,73,100,101,110,116,105,116,121,0,100,81,77,117,108,116,105,112,108,121,48,0,100,81,77,117,108,116,105,112,108,121,49,0,100,81,77,117,108,116,105,112,108,121,50,0,100,81,77,117,108,116,105,112,108,121,51,0,100,82,116,111,81,0,100,87,116,111,68,81,0,100,77,97,115,115,83,101,116,90,101,114,111,0,100,77,97,115,115,83,101,116,80,97,114,97,109,101,116,101,114,115,0,100,77,97,115,115,83,101,116,83,112,104,101,114,101,0,100,77,97,115,115,83,101,116,67,97,112,112,101,100,67,121,108,105,110,100,101,114,0,98,97,100,32,100,105,114,101,99,116,105,111,110,32,110,117,109,98,101,114,32,105,110,32,37,115,40,41,0,100,77,97,115,115,83,101,116,66,111,120,0,100,77,97,115,115,65,100,106,117,115,116,0,100,77,97,115,115,84,114,97,110,115,108,97,116,101,0,100,77,97,115,115,82,111,116,97,116,101,0,100,77,97,115,115,65,100,100,0,109,97,115,115,32,109,117,115,116,32,98,101,32,62,32,48,32,105,110,32,37,115,40,41,0,99,104,101,99,107,77,97,115,115,0,99,101,110,116,101,114,32,111,102,32,109,97,115,115,32,105,110,99,111,110,115,105,115,116,101,110,116,32,119,105,116,104,32,109,97,115,115,32,112,97,114,97,109,101,116,101,114,115,32,105,110,32,37,115,40,41,0,100,66,111,100,121,67,114,101,97,116,101,0,100,66,111,100,121,68,101,115,116,114,111,121,0,100,66,111,100,121,83,101,116,80,111,115,105,116,105,111,110,0,100,66,111,100,121,83,101,116,82,111,116,97,116,105,111,110,0,100,66,111,100,121,83,101,116,81,117,97,116,101,114,110,105,111,110,0,100,66,111,100,121,83,101,116,76,105,110,101,97,114,86,101,108,0,100,66,111,100,121,83,101,116,65,110,103,117,108,97,114,86,101,108,0,100,66,111,100,121,71,101,116,80,111,115,105,116,105,111,110,0,100,66,111,100,121,71,101,116,82,111,116,97,116,105,111,110,0,100,66,111,100,121,71,101,116,81,117,97,116,101,114,110,105,111,110,0,100,66,111,100,121,71,101,116,76,105,110,101,97,114,86,101,108,0,100,66,111,100,121,71,101,116,65,110,103,117,108,97,114,86,101,108,0,100,66,111,100,121,83,101,116,77,97,115,115,0,105,110,101,114,116,105,97,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,32,100,101,102,105,110,105,116,101,32,105,110,32,37,115,40,41,0,100,66,111,100,121,71,101,116,77,97,115,115,0,100,66,111,100,121,65,100,100,70,111,114,99,101,0,100,66,111,100,121,65,100,100,84,111,114,113,117,101,0,100,66,111,100,121,65,100,100,82,101,108,70,111,114,99,101,0,100,66,111,100,121,65,100,100,82,101,108,84,111,114,113,117,101,0,100,66,111,100,121,65,100,100,70,111,114,99,101,65,116,80,111,115,0,100,66,111,100,121,65,100,100,70,111,114,99,101,65,116,82,101,108,80,111,115,0,100,66,111,100,121,65,100,100,82,101,108,70,111,114,99,101,65,116,80,111,115,0,100,66,111,100,121,65,100,100,82,101,108,70,111,114,99,101,65,116,82,101,108,80,111,115,0,100,66,111,100,121,71,101,116,70,111,114,99,101,0,100,66,111,100,121,71,101,116,84,111,114,113,117,101,0,100,66,111,100,121,71,101,116,82,101,108,80,111,105,110,116,80,111,115,0,100,66,111,100,121,71,101,116,82,101,108,80,111,105,110,116,86,101,108,0,100,66,111,100,121,69,110,97,98,108,101,0,100,66,111,100,121,68,105,115,97,98,108,101,0,100,66,111,100,121,73,115,69,110,97,98,108,101,100,0,100,74,111,105,110,116,67,114,101,97,116,101,66,97,108,108,0,100,74,111,105,110,116,67,114,101,97,116,101,72,105,110,103,101,0,100,74,111,105,110,116,67,114,101,97,116,101,83,108,105,100,101,114,0,100,74,111,105,110,116,67,114,101,97,116,101,67,111,110,116,97,99,116,0,100,74,111,105,110,116,67,114,101,97,116,101,72,105,110,103,101,50,0,100,74,111,105,110,116,67,114,101,97,116,101,70,105,120,101,100,0,100,74,111,105,110,116,67,114,101,97,116,101,78,117,108,108,0,100,74,111,105,110,116,67,114,101,97,116,101,65,77,111,116,111,114,0,100,74,111,105,110,116,68,101,115,116,114,111,121,0,100,74,111,105,110,116,71,114,111,117,112,68,101,115,116,114,111,121,0,100,74,111,105,110,116,71,114,111,117,112,69,109,112,116,121,0,100,74,111,105,110,116,65,116,116,97,99,104,0,99,97,110,39,116,32,104,97,118,101,32,98,111,100,121,49,61,61,98,111,100,121,50,32,105,110,32,37,115,40,41,0,106,111,105,110,116,32,97,110,100,32,98,111,100,105,101,115,32,109,117,115,116,32,98,101,32,105,110,32,115,97,109,101,32,119,111,114,108,100,32,105,110,32,37,115,40,41,0,106,111,105,110,116,32,99,97,110,32,110,111,116,32,98,101,32,97,116,116,97,99,104,101,100,32,116,111,32,106,117,115,116,32,111,110,101,32,98,111,100,121,32,105,110,32,37,115,40,41,0,100,74,111,105,110,116,71,101,116,84,121,112,101,0,100,74,111,105,110,116,71,101,116,66,111,100,121,0,100,65,114,101,67,111,110,110,101,99,116,101,100,0,100,87,111,114,108,100,68,101,115,116,114,111,121,0,119,97,114,110,105,110,103,58,32,100,101,115,116,114,111,121,105,110,103,32,119,111,114,108,100,32,99,111,110,116,97,105,110,105,110,103,32,103,114,111,117,112,101,100,32,106,111,105,110,116,115,0,100,87,111,114,108,100,83,101,116,71,114,97,118,105,116,121,0,100,87,111,114,108,100,71,101,116,71,114,97,118,105,116,121,0,98,97,100,32,119,111,114,108,100,32,97,114,103,117,109,101,110,116,32,105,110,32,37,115,40,41,0,100,87,111,114,108,100,83,116,101,112,0,115,116,101,112,115,105,122,101,32,109,117,115,116,32,98,101,32,62,32,48,32,105,110,32,37,115,40,41,0,97,115,115,101,114,116,105,111,110,32,34,115,116,97,99,107,115,105,122,101,32,60,61,32,119,111,114,108,100,45,62,110,98,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,112,114,111,99,101,115,115,73,115,108,97,110,100,115,0,111,100,101,46,99,112,112,0,97,115,115,101,114,116,105,111,110,32,34,115,116,97,99,107,115,105,122,101,32,60,61,32,119,111,114,108,100,45,62,110,106,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,100,105,115,97,98,108,101,100,32,98,111,100,121,32,116,97,103,103,101,100,0,101,110,97,98,108,101,100,32,98,111,100,121,32,110,111,116,32,116,97,103,103,101,100,0,97,116,116,97,99,104,101,100,32,101,110,97,98,108,101,100,32,106,111,105,110,116,32,110,111,116,32,116,97,103,103,101,100,0,117,110,97,116,116,97,99,104,101,100,32,111,114,32,100,105,115,97,98,108,101,100,32,106,111,105,110,116,32,116,97,103,103,101,100,0,97,115,115,101,114,116,105,111,110,32,34,119,32,38,38,32,118,116,97,98,108,101,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,99,114,101,97,116,101,74,111,105,110,116,0,97,115,115,101,114,116,105,111,110,32,34,119,32,38,38,32,106,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,100,74,111,105,110,116,73,110,105,116,0,97,115,115,101,114,116,105,111,110,32,34,105,110,102,111,91,105,93,46,109,32,62,61,32,48,32,38,38,32,105,110,102,111,91,105,93,46,109,32,60,61,32,54,32,38,38,32,105,110,102,111,91,105,93,46,110,117,98,32,62,61,32,48,32,38,38,32,105,110,102,111,91,105,93,46,110,117,98,32,60,61,32,105,110,102,111,91,105,93,46,109,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,115,116,101,112,46,99,112,112,0,100,73,110,116,101,114,110,97,108,83,116,101,112,73,115,108,97,110,100,95,120,50,0,97,115,115,101,114,116,105,111,110,32,34,106,111,105,110,116,91,106,49,93,45,62,110,111,100,101,91,49,93,46,98,111,100,121,32,124,124,32,106,98,49,61,61,48,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,97,115,115,101,114,116,105,111,110,32,34,106,111,105,110,116,91,106,50,93,45,62,110,111,100,101,91,49,93,46,98,111,100,121,32,124,124,32,106,98,50,61,61,48,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,97,115,115,101,114,116,105,111,110,32,34,113,62,48,32,38,38,32,65,32,38,38,32,66,32,38,38,32,67,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,77,117,108,116,105,112,108,121,65,100,100,49,95,56,113,49,0,97,115,115,101,114,116,105,111,110,32,34,112,62,48,32,38,38,32,65,32,38,38,32,66,32,38,38,32,67,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,77,117,108,116,105,112,108,121,65,100,100,48,95,112,56,49,0,77,117,108,116,105,112,108,121,48,95,112,56,49,0,97,115,115,101,114,116,105,111,110,32,34,112,62,48,32,38,38,32,114,62,48,32,38,38,32,65,32,38,38,32,66,32,38,38,32,67,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,77,117,108,116,105,112,108,121,50,95,112,56,114,0,77,117,108,116,105,112,108,121,65,100,100,50,95,112,56,114,0,97,115,115,101,114,116,105,111,110,32,34,107,32,60,32,110,67,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,116,114,97,110,115,102,101,114,95,105,95,102,114,111,109,95,67,95,116,111,95,78,0,108,99,112,46,99,112,112,0,97,115,115,101,114,116,105,111,110,32,34,106,32,60,32,110,67,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,76,67,80,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,44,32,115,32,60,61,32,48,32,40,115,61,37,46,52,101,41,0,100,83,111,108,118,101,76,67,80,0,97,115,115,101,114,116,105,111,110,32,34,108,111,91,107,93,32,60,61,32,48,32,38,38,32,104,105,91,107,93,32,62,61,32,48,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,97,115,115,101,114,116,105,111,110,32,34,110,62,48,32,38,38,32,105,49,32,62,61,48,32,38,38,32,105,50,32,62,61,32,48,32,38,38,32,105,49,32,60,32,110,32,38,38,32,105,50,32,60,32,110,32,38,38,32,110,115,107,105,112,32,62,61,32,110,32,38,38,32,105,49,32,60,61,32,105,50,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,115,119,97,112,80,114,111,98,108,101,109,0,97,115,115,101,114,116,105,111,110,32,34,65,32,38,38,32,110,32,62,32,48,32,38,38,32,105,49,32,62,61,32,48,32,38,38,32,105,50,32,62,61,32,48,32,38,38,32,105,49,32,60,32,110,32,38,38,32,105,50,32,60,32,110,32,38,38,32,110,115,107,105,112,32,62,61,32,110,32,38,38,32,105,49,32,60,32,105,50,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,115,119,97,112,82,111,119,115,65,110,100,67,111,108,115,0,98,97,100,32,106,111,105,110,116,32,97,114,103,117,109,101,110,116,32,105,110,32,37,115,40,41,0,100,74,111,105,110,116,83,101,116,66,97,108,108,65,110,99,104,111,114,0,106,111,105,110,116,32,105,115,32,110,111,116,32,97,32,98,97,108,108,32,105,110,32,37,115,40,41,0,100,74,111,105,110,116,71,101,116,66,97,108,108,65,110,99,104,111,114,0,98,97,100,32,114,101,115,117,108,116,32,97,114,103,117,109,101,110,116,32,105,110,32,37,115,40,41,0,100,74,111,105,110,116,83,101,116,72,105,110,103,101,65,110,99,104,111,114,0,106,111,105,110,116,32,105,115,32,110,111,116,32,97,32,104,105,110,103,101,32,105,110,32,37,115,40,41,0,100,74,111,105,110,116,83,101,116,72,105,110,103,101,65,120,105,115,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,65,110,99,104,111,114,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,65,120,105,115,0,100,74,111,105,110,116,83,101,116,72,105,110,103,101,80,97,114,97,109,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,80,97,114,97,109,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,65,110,103,108,101,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,65,110,103,108,101,82,97,116,101,0,106,111,105,110,116,32,105,115,32,110,111,116,32,97,32,72,105,110,103,101,32,105,110,32,37,115,40,41,0,100,74,111,105,110,116,71,101,116,83,108,105,100,101,114,80,111,115,105,116,105,111,110,0,106,111,105,110,116,32,105,115,32,110,111,116,32,97,32,115,108,105,100,101,114,32,105,110,32,37,115,40,41,0,100,74,111,105,110,116,71,101,116,83,108,105,100,101,114,80,111,115,105,116,105,111,110,82,97,116,101,0,100,74,111,105,110,116,83,101,116,83,108,105,100,101,114,65,120,105,115,0,100,74,111,105,110,116,71,101,116,83,108,105,100,101,114,65,120,105,115,0,100,74,111,105,110,116,83,101,116,83,108,105,100,101,114,80,97,114,97,109,0,100,74,111,105,110,116,71,101,116,83,108,105,100,101,114,80,97,114,97,109,0,100,74,111,105,110,116,83,101,116,72,105,110,103,101,50,65,110,99,104,111,114,0,106,111,105,110,116,32,105,115,32,110,111,116,32,97,32,104,105,110,103,101,50,32,105,110,32,37,115,40,41,0,100,74,111,105,110,116,83,101,116,72,105,110,103,101,50,65,120,105,115,49,0,100,74,111,105,110,116,83,101,116,72,105,110,103,101,50,65,120,105,115,50,0,100,74,111,105,110,116,83,101,116,72,105,110,103,101,50,80,97,114,97,109,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,50,65,110,99,104,111,114,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,50,65,120,105,115,49,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,50,65,120,105,115,50,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,50,80,97,114,97,109,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,50,65,110,103,108,101,49,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,50,65,110,103,108,101,49,82,97,116,101,0,100,74,111,105,110,116,71,101,116,72,105,110,103,101,50,65,110,103,108,101,50,82,97,116,101,0,100,74,111,105,110,116,83,101,116,65,77,111,116,111,114,78,117,109,65,120,101,115,0,100,74,111,105,110,116,83,101,116,65,77,111,116,111,114,65,120,105,115,0,100,74,111,105,110,116,83,101,116,65,77,111,116,111,114,65,110,103,108,101,0,100,74,111,105,110,116,83,101,116,65,77,111,116,111,114,80,97,114,97,109,0,100,74,111,105,110,116,83,101,116,65,77,111,116,111,114,77,111,100,101,0,100,74,111,105,110,116,71,101,116,65,77,111,116,111,114,78,117,109,65,120,101,115,0,100,74,111,105,110,116,71,101,116,65,77,111,116,111,114,65,120,105,115,0,100,74,111,105,110,116,71,101,116,65,77,111,116,111,114,65,120,105,115,82,101,108,0,100,74,111,105,110,116,71,101,116,65,77,111,116,111,114,65,110,103,108,101,0,110,111,116,32,121,101,116,32,105,109,112,108,101,109,101,110,116,101,100,0,100,74,111,105,110,116,71,101,116,65,77,111,116,111,114,80,97,114,97,109,0,100,74,111,105,110,116,71,101,116,65,77,111,116,111,114,77,111,100,101,0,100,74,111,105,110,116,83,101,116,70,105,120,101,100,0,106,111,105,110,116,32,105,115,32,110,111,116,32,102,105,120,101,100,32,105,110,32,37,115,40,41,0,116,104,105,115,32,115,104,111,117,108,100,32,110,101,118,101,114,32,103,101,116,32,99,97,108,108,101,100,0,49,51,100,120,83,105,109,112,108,101,83,112,97,99,101,0,49,49,100,120,72,97,115,104,83,112,97,99,101,0,100,101,115,116,114,111,121,0,97,100,100,0,111,98,106,101,99,116,32,105,115,32,97,108,114,101,97,100,121,32,105,110,32,97,32,115,112,97,99,101,32,105,110,32,37,115,40,41,0,114,101,109,111,118,101,0,111,98,106,101,99,116,32,105,115,32,110,111,116,32,105,110,32,97,32,115,112,97,99,101,32,105,110,32,37,115,40,41,0,99,111,108,108,105,100,101,0,109,117,115,116,32,104,97,118,101,32,109,105,110,108,101,118,101,108,32,60,61,32,109,97,120,108,101,118,101,108,32,105,110,32,37,115,40,41,0,100,72,97,115,104,83,112,97,99,101,83,101,116,76,101,118,101,108,115,0,109,117,115,116,32,98,101,32,97,32,104,97,115,104,32,115,112,97,99,101,32,105,110,32,37,115,40,41,0,97,115,115,101,114,116,105,111,110,32,34,105,32,62,61,32,48,32,38,38,32,105,32,60,32,40,116,101,115,116,101,100,95,114,111,119,115,105,122,101,42,110,41,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,115,112,97,99,101,46,99,112,112,0,55,100,120,83,112,97,99,101,0,53,100,66,97,115,101,0,98,97,100,32,103,101,111,109,32,99,108,97,115,115,32,105,110,32,37,115,40,41,0,100,67,114,101,97,116,101,71,101,111,109,67,108,97,115,115,0,66,97,100,32,97,114,103,117,109,101,110,116,40,115,41,32,105,110,32,37,115,40,41,0,100,67,111,108,108,105,100,101,0,110,111,32,114,101,103,105,115,116,101,114,101,100,32,103,101,111,109,101,116,114,121,32,99,108,97,115,115,101,115,32,105,110,32,37,115,40,41,0,100,71,101,111,109,83,101,116,66,111,100,121,0,100,71,101,111,109,71,101,116,66,111,100,121,0,100,71,101,111,109,83,101,116,80,111,115,105,116,105,111,110,0,100,71,101,111,109,83,101,116,82,111,116,97,116,105,111,110,0,100,71,101,111,109,71,101,116,80,111,115,105,116,105,111,110,0,100,71,101,111,109,71,101,116,82,111,116,97,116,105,111,110,0,98,97,100,32,99,108,97,115,115,32,110,117,109,98,101,114,32,105,110,32,37,115,40,41,0,100,67,114,101,97,116,101,71,101,111,109,0,100,71,101,111,109,68,101,115,116,114,111,121,0,100,71,101,111,109,71,101,116,65,65,66,66,0,100,71,101,111,109,71,101,116,83,112,97,99,101,65,65,66,66,0,97,115,115,101,114,116,105,111,110,32,34,115,107,105,112,32,62,61,32,40,105,110,116,41,115,105,122,101,111,102,40,100,67,111,110,116,97,99,116,71,101,111,109,41,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,100,67,111,108,108,105,100,101,83,83,0,103,101,111,109,46,99,112,112,0,97,115,115,101,114,116,105,111,110,32,34,111,49,45,62,95,99,108,97,115,115,45,62,110,117,109,32,61,61,32,100,83,112,104,101,114,101,67,108,97,115,115,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,97,115,115,101,114,116,105,111,110,32,34,111,50,45,62,95,99,108,97,115,115,45,62,110,117,109,32,61,61,32,100,83,112,104,101,114,101,67,108,97,115,115,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,100,67,111,108,108,105,100,101,83,66,0,97,115,115,101,114,116,105,111,110,32,34,111,50,45,62,95,99,108,97,115,115,45,62,110,117,109,32,61,61,32,100,66,111,120,67,108,97,115,115,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,100,67,111,108,108,105,100,101,83,80,0,97,115,115,101,114,116,105,111,110,32,34,111,50,45,62,95,99,108,97,115,115,45,62,110,117,109,32,61,61,32,100,80,108,97,110,101,67,108,97,115,115,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,100,67,111,108,108,105,100,101,66,80,0,97,115,115,101,114,116,105,111,110,32,34,111,49,45,62,95,99,108,97,115,115,45,62,110,117,109,32,61,61,32,100,66,111,120,67,108,97,115,115,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,100,67,111,108,108,105,100,101,67,83,0,97,115,115,101,114,116,105,111,110,32,34,111,49,45,62,95,99,108,97,115,115,45,62,110,117,109,32,61,61,32,100,67,67,121,108,105,110,100,101,114,67,108,97,115,115,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,100,67,111,108,108,105,100,101,67,67,0,97,115,115,101,114,116,105,111,110,32,34,111,50,45,62,95,99,108,97,115,115,45,62,110,117,109,32,61,61,32,100,67,67,121,108,105,110,100,101,114,67,108,97,115,115,34,32,102,97,105,108,101,100,32,105,110,32,37,115,40,41,32,91,37,115,93,0,100,67,111,108,108,105,100,101,67,67,40,41,58,32,116,111,111,32,109,97,110,121,32,105,116,101,114,97,116,105,111,110,115,0,100,67,111,108,108,105,100,101,67,80,0,100,67,114,101,97,116,101,83,112,104,101,114,101,0,100,67,114,101,97,116,101,66,111,120,0,100,67,114,101,97,116,101,67,67,121,108,105,110,100,101,114,0,97,114,103,117,109,101,110,116,32,110,111,116,32,97,32,115,112,104,101,114,101,32,105,110,32,37,115,40,41,0,100,71,101,111,109,83,112,104,101,114,101,83,101,116,82,97,100,105,117,115,0,97,114,103,117,109,101,110,116,32,110,111,116,32,97,32,98,111,120,32,105,110,32,37,115,40,41,0,100,71,101,111,109,66,111,120,83,101,116,76,101,110,103,116,104,115,0,97,114,103,117,109,101,110,116,32,110,111,116,32,97,32,112,108,97,110,101,32,105,110,32,37,115,40,41,0,100,71,101,111,109,80,108,97,110,101,83,101,116,80,97,114,97,109,115,0,97,114,103,117,109,101,110,116,32,110,111,116,32,97,32,99,99,121,108,105,110,100,101,114,32,105,110,32,37,115,40,41,0,100,71,101,111,109,67,67,121,108,105,110,100,101,114,83,101,116,80,97,114,97,109,115,0,100,71,101,111,109,83,112,104,101,114,101,71,101,116,82,97,100,105,117,115,0,100,71,101,111,109,66,111,120,71,101,116,76,101,110,103,116,104,115,0,100,71,101,111,109,80,108,97,110,101,71,101,116,80,97,114,97,109,115,0,100,71,101,111,109,67,67,121,108,105,110,100,101,114,71,101,116,80,97,114,97,109,115,0,97,114,103,117,109,101,110,116,32,110,111,116,32,97,32,103,101,111,109,103,114,111,117,112,32,105,110,32,37,115,40,41,0,100,71,101,111,109,71,114,111,117,112,65,100,100,0,100,71,101,111,109,71,114,111,117,112,82,101,109,111,118,101,0,100,71,101,111,109,71,114,111,117,112,71,101,116,78,117,109,71,101,111,109,115,0,100,71,101,111,109,71,114,111,117,112,71,101,116,71,101,111,109,0,71,101,111,109,84,114,97,110,115,102,111,114,109,32,101,110,99,97,112,115,117,108,97,116,101,100,32,111,98,106,101,99,116,32,109,117,115,116,32,110,111,116,32,98,101,32,105,110,32,97,32,115,112,97,99,101,32,105,110,32,37,115,40,41,0,100,67,111,108,108,105,100,101,84,0,71,101,111,109,84,114,97,110,115,102,111,114,109,32,101,110,99,97,112,115,117,108,97,116,101,100,32,111,98,106,101,99,116,32,109,117,115,116,32,110,111,116,32,98,101,32,97,116,116,97,99,104,32,116,111,32,97,32,98,111,100,121,32,105,110,32,37,115,40,41,0,97,114,103,117,109,101,110,116,32,110,111,116,32,97,32,103,101,111,109,32,116,114,97,110,115,102,111,114,109,32,105,110,32,37,115,40,41,0,100,71,101,111,109,84,114,97,110,115,102,111,114,109,83,101,116,71,101,111,109,0,100,71,101,111,109,84,114,97,110,115,102,111,114,109,71,101,116,71,101,111,109,0,100,71,101,111,109,84,114,97,110,115,102,111,114,109,83,101,116,67,108,101,97,110,117,112,0,100,71,101,111,109,84,114,97,110,115,102,111,114,109,71,101,116,67,108,101,97,110,117,112,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+11213);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _emscripten_resume=true;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  var _emscripten_landingpad=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  var _floor=Math_floor;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  var _sqrt=Math_sqrt;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  var _sin=Math_sin;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _cos=Math_cos;

  var _emscripten_postinvoke=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _atan2=Math_atan2;

  function _llvm_trap() {
      abort('trap!');
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiii(index,a1,a2,a3,a4,a5) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_i(index) {
    return Runtime.functionPointers[index]();
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vi(index,a1) {
    Runtime.functionPointers[index](a1);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vii(index,a1,a2) {
    Runtime.functionPointers[index](a1,a2);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viii(index,a1,a2,a3) {
    Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_v(index) {
    Runtime.functionPointers[index]();
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiii(index,a1,a2,a3,a4,a5) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiii(index,a1,a2,a3,a4) {
    Runtime.functionPointers[index](a1,a2,a3,a4);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_viiiii": invoke_viiiii, "jsCall_viiiii": jsCall_viiiii, "invoke_i": invoke_i, "jsCall_i": jsCall_i, "invoke_vi": invoke_vi, "jsCall_vi": jsCall_vi, "invoke_vii": invoke_vii, "jsCall_vii": jsCall_vii, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_viii": invoke_viii, "jsCall_viii": jsCall_viii, "invoke_v": invoke_v, "jsCall_v": jsCall_v, "invoke_viiiiii": invoke_viiiiii, "jsCall_viiiiii": jsCall_viiiiii, "invoke_iiiiii": invoke_iiiiii, "jsCall_iiiiii": jsCall_iiiiii, "invoke_viiii": invoke_viiii, "jsCall_viiii": jsCall_viiii, "_fabs": _fabs, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_sin": _sin, "_pthread_key_create": _pthread_key_create, "_abort": _abort, "_atan2": _atan2, "___setErrNo": ___setErrNo, "___gxx_personality_v0": ___gxx_personality_v0, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_floor": _floor, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "_pthread_getspecific": _pthread_getspecific, "_cos": _cos, "_pthread_self": _pthread_self, "_pthread_once": _pthread_once, "___syscall140": ___syscall140, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_pthread_setspecific": _pthread_setspecific, "___lock": ___lock, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "_time": _time, "_sqrt": _sqrt, "_llvm_trap": _llvm_trap, "___cxa_pure_virtual": ___cxa_pure_virtual, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var jsCall_viiiii=env.jsCall_viiiii;
  var invoke_i=env.invoke_i;
  var jsCall_i=env.jsCall_i;
  var invoke_vi=env.invoke_vi;
  var jsCall_vi=env.jsCall_vi;
  var invoke_vii=env.invoke_vii;
  var jsCall_vii=env.jsCall_vii;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_viii=env.invoke_viii;
  var jsCall_viii=env.jsCall_viii;
  var invoke_v=env.invoke_v;
  var jsCall_v=env.jsCall_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var jsCall_viiiiii=env.jsCall_viiiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var jsCall_iiiiii=env.jsCall_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var jsCall_viiii=env.jsCall_viiii;
  var _fabs=env._fabs;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _sin=env._sin;
  var _pthread_key_create=env._pthread_key_create;
  var _abort=env._abort;
  var _atan2=env._atan2;
  var ___setErrNo=env.___setErrNo;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _floor=env._floor;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var _pthread_getspecific=env._pthread_getspecific;
  var _cos=env._cos;
  var _pthread_self=env._pthread_self;
  var _pthread_once=env._pthread_once;
  var ___syscall140=env.___syscall140;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _time=env._time;
  var _sqrt=env._sqrt;
  var _llvm_trap=env._llvm_trap;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN10dArrayBase8_freeAllEi($this,$sizeofT) {
 $this = $this|0;
 $sizeofT = $sizeofT|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sizeofT;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 12|0);
 $9 = ($7|0)==($8|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = ((($2)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($2)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = Math_imul($13, $14)|0;
 _dFree($11,$15);
 STACKTOP = sp;return;
}
function __ZN10dArrayBase8_setSizeEii($this,$newsize,$sizeofT) {
 $this = $this|0;
 $newsize = $newsize|0;
 $sizeofT = $sizeofT|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newanum = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $newsize;
 $2 = $sizeofT;
 $3 = $0;
 $4 = $1;
 $5 = ($4|0)<(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)>($8|0);
 if ($9) {
  $10 = ((($3)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($3)) + 12|0);
  $13 = ($11|0)==($12|0);
  if ($13) {
   _dDebug(0,1444,$vararg_buffer);
  }
  $14 = $1;
  $15 = (__ZL19roundUpToPowerOfTwoi($14)|0);
  $newanum = $15;
  $16 = ((($3)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = ((($3)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($3)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $2;
   $24 = Math_imul($22, $23)|0;
   $25 = $newanum;
   $26 = $2;
   $27 = Math_imul($25, $26)|0;
   $28 = (_dRealloc($20,$24,$27)|0);
   $29 = ((($3)) + 8|0);
   HEAP32[$29>>2] = $28;
  } else {
   $30 = $newanum;
   $31 = $2;
   $32 = Math_imul($30, $31)|0;
   $33 = (_dAlloc($32)|0);
   $34 = ((($3)) + 8|0);
   HEAP32[$34>>2] = $33;
  }
  $35 = $newanum;
  $36 = ((($3)) + 4|0);
  HEAP32[$36>>2] = $35;
 }
 $37 = $1;
 HEAP32[$3>>2] = $37;
 STACKTOP = sp;return;
}
function __ZL19roundUpToPowerOfTwoi($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $i = 1;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = ($1|0)<($2|0);
  $4 = $i;
  if (!($3)) {
   break;
  }
  $5 = $4 << 1;
  $i = $5;
 }
 STACKTOP = sp;return ($4|0);
}
function __ZN10dArrayBasenwEj($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $0;
 $2 = (_dAlloc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10dArrayBasedlEPvj($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $size;
 $2 = $0;
 $3 = $1;
 _dFree($2,$3);
 STACKTOP = sp;return;
}
function _dDebug($num,$msg,$varargs) {
 $num = $num|0;
 $msg = $msg|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 $0 = $num;
 $1 = $msg;
 HEAP32[$ap>>2] = $varargs;
 $2 = HEAP32[160>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[160>>2]|0;
  $5 = $0;
  $6 = $1;
  FUNCTION_TABLE_viii[$4 & 63]($5,$6,$ap);
  _abort();
  // unreachable;
 } else {
  $7 = $0;
  $8 = $1;
  __ZL12printMessageiPKcS0_Pi($7,1482,$8,$ap);
  _abort();
  // unreachable;
 }
}
function _dMessage($num,$msg,$varargs) {
 $num = $num|0;
 $msg = $msg|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 $0 = $num;
 $1 = $msg;
 HEAP32[$ap>>2] = $varargs;
 $2 = HEAP32[164>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[164>>2]|0;
  $5 = $0;
  $6 = $1;
  FUNCTION_TABLE_viii[$4 & 63]($5,$6,$ap);
  STACKTOP = sp;return;
 } else {
  $7 = $0;
  $8 = $1;
  __ZL12printMessageiPKcS0_Pi($7,1501,$8,$ap);
  STACKTOP = sp;return;
 }
}
function __ZL12printMessageiPKcS0_Pi($num,$msg1,$msg2,$ap) {
 $num = $num|0;
 $msg1 = $msg1|0;
 $msg2 = $msg2|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $num;
 $1 = $msg1;
 $2 = $msg2;
 $3 = $ap;
 STACKTOP = sp;return;
}
function _dAlloc($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $size;
 $2 = HEAP32[168>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[168>>2]|0;
  $5 = $1;
  $6 = (FUNCTION_TABLE_ii[$4 & 127]($5)|0);
  $0 = $6;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = $1;
  $8 = (_malloc($7)|0);
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _dRealloc($ptr,$oldsize,$newsize) {
 $ptr = $ptr|0;
 $oldsize = $oldsize|0;
 $newsize = $newsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ptr;
 $2 = $oldsize;
 $3 = $newsize;
 $4 = HEAP32[172>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[172>>2]|0;
  $7 = $1;
  $8 = $2;
  $9 = $3;
  $10 = (FUNCTION_TABLE_iiii[$6 & 63]($7,$8,$9)|0);
  $0 = $10;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $11 = $1;
  $12 = $3;
  $13 = (_realloc($11,$12)|0);
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _dFree($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $size;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[176>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[176>>2]|0;
  $7 = $0;
  $8 = $1;
  FUNCTION_TABLE_vii[$6 & 127]($7,$8);
  STACKTOP = sp;return;
 } else {
  $9 = $0;
  _free($9);
  STACKTOP = sp;return;
 }
}
function _dAllocDontReport($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 STACKTOP = sp;return;
}
function __ZN8dObStackC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8dObStackD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $a = 0, $nexta = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $a = $2;
 while(1) {
  $3 = $a;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $a;
  $6 = HEAP32[$5>>2]|0;
  $nexta = $6;
  $7 = $a;
  _dFree($7,16384);
  $8 = $nexta;
  $a = $8;
 }
 STACKTOP = sp;return;
}
function __ZN8dObStack5allocEi($this,$num_bytes) {
 $this = $this|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $num_bytes;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>(16361);
 if ($4) {
  _dDebug(0,1513,$vararg_buffer);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = (($29) + ($30))|0;
  $32 = ($31|0)>(16384);
  if ($32) {
   $33 = ((($2)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)!=(0|0);
   if (!($36)) {
    $37 = (_dAlloc(16384)|0);
    $38 = ((($2)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    HEAP32[$39>>2] = $37;
    $40 = ((($2)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[$41>>2]|0;
    HEAP32[$42>>2] = 0;
   }
   $43 = ((($2)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($2)) + 4|0);
   HEAP32[$46>>2] = $45;
   $47 = ((($2)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 4|0);
   HEAP32[$49>>2] = 8;
   $50 = ((($2)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $51;
   $53 = ((($2)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($52) + ($56))|0;
   $58 = (($57) - 1)|0;
   $59 = $58 | 15;
   $60 = (($59) + 1)|0;
   $61 = ((($2)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62;
   $64 = (($60) - ($63))|0;
   $65 = ((($2)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($66)) + 4|0);
   HEAP32[$67>>2] = $64;
  }
 } else {
  $7 = (_dAlloc(16384)|0);
  $8 = ((($2)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$2>>2] = $7;
  $9 = HEAP32[$2>>2]|0;
  HEAP32[$9>>2] = 0;
  $10 = HEAP32[$2>>2]|0;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = 8;
  $12 = HEAP32[$2>>2]|0;
  $13 = $12;
  $14 = HEAP32[$2>>2]|0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($13) + ($16))|0;
  $18 = (($17) - 1)|0;
  $19 = $18 | 15;
  $20 = (($19) + 1)|0;
  $21 = HEAP32[$2>>2]|0;
  $22 = $21;
  $23 = (($20) - ($22))|0;
  $24 = HEAP32[$2>>2]|0;
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = $23;
 }
 $68 = ((($2)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($2)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($69) + ($73)|0);
 $c = $74;
 $75 = $1;
 $76 = ((($2)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + ($75))|0;
 HEAP32[$78>>2] = $80;
 $81 = ((($2)) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $82;
 $84 = ((($2)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($85)) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($83) + ($87))|0;
 $89 = (($88) - 1)|0;
 $90 = $89 | 15;
 $91 = (($90) + 1)|0;
 $92 = ((($2)) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $93;
 $95 = (($91) - ($94))|0;
 $96 = ((($2)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($97)) + 4|0);
 HEAP32[$98>>2] = $95;
 $99 = $c;
 STACKTOP = sp;return ($99|0);
}
function __ZN8dObStack7freeAllEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 8;
 $8 = HEAP32[$1>>2]|0;
 $9 = $8;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($9) + ($12))|0;
 $14 = (($13) - 1)|0;
 $15 = $14 | 15;
 $16 = (($15) + 1)|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = $17;
 $19 = (($16) - ($18))|0;
 $20 = HEAP32[$1>>2]|0;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $19;
 STACKTOP = sp;return;
}
function __ZN8dObStack6rewindEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($2)) + 12|0);
 HEAP32[$5>>2] = 8;
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = ((($2)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10;
  $12 = ((($2)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + ($13))|0;
  $15 = (($14) - 1)|0;
  $16 = $15 | 15;
  $17 = (($16) + 1)|0;
  $18 = ((($2)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19;
  $21 = (($17) - ($20))|0;
  $22 = ((($2)) + 12|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($2)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZN8dObStack4nextEi($this,$num_bytes) {
 $this = $this|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $num_bytes;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $0 = 0;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $7 = $2;
 $8 = ((($3)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7))|0;
 HEAP32[$8>>2] = $10;
 $11 = ((($3)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = ((($3)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + ($15))|0;
 $17 = (($16) - 1)|0;
 $18 = $17 | 15;
 $19 = (($18) + 1)|0;
 $20 = ((($3)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21;
 $23 = (($19) - ($22))|0;
 $24 = ((($3)) + 12|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($3)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($3)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($26|0)>=($30|0);
 do {
  if ($31) {
   $32 = ((($3)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($3)) + 8|0);
   HEAP32[$35>>2] = $34;
   $36 = ((($3)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $39 = ((($3)) + 12|0);
    HEAP32[$39>>2] = 8;
    $40 = ((($3)) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $41;
    $43 = ((($3)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($42) + ($44))|0;
    $46 = (($45) - 1)|0;
    $47 = $46 | 15;
    $48 = (($47) + 1)|0;
    $49 = ((($3)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $50;
    $52 = (($48) - ($51))|0;
    $53 = ((($3)) + 12|0);
    HEAP32[$53>>2] = $52;
    break;
   }
   $0 = 0;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  }
 } while(0);
 $54 = ((($3)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($3)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + ($57)|0);
 $0 = $58;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _dNormalize3($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0.0, $98 = 0.0, $99 = 0, $a0 = 0.0, $a1 = 0.0, $a2 = 0.0, $aa0 = 0.0, $aa1 = 0.0, $aa2 = 0.0, $l = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $a;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 1533;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = +HEAPF32[$3>>2];
 $a0 = $4;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $a1 = $7;
 $8 = $0;
 $9 = ((($8)) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $a2 = $10;
 $11 = $a0;
 $12 = $11;
 $13 = (+Math_abs((+$12)));
 $14 = $13;
 $aa0 = $14;
 $15 = $a1;
 $16 = $15;
 $17 = (+Math_abs((+$16)));
 $18 = $17;
 $aa1 = $18;
 $19 = $a2;
 $20 = $19;
 $21 = (+Math_abs((+$20)));
 $22 = $21;
 $aa2 = $22;
 $23 = $aa1;
 $24 = $aa0;
 $25 = $23 > $24;
 $26 = $aa2;
 if ($25) {
  $27 = $aa1;
  $28 = $26 > $27;
  if (!($28)) {
   $29 = $aa1;
   $30 = $a0;
   $31 = $30 / $29;
   $a0 = $31;
   $32 = $aa1;
   $33 = $a2;
   $34 = $33 / $32;
   $a2 = $34;
   $35 = $a0;
   $36 = $a0;
   $37 = $35 * $36;
   $38 = $a2;
   $39 = $a2;
   $40 = $38 * $39;
   $41 = $37 + $40;
   $42 = $41 + 1.0;
   $43 = $42;
   $44 = (+Math_sqrt((+$43)));
   $45 = 1.0 / $44;
   $46 = $45;
   $l = $46;
   $47 = $a0;
   $48 = $l;
   $49 = $47 * $48;
   $50 = $0;
   HEAPF32[$50>>2] = $49;
   $51 = $l;
   $52 = $51;
   $53 = $a1;
   $54 = $53;
   $55 = (+_copysign($52,$54));
   $56 = $55;
   $57 = $0;
   $58 = ((($57)) + 4|0);
   HEAPF32[$58>>2] = $56;
   $59 = $a2;
   $60 = $l;
   $61 = $59 * $60;
   $62 = $0;
   $63 = ((($62)) + 8|0);
   HEAPF32[$63>>2] = $61;
   STACKTOP = sp;return;
  }
 } else {
  $64 = $aa0;
  $65 = $26 > $64;
  if (!($65)) {
   $101 = $aa0;
   $102 = $101 <= 0.0;
   if ($102) {
    HEAP32[$vararg_buffer1>>2] = 1533;
    _dMessage(2,1545,$vararg_buffer1);
    $103 = $0;
    HEAPF32[$103>>2] = 1.0;
    $104 = $0;
    $105 = ((($104)) + 4|0);
    HEAPF32[$105>>2] = 0.0;
    $106 = $0;
    $107 = ((($106)) + 8|0);
    HEAPF32[$107>>2] = 0.0;
    STACKTOP = sp;return;
   } else {
    $108 = $aa0;
    $109 = $a1;
    $110 = $109 / $108;
    $a1 = $110;
    $111 = $aa0;
    $112 = $a2;
    $113 = $112 / $111;
    $a2 = $113;
    $114 = $a1;
    $115 = $a1;
    $116 = $114 * $115;
    $117 = $a2;
    $118 = $a2;
    $119 = $117 * $118;
    $120 = $116 + $119;
    $121 = $120 + 1.0;
    $122 = $121;
    $123 = (+Math_sqrt((+$122)));
    $124 = 1.0 / $123;
    $125 = $124;
    $l = $125;
    $126 = $l;
    $127 = $126;
    $128 = $a0;
    $129 = $128;
    $130 = (+_copysign($127,$129));
    $131 = $130;
    $132 = $0;
    HEAPF32[$132>>2] = $131;
    $133 = $a1;
    $134 = $l;
    $135 = $133 * $134;
    $136 = $0;
    $137 = ((($136)) + 4|0);
    HEAPF32[$137>>2] = $135;
    $138 = $a2;
    $139 = $l;
    $140 = $138 * $139;
    $141 = $0;
    $142 = ((($141)) + 8|0);
    HEAPF32[$142>>2] = $140;
    STACKTOP = sp;return;
   }
  }
 }
 $66 = $aa2;
 $67 = $a0;
 $68 = $67 / $66;
 $a0 = $68;
 $69 = $aa2;
 $70 = $a1;
 $71 = $70 / $69;
 $a1 = $71;
 $72 = $a0;
 $73 = $a0;
 $74 = $72 * $73;
 $75 = $a1;
 $76 = $a1;
 $77 = $75 * $76;
 $78 = $74 + $77;
 $79 = $78 + 1.0;
 $80 = $79;
 $81 = (+Math_sqrt((+$80)));
 $82 = 1.0 / $81;
 $83 = $82;
 $l = $83;
 $84 = $a0;
 $85 = $l;
 $86 = $84 * $85;
 $87 = $0;
 HEAPF32[$87>>2] = $86;
 $88 = $a1;
 $89 = $l;
 $90 = $88 * $89;
 $91 = $0;
 $92 = ((($91)) + 4|0);
 HEAPF32[$92>>2] = $90;
 $93 = $l;
 $94 = $93;
 $95 = $a2;
 $96 = $95;
 $97 = (+_copysign($94,$96));
 $98 = $97;
 $99 = $0;
 $100 = ((($99)) + 8|0);
 HEAPF32[$100>>2] = $98;
 STACKTOP = sp;return;
}
function _dNormalize4($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $l = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $a;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 1574;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = $0;
 $5 = (+_dDOT($3,$4));
 $6 = $0;
 $7 = ((($6)) + 12|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $0;
 $10 = ((($9)) + 12|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 * $11;
 $13 = $5 + $12;
 $l = $13;
 $14 = $l;
 $15 = $14 > 0.0;
 if ($15) {
  $16 = $l;
  $17 = $16;
  $18 = (+Math_sqrt((+$17)));
  $19 = 1.0 / $18;
  $20 = $19;
  $l = $20;
  $21 = $l;
  $22 = $0;
  $23 = +HEAPF32[$22>>2];
  $24 = $23 * $21;
  HEAPF32[$22>>2] = $24;
  $25 = $l;
  $26 = $0;
  $27 = ((($26)) + 4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28 * $25;
  HEAPF32[$27>>2] = $29;
  $30 = $l;
  $31 = $0;
  $32 = ((($31)) + 8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $33 * $30;
  HEAPF32[$32>>2] = $34;
  $35 = $l;
  $36 = $0;
  $37 = ((($36)) + 12|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $38 * $35;
  HEAPF32[$37>>2] = $39;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer1>>2] = 1574;
  _dMessage(2,1545,$vararg_buffer1);
  $40 = $0;
  HEAPF32[$40>>2] = 1.0;
  $41 = $0;
  $42 = ((($41)) + 4|0);
  HEAPF32[$42>>2] = 0.0;
  $43 = $0;
  $44 = ((($43)) + 8|0);
  HEAPF32[$44>>2] = 0.0;
  $45 = $0;
  $46 = ((($45)) + 12|0);
  HEAPF32[$46>>2] = 0.0;
  STACKTOP = sp;return;
 }
}
function _dPlaneSpace($n,$p,$q) {
 $n = $n|0;
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0;
 var $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0;
 var $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $a = 0.0, $a1 = 0.0, $k = 0.0, $k2 = 0.0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $n;
 $1 = $p;
 $2 = $q;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 $or$cond3 = $or$cond & $8;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 1586;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11;
 $13 = (+Math_abs((+$12)));
 $14 = $13;
 $15 = $14;
 $16 = $15 > 0.70710678118654757;
 $17 = $0;
 if ($16) {
  $18 = ((($17)) + 4|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $0;
  $21 = ((($20)) + 4|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $19 * $22;
  $24 = $0;
  $25 = ((($24)) + 8|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $0;
  $28 = ((($27)) + 8|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $26 * $29;
  $31 = $23 + $30;
  $a = $31;
  $32 = $a;
  $33 = $32;
  $34 = (+Math_sqrt((+$33)));
  $35 = 1.0 / $34;
  $36 = $35;
  $k = $36;
  $37 = $1;
  HEAPF32[$37>>2] = 0.0;
  $38 = $0;
  $39 = ((($38)) + 8|0);
  $40 = +HEAPF32[$39>>2];
  $41 = -$40;
  $42 = $k;
  $43 = $41 * $42;
  $44 = $1;
  $45 = ((($44)) + 4|0);
  HEAPF32[$45>>2] = $43;
  $46 = $0;
  $47 = ((($46)) + 4|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $k;
  $50 = $48 * $49;
  $51 = $1;
  $52 = ((($51)) + 8|0);
  HEAPF32[$52>>2] = $50;
  $53 = $a;
  $54 = $k;
  $55 = $53 * $54;
  $56 = $2;
  HEAPF32[$56>>2] = $55;
  $57 = $0;
  $58 = +HEAPF32[$57>>2];
  $59 = -$58;
  $60 = $1;
  $61 = ((($60)) + 8|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $59 * $62;
  $64 = $2;
  $65 = ((($64)) + 4|0);
  HEAPF32[$65>>2] = $63;
  $66 = $0;
  $67 = +HEAPF32[$66>>2];
  $68 = $1;
  $69 = ((($68)) + 4|0);
  $70 = +HEAPF32[$69>>2];
  $71 = $67 * $70;
  $72 = $2;
  $73 = ((($72)) + 8|0);
  HEAPF32[$73>>2] = $71;
  STACKTOP = sp;return;
 } else {
  $74 = +HEAPF32[$17>>2];
  $75 = $0;
  $76 = +HEAPF32[$75>>2];
  $77 = $74 * $76;
  $78 = $0;
  $79 = ((($78)) + 4|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $0;
  $82 = ((($81)) + 4|0);
  $83 = +HEAPF32[$82>>2];
  $84 = $80 * $83;
  $85 = $77 + $84;
  $a1 = $85;
  $86 = $a1;
  $87 = $86;
  $88 = (+Math_sqrt((+$87)));
  $89 = 1.0 / $88;
  $90 = $89;
  $k2 = $90;
  $91 = $0;
  $92 = ((($91)) + 4|0);
  $93 = +HEAPF32[$92>>2];
  $94 = -$93;
  $95 = $k2;
  $96 = $94 * $95;
  $97 = $1;
  HEAPF32[$97>>2] = $96;
  $98 = $0;
  $99 = +HEAPF32[$98>>2];
  $100 = $k2;
  $101 = $99 * $100;
  $102 = $1;
  $103 = ((($102)) + 4|0);
  HEAPF32[$103>>2] = $101;
  $104 = $1;
  $105 = ((($104)) + 8|0);
  HEAPF32[$105>>2] = 0.0;
  $106 = $0;
  $107 = ((($106)) + 8|0);
  $108 = +HEAPF32[$107>>2];
  $109 = -$108;
  $110 = $1;
  $111 = ((($110)) + 4|0);
  $112 = +HEAPF32[$111>>2];
  $113 = $109 * $112;
  $114 = $2;
  HEAPF32[$114>>2] = $113;
  $115 = $0;
  $116 = ((($115)) + 8|0);
  $117 = +HEAPF32[$116>>2];
  $118 = $1;
  $119 = +HEAPF32[$118>>2];
  $120 = $117 * $119;
  $121 = $2;
  $122 = ((($121)) + 4|0);
  HEAPF32[$122>>2] = $120;
  $123 = $a1;
  $124 = $k2;
  $125 = $123 * $124;
  $126 = $2;
  $127 = ((($126)) + 8|0);
  HEAPF32[$127>>2] = $125;
  STACKTOP = sp;return;
 }
}
function _dDOT($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 STACKTOP = sp;return (+$22);
}
function _dSetZero($a,$n) {
 $a = $a|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $a;
 $1 = $n;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)>=(0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 1598;
  _dDebug(2,6111,$vararg_buffer);
 }
 while(1) {
  $6 = $1;
  $7 = ($6|0)>(0);
  if (!($7)) {
   break;
  }
  $8 = $0;
  $9 = ((($8)) + 4|0);
  $0 = $9;
  HEAPF32[$8>>2] = 0.0;
  $10 = $1;
  $11 = (($10) + -1)|0;
  $1 = $11;
 }
 STACKTOP = sp;return;
}
function _dSetValue($a,$n,$value) {
 $a = $a|0;
 $n = $n|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $a;
 $1 = $n;
 $2 = $value;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 $6 = ($5|0)>=(0);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 1607;
  _dDebug(2,6111,$vararg_buffer);
 }
 while(1) {
  $7 = $1;
  $8 = ($7|0)>(0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = $0;
  $11 = ((($10)) + 4|0);
  $0 = $11;
  HEAPF32[$10>>2] = $9;
  $12 = $1;
  $13 = (($12) + -1)|0;
  $1 = $13;
 }
 STACKTOP = sp;return;
}
function _dFactorCholesky($A,$n) {
 $A = $A|0;
 $n = $n|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $aa = 0, $b = 0, $bb = 0, $cc = 0, $i = 0, $j = 0, $k = 0, $nskip = 0, $or$cond = 0, $recip = 0, $sum = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $A;
 $2 = $n;
 $3 = $2;
 $4 = ($3|0)>(0);
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 1617;
  _dDebug(2,6111,$vararg_buffer);
 }
 $7 = $2;
 $8 = ($7|0)>(1);
 $9 = $2;
 if ($8) {
  $10 = (($9) - 1)|0;
  $11 = $10 | 3;
  $12 = (($11) + 1)|0;
  $13 = $12;
 } else {
  $13 = $9;
 }
 $nskip = $13;
 $14 = $2;
 $15 = $14<<2;
 $16 = (($15) + 15)|0;
 $$alloca_mul = $16;
 $17 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $18 = $17;
 $19 = (($18) - 1)|0;
 $20 = $19 | 15;
 $21 = (($20) + 1)|0;
 $22 = $21;
 $recip = $22;
 $23 = $1;
 $aa = $23;
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = $2;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   label = 19;
   break;
  }
  $27 = $1;
  $bb = $27;
  $28 = $1;
  $29 = $i;
  $30 = $nskip;
  $31 = Math_imul($29, $30)|0;
  $32 = (($28) + ($31<<2)|0);
  $cc = $32;
  $j = 0;
  while(1) {
   $33 = $j;
   $34 = $i;
   $35 = ($33|0)<($34|0);
   $36 = $cc;
   $37 = +HEAPF32[$36>>2];
   $sum = $37;
   $38 = $aa;
   $a = $38;
   if (!($35)) {
    break;
   }
   $39 = $bb;
   $b = $39;
   $40 = $j;
   $k = $40;
   while(1) {
    $41 = $k;
    $42 = ($41|0)!=(0);
    if (!($42)) {
     break;
    }
    $43 = $a;
    $44 = ((($43)) + 4|0);
    $a = $44;
    $45 = +HEAPF32[$43>>2];
    $46 = $b;
    $47 = ((($46)) + 4|0);
    $b = $47;
    $48 = +HEAPF32[$46>>2];
    $49 = $45 * $48;
    $50 = $sum;
    $51 = $50 - $49;
    $sum = $51;
    $52 = $k;
    $53 = (($52) + -1)|0;
    $k = $53;
   }
   $54 = $sum;
   $55 = $j;
   $56 = $recip;
   $57 = (($56) + ($55<<2)|0);
   $58 = +HEAPF32[$57>>2];
   $59 = $54 * $58;
   $60 = $cc;
   HEAPF32[$60>>2] = $59;
   $61 = $nskip;
   $62 = $bb;
   $63 = (($62) + ($61<<2)|0);
   $bb = $63;
   $64 = $cc;
   $65 = ((($64)) + 4|0);
   $cc = $65;
   $66 = $j;
   $67 = (($66) + 1)|0;
   $j = $67;
  }
  $68 = $i;
  $k = $68;
  while(1) {
   $69 = $k;
   $70 = ($69|0)!=(0);
   if (!($70)) {
    break;
   }
   $71 = $a;
   $72 = +HEAPF32[$71>>2];
   $73 = $a;
   $74 = +HEAPF32[$73>>2];
   $75 = $72 * $74;
   $76 = $sum;
   $77 = $76 - $75;
   $sum = $77;
   $78 = $k;
   $79 = (($78) + -1)|0;
   $k = $79;
   $80 = $a;
   $81 = ((($80)) + 4|0);
   $a = $81;
  }
  $82 = $sum;
  $83 = $82 <= 0.0;
  if ($83) {
   label = 17;
   break;
  }
  $84 = $sum;
  $85 = $84;
  $86 = (+Math_sqrt((+$85)));
  $87 = $86;
  $88 = $cc;
  HEAPF32[$88>>2] = $87;
  $89 = $cc;
  $90 = +HEAPF32[$89>>2];
  $91 = 1.0 / $90;
  $92 = $i;
  $93 = $recip;
  $94 = (($93) + ($92<<2)|0);
  HEAPF32[$94>>2] = $91;
  $95 = $nskip;
  $96 = $aa;
  $97 = (($96) + ($95<<2)|0);
  $aa = $97;
  $98 = $i;
  $99 = (($98) + 1)|0;
  $i = $99;
 }
 if ((label|0) == 17) {
  $0 = 0;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 else if ((label|0) == 19) {
  $0 = 1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 return (0)|0;
}
function _dSolveCholesky($L,$b,$n) {
 $L = $L|0;
 $b = $b|0;
 $n = $n|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $i = 0, $k = 0, $nskip = 0, $or$cond = 0, $or$cond3 = 0, $sum = 0.0;
 var $vararg_buffer = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $L;
 $1 = $b;
 $2 = $n;
 $3 = $2;
 $4 = ($3|0)>(0);
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 $or$cond3 = $or$cond & $8;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 1633;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $2;
 $10 = ($9|0)>(1);
 $11 = $2;
 if ($10) {
  $12 = (($11) - 1)|0;
  $13 = $12 | 3;
  $14 = (($13) + 1)|0;
  $15 = $14;
 } else {
  $15 = $11;
 }
 $nskip = $15;
 $16 = $2;
 $17 = $16<<2;
 $18 = (($17) + 15)|0;
 $$alloca_mul = $18;
 $19 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $20 = $19;
 $21 = (($20) - 1)|0;
 $22 = $21 | 15;
 $23 = (($22) + 1)|0;
 $24 = $23;
 $y = $24;
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = $2;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $sum = 0.0;
  $k = 0;
  while(1) {
   $28 = $k;
   $29 = $i;
   $30 = ($28|0)<($29|0);
   $31 = $i;
   if (!($30)) {
    break;
   }
   $32 = $nskip;
   $33 = Math_imul($31, $32)|0;
   $34 = $k;
   $35 = (($33) + ($34))|0;
   $36 = $0;
   $37 = (($36) + ($35<<2)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = $k;
   $40 = $y;
   $41 = (($40) + ($39<<2)|0);
   $42 = +HEAPF32[$41>>2];
   $43 = $38 * $42;
   $44 = $sum;
   $45 = $44 + $43;
   $sum = $45;
   $46 = $k;
   $47 = (($46) + 1)|0;
   $k = $47;
  }
  $48 = $1;
  $49 = (($48) + ($31<<2)|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $sum;
  $52 = $50 - $51;
  $53 = $i;
  $54 = $nskip;
  $55 = Math_imul($53, $54)|0;
  $56 = $i;
  $57 = (($55) + ($56))|0;
  $58 = $0;
  $59 = (($58) + ($57<<2)|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $52 / $60;
  $62 = $i;
  $63 = $y;
  $64 = (($63) + ($62<<2)|0);
  HEAPF32[$64>>2] = $61;
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 $67 = $2;
 $68 = (($67) - 1)|0;
 $i = $68;
 while(1) {
  $69 = $i;
  $70 = ($69|0)>=(0);
  if (!($70)) {
   break;
  }
  $sum = 0.0;
  $71 = $i;
  $72 = (($71) + 1)|0;
  $k = $72;
  while(1) {
   $73 = $k;
   $74 = $2;
   $75 = ($73|0)<($74|0);
   if (!($75)) {
    break;
   }
   $76 = $k;
   $77 = $nskip;
   $78 = Math_imul($76, $77)|0;
   $79 = $i;
   $80 = (($78) + ($79))|0;
   $81 = $0;
   $82 = (($81) + ($80<<2)|0);
   $83 = +HEAPF32[$82>>2];
   $84 = $k;
   $85 = $1;
   $86 = (($85) + ($84<<2)|0);
   $87 = +HEAPF32[$86>>2];
   $88 = $83 * $87;
   $89 = $sum;
   $90 = $89 + $88;
   $sum = $90;
   $91 = $k;
   $92 = (($91) + 1)|0;
   $k = $92;
  }
  $93 = $i;
  $94 = $y;
  $95 = (($94) + ($93<<2)|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $sum;
  $98 = $96 - $97;
  $99 = $i;
  $100 = $nskip;
  $101 = Math_imul($99, $100)|0;
  $102 = $i;
  $103 = (($101) + ($102))|0;
  $104 = $0;
  $105 = (($104) + ($103<<2)|0);
  $106 = +HEAPF32[$105>>2];
  $107 = $98 / $106;
  $108 = $i;
  $109 = $1;
  $110 = (($109) + ($108<<2)|0);
  HEAPF32[$110>>2] = $107;
  $111 = $i;
  $112 = (($111) + -1)|0;
  $i = $112;
 }
 STACKTOP = sp;return;
}
function _dInvertPDMatrix($A,$Ainv,$n) {
 $A = $A|0;
 $Ainv = $Ainv|0;
 $n = $n|0;
 var $$alloca_mul = 0, $$alloca_mul8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $L = 0, $i = 0, $j = 0, $nskip = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $A;
 $2 = $Ainv;
 $3 = $n;
 $4 = $3;
 $5 = ($4|0)>(0);
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 $or$cond = $5 & $7;
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 $or$cond3 = $or$cond & $9;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 1648;
  _dDebug(2,6111,$vararg_buffer);
 }
 $10 = $3;
 $11 = ($10|0)>(1);
 $12 = $3;
 if ($11) {
  $13 = (($12) - 1)|0;
  $14 = $13 | 3;
  $15 = (($14) + 1)|0;
  $16 = $15;
 } else {
  $16 = $12;
 }
 $nskip = $16;
 $17 = $nskip;
 $18 = $3;
 $19 = Math_imul($17, $18)|0;
 $20 = $19<<2;
 $21 = (($20) + 15)|0;
 $$alloca_mul = $21;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $23 = $22;
 $24 = (($23) - 1)|0;
 $25 = $24 | 15;
 $26 = (($25) + 1)|0;
 $27 = $26;
 $L = $27;
 $28 = $L;
 $29 = $1;
 $30 = $nskip;
 $31 = $3;
 $32 = Math_imul($30, $31)|0;
 $33 = $32<<2;
 _memcpy(($28|0),($29|0),($33|0))|0;
 $34 = $3;
 $35 = $34<<2;
 $36 = (($35) + 15)|0;
 $$alloca_mul8 = $36;
 $37 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul8)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $38 = $37;
 $39 = (($38) - 1)|0;
 $40 = $39 | 15;
 $41 = (($40) + 1)|0;
 $42 = $41;
 $x = $42;
 $43 = $L;
 $44 = $3;
 $45 = (_dFactorCholesky($43,$44)|0);
 $46 = ($45|0)==(0);
 if ($46) {
  $0 = 0;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $47 = $2;
 $48 = $3;
 $49 = $nskip;
 $50 = Math_imul($48, $49)|0;
 _dSetZero($47,$50);
 $i = 0;
 while(1) {
  $51 = $i;
  $52 = $3;
  $53 = ($51|0)<($52|0);
  if (!($53)) {
   break;
  }
  $j = 0;
  while(1) {
   $54 = $j;
   $55 = $3;
   $56 = ($54|0)<($55|0);
   if (!($56)) {
    break;
   }
   $57 = $j;
   $58 = $x;
   $59 = (($58) + ($57<<2)|0);
   HEAPF32[$59>>2] = 0.0;
   $60 = $j;
   $61 = (($60) + 1)|0;
   $j = $61;
  }
  $62 = $i;
  $63 = $x;
  $64 = (($63) + ($62<<2)|0);
  HEAPF32[$64>>2] = 1.0;
  $65 = $L;
  $66 = $x;
  $67 = $3;
  _dSolveCholesky($65,$66,$67);
  $j = 0;
  while(1) {
   $68 = $j;
   $69 = $3;
   $70 = ($68|0)<($69|0);
   if (!($70)) {
    break;
   }
   $71 = $j;
   $72 = $x;
   $73 = (($72) + ($71<<2)|0);
   $74 = +HEAPF32[$73>>2];
   $75 = $j;
   $76 = $nskip;
   $77 = Math_imul($75, $76)|0;
   $78 = $i;
   $79 = (($77) + ($78))|0;
   $80 = $2;
   $81 = (($80) + ($79<<2)|0);
   HEAPF32[$81>>2] = $74;
   $82 = $j;
   $83 = (($82) + 1)|0;
   $j = $83;
  }
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 $0 = 1;
 $86 = $0;
 STACKTOP = sp;return ($86|0);
}
function _dIsPositiveDefinite($A,$n) {
 $A = $A|0;
 $n = $n|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Acopy = 0, $nskip = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $A;
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)>(0);
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 1664;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = ($6|0)>(1);
 $8 = $1;
 if ($7) {
  $9 = (($8) - 1)|0;
  $10 = $9 | 3;
  $11 = (($10) + 1)|0;
  $12 = $11;
 } else {
  $12 = $8;
 }
 $nskip = $12;
 $13 = $nskip;
 $14 = $1;
 $15 = Math_imul($13, $14)|0;
 $16 = $15<<2;
 $17 = (($16) + 15)|0;
 $$alloca_mul = $17;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $19 = $18;
 $20 = (($19) - 1)|0;
 $21 = $20 | 15;
 $22 = (($21) + 1)|0;
 $23 = $22;
 $Acopy = $23;
 $24 = $Acopy;
 $25 = $0;
 $26 = $nskip;
 $27 = $1;
 $28 = Math_imul($26, $27)|0;
 $29 = $28<<2;
 _memcpy(($24|0),($25|0),($29|0))|0;
 $30 = $Acopy;
 $31 = $1;
 $32 = (_dFactorCholesky($30,$31)|0);
 STACKTOP = sp;return ($32|0);
}
function _dVectorScale($a,$d,$n) {
 $a = $a|0;
 $d = $d|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $a;
 $1 = $d;
 $2 = $n;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 $7 = $2;
 $8 = ($7|0)>=(0);
 $or$cond3 = $or$cond & $8;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 1684;
  _dDebug(2,6111,$vararg_buffer);
 }
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $2;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = $1;
  $14 = (($13) + ($12<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $i;
  $17 = $0;
  $18 = (($17) + ($16<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $19 * $15;
  HEAPF32[$18>>2] = $20;
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 STACKTOP = sp;return;
}
function _dSolveLDLT($L,$d,$b,$n,$nskip) {
 $L = $L|0;
 $d = $d|0;
 $b = $b|0;
 $n = $n|0;
 $nskip = $nskip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $L;
 $1 = $d;
 $2 = $b;
 $3 = $n;
 $4 = $nskip;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 $or$cond = $6 & $8;
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 $or$cond3 = $or$cond & $10;
 $11 = $3;
 $12 = ($11|0)>(0);
 $or$cond5 = $or$cond3 & $12;
 if ($or$cond5) {
  $13 = $4;
  $14 = $3;
  $15 = ($13|0)>=($14|0);
  if (!($15)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 1697;
  _dDebug(2,6111,$vararg_buffer);
 }
 $16 = $0;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 _dSolveL1($16,$17,$18,$19);
 $20 = $2;
 $21 = $1;
 $22 = $3;
 _dVectorScale($20,$21,$22);
 $23 = $0;
 $24 = $2;
 $25 = $3;
 $26 = $4;
 _dSolveL1T($23,$24,$25,$26);
 STACKTOP = sp;return;
}
function _dLDLTAddTL($L,$d,$a,$n,$nskip) {
 $L = $L|0;
 $d = $d|0;
 $a = $a|0;
 $n = $n|0;
 $nskip = $nskip|0;
 var $$alloca_mul = 0, $$alloca_mul11 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0;
 var $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0;
 var $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0;
 var $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0;
 var $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $W1 = 0;
 var $W11 = 0.0, $W2 = 0, $W21 = 0.0, $Wp = 0.0, $alpha1 = 0.0, $alpha2 = 0.0, $alphanew = 0.0, $dee = 0.0, $ell = 0.0, $gamma1 = 0.0, $gamma2 = 0.0, $j = 0, $k1 = 0.0, $k2 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $L;
 $1 = $d;
 $2 = $a;
 $3 = $n;
 $4 = $nskip;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 $or$cond = $6 & $8;
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 $or$cond3 = $or$cond & $10;
 $11 = $3;
 $12 = ($11|0)>(0);
 $or$cond5 = $or$cond3 & $12;
 if ($or$cond5) {
  $13 = $4;
  $14 = $3;
  $15 = ($13|0)>=($14|0);
  if (!($15)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 1708;
  _dDebug(2,6111,$vararg_buffer);
 }
 $16 = $3;
 $17 = ($16|0)<(2);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = $3;
 $19 = $18<<2;
 $20 = (($19) + 15)|0;
 $$alloca_mul = $20;
 $21 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $22 = $21;
 $23 = (($22) - 1)|0;
 $24 = $23 | 15;
 $25 = (($24) + 1)|0;
 $26 = $25;
 $W1 = $26;
 $27 = $3;
 $28 = $27<<2;
 $29 = (($28) + 15)|0;
 $$alloca_mul11 = $29;
 $30 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul11)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $31 = $30;
 $32 = (($31) - 1)|0;
 $33 = $32 | 15;
 $34 = (($33) + 1)|0;
 $35 = $34;
 $W2 = $35;
 $36 = $W1;
 HEAPF32[$36>>2] = 0.0;
 $37 = $W2;
 HEAPF32[$37>>2] = 0.0;
 $j = 1;
 while(1) {
  $38 = $j;
  $39 = $3;
  $40 = ($38|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = $j;
  $42 = $2;
  $43 = (($42) + ($41<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $44;
  $46 = $45 * 0.70710678118654757;
  $47 = $46;
  $48 = $j;
  $49 = $W2;
  $50 = (($49) + ($48<<2)|0);
  HEAPF32[$50>>2] = $47;
  $51 = $j;
  $52 = $W1;
  $53 = (($52) + ($51<<2)|0);
  HEAPF32[$53>>2] = $47;
  $54 = $j;
  $55 = (($54) + 1)|0;
  $j = $55;
 }
 $56 = $2;
 $57 = +HEAPF32[$56>>2];
 $58 = 0.5 * $57;
 $59 = $58 + 1.0;
 $60 = $59;
 $61 = $60 * 0.70710678118654757;
 $62 = $61;
 $W11 = $62;
 $63 = $2;
 $64 = +HEAPF32[$63>>2];
 $65 = 0.5 * $64;
 $66 = $65 - 1.0;
 $67 = $66;
 $68 = $67 * 0.70710678118654757;
 $69 = $68;
 $W21 = $69;
 $alpha1 = 1.0;
 $alpha2 = 1.0;
 $70 = $1;
 $71 = +HEAPF32[$70>>2];
 $dee = $71;
 $72 = $alpha1;
 $73 = $W11;
 $74 = $W11;
 $75 = $73 * $74;
 $76 = $dee;
 $77 = $75 * $76;
 $78 = $72 + $77;
 $alphanew = $78;
 $79 = $alphanew;
 $80 = $dee;
 $81 = $80 / $79;
 $dee = $81;
 $82 = $W11;
 $83 = $dee;
 $84 = $82 * $83;
 $gamma1 = $84;
 $85 = $alpha1;
 $86 = $dee;
 $87 = $86 * $85;
 $dee = $87;
 $88 = $alphanew;
 $alpha1 = $88;
 $89 = $alpha2;
 $90 = $W21;
 $91 = $W21;
 $92 = $90 * $91;
 $93 = $dee;
 $94 = $92 * $93;
 $95 = $89 - $94;
 $alphanew = $95;
 $96 = $alphanew;
 $97 = $dee;
 $98 = $97 / $96;
 $dee = $98;
 $99 = $W21;
 $100 = $dee;
 $101 = $99 * $100;
 $gamma2 = $101;
 $102 = $alphanew;
 $alpha2 = $102;
 $103 = $W21;
 $104 = $gamma1;
 $105 = $103 * $104;
 $106 = 1.0 - $105;
 $k1 = $106;
 $107 = $W21;
 $108 = $gamma1;
 $109 = $107 * $108;
 $110 = $W11;
 $111 = $109 * $110;
 $112 = $W21;
 $113 = $111 - $112;
 $k2 = $113;
 $p = 1;
 while(1) {
  $114 = $p;
  $115 = $3;
  $116 = ($114|0)<($115|0);
  if (!($116)) {
   break;
  }
  $117 = $p;
  $118 = $W1;
  $119 = (($118) + ($117<<2)|0);
  $120 = +HEAPF32[$119>>2];
  $Wp = $120;
  $121 = $p;
  $122 = $4;
  $123 = Math_imul($121, $122)|0;
  $124 = $0;
  $125 = (($124) + ($123<<2)|0);
  $126 = +HEAPF32[$125>>2];
  $ell = $126;
  $127 = $Wp;
  $128 = $W11;
  $129 = $ell;
  $130 = $128 * $129;
  $131 = $127 - $130;
  $132 = $p;
  $133 = $W1;
  $134 = (($133) + ($132<<2)|0);
  HEAPF32[$134>>2] = $131;
  $135 = $k1;
  $136 = $Wp;
  $137 = $135 * $136;
  $138 = $k2;
  $139 = $ell;
  $140 = $138 * $139;
  $141 = $137 + $140;
  $142 = $p;
  $143 = $W2;
  $144 = (($143) + ($142<<2)|0);
  HEAPF32[$144>>2] = $141;
  $145 = $p;
  $146 = (($145) + 1)|0;
  $p = $146;
 }
 $j = 1;
 while(1) {
  $147 = $j;
  $148 = $3;
  $149 = ($147|0)<($148|0);
  if (!($149)) {
   break;
  }
  $150 = $j;
  $151 = $1;
  $152 = (($151) + ($150<<2)|0);
  $153 = +HEAPF32[$152>>2];
  $dee = $153;
  $154 = $alpha1;
  $155 = $j;
  $156 = $W1;
  $157 = (($156) + ($155<<2)|0);
  $158 = +HEAPF32[$157>>2];
  $159 = $j;
  $160 = $W1;
  $161 = (($160) + ($159<<2)|0);
  $162 = +HEAPF32[$161>>2];
  $163 = $158 * $162;
  $164 = $dee;
  $165 = $163 * $164;
  $166 = $154 + $165;
  $alphanew = $166;
  $167 = $alphanew;
  $168 = $dee;
  $169 = $168 / $167;
  $dee = $169;
  $170 = $j;
  $171 = $W1;
  $172 = (($171) + ($170<<2)|0);
  $173 = +HEAPF32[$172>>2];
  $174 = $dee;
  $175 = $173 * $174;
  $gamma1 = $175;
  $176 = $alpha1;
  $177 = $dee;
  $178 = $177 * $176;
  $dee = $178;
  $179 = $alphanew;
  $alpha1 = $179;
  $180 = $alpha2;
  $181 = $j;
  $182 = $W2;
  $183 = (($182) + ($181<<2)|0);
  $184 = +HEAPF32[$183>>2];
  $185 = $j;
  $186 = $W2;
  $187 = (($186) + ($185<<2)|0);
  $188 = +HEAPF32[$187>>2];
  $189 = $184 * $188;
  $190 = $dee;
  $191 = $189 * $190;
  $192 = $180 - $191;
  $alphanew = $192;
  $193 = $alphanew;
  $194 = $dee;
  $195 = $194 / $193;
  $dee = $195;
  $196 = $j;
  $197 = $W2;
  $198 = (($197) + ($196<<2)|0);
  $199 = +HEAPF32[$198>>2];
  $200 = $dee;
  $201 = $199 * $200;
  $gamma2 = $201;
  $202 = $alpha2;
  $203 = $dee;
  $204 = $203 * $202;
  $dee = $204;
  $205 = $dee;
  $206 = $j;
  $207 = $1;
  $208 = (($207) + ($206<<2)|0);
  HEAPF32[$208>>2] = $205;
  $209 = $alphanew;
  $alpha2 = $209;
  $210 = $j;
  $211 = $W1;
  $212 = (($211) + ($210<<2)|0);
  $213 = +HEAPF32[$212>>2];
  $k1 = $213;
  $214 = $j;
  $215 = $W2;
  $216 = (($215) + ($214<<2)|0);
  $217 = +HEAPF32[$216>>2];
  $k2 = $217;
  $218 = $j;
  $219 = (($218) + 1)|0;
  $p = $219;
  while(1) {
   $220 = $p;
   $221 = $3;
   $222 = ($220|0)<($221|0);
   if (!($222)) {
    break;
   }
   $223 = $p;
   $224 = $4;
   $225 = Math_imul($223, $224)|0;
   $226 = $j;
   $227 = (($225) + ($226))|0;
   $228 = $0;
   $229 = (($228) + ($227<<2)|0);
   $230 = +HEAPF32[$229>>2];
   $ell = $230;
   $231 = $p;
   $232 = $W1;
   $233 = (($232) + ($231<<2)|0);
   $234 = +HEAPF32[$233>>2];
   $235 = $k1;
   $236 = $ell;
   $237 = $235 * $236;
   $238 = $234 - $237;
   $Wp = $238;
   $239 = $gamma1;
   $240 = $Wp;
   $241 = $239 * $240;
   $242 = $ell;
   $243 = $242 + $241;
   $ell = $243;
   $244 = $Wp;
   $245 = $p;
   $246 = $W1;
   $247 = (($246) + ($245<<2)|0);
   HEAPF32[$247>>2] = $244;
   $248 = $p;
   $249 = $W2;
   $250 = (($249) + ($248<<2)|0);
   $251 = +HEAPF32[$250>>2];
   $252 = $k2;
   $253 = $ell;
   $254 = $252 * $253;
   $255 = $251 - $254;
   $Wp = $255;
   $256 = $gamma2;
   $257 = $Wp;
   $258 = $256 * $257;
   $259 = $ell;
   $260 = $259 - $258;
   $ell = $260;
   $261 = $Wp;
   $262 = $p;
   $263 = $W2;
   $264 = (($263) + ($262<<2)|0);
   HEAPF32[$264>>2] = $261;
   $265 = $ell;
   $266 = $p;
   $267 = $4;
   $268 = Math_imul($266, $267)|0;
   $269 = $j;
   $270 = (($268) + ($269))|0;
   $271 = $0;
   $272 = (($271) + ($270<<2)|0);
   HEAPF32[$272>>2] = $265;
   $273 = $p;
   $274 = (($273) + 1)|0;
   $p = $274;
  }
  $275 = $j;
  $276 = (($275) + 1)|0;
  $j = $276;
 }
 STACKTOP = sp;return;
}
function _dLDLTRemove($A,$p,$L,$d,$n1,$n2,$r,$nskip) {
 $A = $A|0;
 $p = $p|0;
 $L = $L|0;
 $d = $d|0;
 $n1 = $n1|0;
 $n2 = $n2|0;
 $r = $r|0;
 $nskip = $nskip|0;
 var $$alloca_mul = 0, $$alloca_mul24 = 0, $$alloca_mul26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a1 = 0, $i = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, $or$cond9 = 0, $t = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_ptr15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $A;
 $1 = $p;
 $2 = $L;
 $3 = $d;
 $4 = $n1;
 $5 = $n2;
 $6 = $r;
 $7 = $nskip;
 $8 = $0;
 $9 = ($8|0)!=(0|0);
 $10 = $1;
 $11 = ($10|0)!=(0|0);
 $or$cond = $9 & $11;
 $12 = $2;
 $13 = ($12|0)!=(0|0);
 $or$cond3 = $or$cond & $13;
 $14 = $3;
 $15 = ($14|0)!=(0|0);
 $or$cond5 = $or$cond3 & $15;
 $16 = $4;
 $17 = ($16|0)>(0);
 $or$cond7 = $or$cond5 & $17;
 $18 = $5;
 $19 = ($18|0)>(0);
 $or$cond9 = $or$cond7 & $19;
 $20 = $6;
 $21 = ($20|0)>=(0);
 $or$cond11 = $or$cond9 & $21;
 if ($or$cond11) {
  $22 = $6;
  $23 = $5;
  $24 = ($22|0)<($23|0);
  if ($24) {
   $25 = $4;
   $26 = $5;
   $27 = ($25|0)>=($26|0);
   if ($27) {
    $28 = $7;
    $29 = $4;
    $30 = ($28|0)>=($29|0);
    if (!($30)) {
     label = 5;
    }
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  HEAP32[$vararg_buffer>>2] = 1719;
  _dDebug(2,6111,$vararg_buffer);
 }
 $i = 0;
 while(1) {
  $31 = $i;
  $32 = $5;
  $33 = ($31|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $i;
  $35 = $1;
  $36 = (($35) + ($34<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)>=(0);
  if ($38) {
   $39 = $i;
   $40 = $1;
   $41 = (($40) + ($39<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $4;
   $44 = ($42|0)<($43|0);
   if (!($44)) {
    label = 10;
   }
  } else {
   label = 10;
  }
  if ((label|0) == 10) {
   label = 0;
   HEAP32[$vararg_buffer12>>2] = 1719;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = 1786;
   _dDebug(1,1731,$vararg_buffer12);
  }
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
 }
 $47 = $6;
 $48 = $5;
 $49 = (($48) - 1)|0;
 $50 = ($47|0)==($49|0);
 if ($50) {
  STACKTOP = sp;return;
 }
 $51 = $6;
 $52 = ($51|0)==(0);
 if ($52) {
  $53 = $5;
  $54 = $53<<2;
  $55 = (($54) + 15)|0;
  $$alloca_mul = $55;
  $56 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
  $57 = $56;
  $58 = (($57) - 1)|0;
  $59 = $58 | 15;
  $60 = (($59) + 1)|0;
  $61 = $60;
  $a = $61;
  $i = 0;
  while(1) {
   $62 = $i;
   $63 = $5;
   $64 = ($62|0)<($63|0);
   if (!($64)) {
    break;
   }
   $65 = $i;
   $66 = $1;
   $67 = (($66) + ($65<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $1;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($68|0)>($70|0);
   if ($71) {
    $72 = $1;
    $73 = HEAP32[$72>>2]|0;
    $74 = $i;
    $75 = $1;
    $76 = (($75) + ($74<<2)|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $0;
    $79 = (($78) + ($77<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + ($73<<2)|0);
    $82 = +HEAPF32[$81>>2];
    $95 = $82;
   } else {
    $83 = $i;
    $84 = $1;
    $85 = (($84) + ($83<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $1;
    $88 = HEAP32[$87>>2]|0;
    $89 = $0;
    $90 = (($89) + ($88<<2)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + ($86<<2)|0);
    $93 = +HEAPF32[$92>>2];
    $95 = $93;
   }
   $94 = -$95;
   $96 = $i;
   $97 = $a;
   $98 = (($97) + ($96<<2)|0);
   HEAPF32[$98>>2] = $94;
   $99 = $i;
   $100 = (($99) + 1)|0;
   $i = $100;
  }
  $101 = $a;
  $102 = +HEAPF32[$101>>2];
  $103 = $102 + 1.0;
  HEAPF32[$101>>2] = $103;
  $104 = $2;
  $105 = $3;
  $106 = $a;
  $107 = $5;
  $108 = $7;
  _dLDLTAddTL($104,$105,$106,$107,$108);
 } else {
  $109 = $6;
  $110 = $109<<2;
  $111 = (($110) + 15)|0;
  $$alloca_mul24 = $111;
  $112 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul24)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
  $113 = $112;
  $114 = (($113) - 1)|0;
  $115 = $114 | 15;
  $116 = (($115) + 1)|0;
  $117 = $116;
  $t = $117;
  $118 = $5;
  $119 = $6;
  $120 = (($118) - ($119))|0;
  $121 = $120<<2;
  $122 = (($121) + 15)|0;
  $$alloca_mul26 = $122;
  $123 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul26)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
  $124 = $123;
  $125 = (($124) - 1)|0;
  $126 = $125 | 15;
  $127 = (($126) + 1)|0;
  $128 = $127;
  $a1 = $128;
  $i = 0;
  while(1) {
   $129 = $i;
   $130 = $6;
   $131 = ($129|0)<($130|0);
   if (!($131)) {
    break;
   }
   $132 = $6;
   $133 = $7;
   $134 = Math_imul($132, $133)|0;
   $135 = $i;
   $136 = (($134) + ($135))|0;
   $137 = $2;
   $138 = (($137) + ($136<<2)|0);
   $139 = +HEAPF32[$138>>2];
   $140 = $i;
   $141 = $3;
   $142 = (($141) + ($140<<2)|0);
   $143 = +HEAPF32[$142>>2];
   $144 = $139 / $143;
   $145 = $i;
   $146 = $t;
   $147 = (($146) + ($145<<2)|0);
   HEAPF32[$147>>2] = $144;
   $148 = $i;
   $149 = (($148) + 1)|0;
   $i = $149;
  }
  $i = 0;
  while(1) {
   $150 = $i;
   $151 = $5;
   $152 = $6;
   $153 = (($151) - ($152))|0;
   $154 = ($150|0)<($153|0);
   if (!($154)) {
    break;
   }
   $155 = $2;
   $156 = $6;
   $157 = $i;
   $158 = (($156) + ($157))|0;
   $159 = $7;
   $160 = Math_imul($158, $159)|0;
   $161 = (($155) + ($160<<2)|0);
   $162 = $t;
   $163 = $6;
   $164 = (+_dDot($161,$162,$163));
   $165 = $6;
   $166 = $i;
   $167 = (($165) + ($166))|0;
   $168 = $1;
   $169 = (($168) + ($167<<2)|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $6;
   $172 = $1;
   $173 = (($172) + ($171<<2)|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ($170|0)>($174|0);
   $176 = $6;
   if ($175) {
    $177 = $1;
    $178 = (($177) + ($176<<2)|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = $6;
    $181 = $i;
    $182 = (($180) + ($181))|0;
    $183 = $1;
    $184 = (($183) + ($182<<2)|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $0;
    $187 = (($186) + ($185<<2)|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = (($188) + ($179<<2)|0);
    $190 = +HEAPF32[$189>>2];
    $206 = $190;
   } else {
    $191 = $i;
    $192 = (($176) + ($191))|0;
    $193 = $1;
    $194 = (($193) + ($192<<2)|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = $6;
    $197 = $1;
    $198 = (($197) + ($196<<2)|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = $0;
    $201 = (($200) + ($199<<2)|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = (($202) + ($195<<2)|0);
    $204 = +HEAPF32[$203>>2];
    $206 = $204;
   }
   $205 = $164 - $206;
   $207 = $i;
   $208 = $a1;
   $209 = (($208) + ($207<<2)|0);
   HEAPF32[$209>>2] = $205;
   $210 = $i;
   $211 = (($210) + 1)|0;
   $i = $211;
  }
  $212 = $a1;
  $213 = +HEAPF32[$212>>2];
  $214 = $213 + 1.0;
  HEAPF32[$212>>2] = $214;
  $215 = $2;
  $216 = $6;
  $217 = $7;
  $218 = Math_imul($216, $217)|0;
  $219 = (($215) + ($218<<2)|0);
  $220 = $6;
  $221 = (($219) + ($220<<2)|0);
  $222 = $3;
  $223 = $6;
  $224 = (($222) + ($223<<2)|0);
  $225 = $a1;
  $226 = $5;
  $227 = $6;
  $228 = (($226) - ($227))|0;
  $229 = $7;
  _dLDLTAddTL($221,$224,$225,$228,$229);
 }
 $230 = $2;
 $231 = $5;
 $232 = $7;
 $233 = $6;
 _dRemoveRowCol($230,$231,$232,$233);
 $234 = $6;
 $235 = $5;
 $236 = (($235) - 1)|0;
 $237 = ($234|0)<($236|0);
 if (!($237)) {
  STACKTOP = sp;return;
 }
 $238 = $3;
 $239 = $6;
 $240 = (($238) + ($239<<2)|0);
 $241 = $3;
 $242 = $6;
 $243 = (($241) + ($242<<2)|0);
 $244 = ((($243)) + 4|0);
 $245 = $5;
 $246 = $6;
 $247 = (($245) - ($246))|0;
 $248 = (($247) - 1)|0;
 $249 = $248<<2;
 _memmove(($240|0),($244|0),($249|0))|0;
 STACKTOP = sp;return;
}
function _dRemoveRowCol($A,$n,$nskip,$r) {
 $A = $A|0;
 $n = $n|0;
 $nskip = $nskip|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $i = 0, $or$cond = 0, $or$cond3 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $A;
 $1 = $n;
 $2 = $nskip;
 $3 = $r;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 $6 = $1;
 $7 = ($6|0)>(0);
 $or$cond = $5 & $7;
 if ($or$cond) {
  $8 = $2;
  $9 = $1;
  $10 = ($8|0)>=($9|0);
  $11 = $3;
  $12 = ($11|0)>=(0);
  $or$cond3 = $10 & $12;
  if ($or$cond3) {
   $13 = $3;
   $14 = $1;
   $15 = ($13|0)<($14|0);
   if (!($15)) {
    label = 4;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  HEAP32[$vararg_buffer>>2] = 1797;
  _dDebug(2,6111,$vararg_buffer);
 }
 $16 = $3;
 $17 = $1;
 $18 = (($17) - 1)|0;
 $19 = ($16|0)>=($18|0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $3;
 $21 = ($20|0)>(0);
 L10: do {
  if ($21) {
   $i = 0;
   while(1) {
    $22 = $i;
    $23 = $3;
    $24 = ($22|0)<($23|0);
    if (!($24)) {
     break;
    }
    $25 = $0;
    $26 = $i;
    $27 = $2;
    $28 = Math_imul($26, $27)|0;
    $29 = (($25) + ($28<<2)|0);
    $30 = $3;
    $31 = (($29) + ($30<<2)|0);
    $32 = $0;
    $33 = $i;
    $34 = $2;
    $35 = Math_imul($33, $34)|0;
    $36 = (($32) + ($35<<2)|0);
    $37 = $3;
    $38 = (($36) + ($37<<2)|0);
    $39 = ((($38)) + 4|0);
    $40 = $1;
    $41 = $3;
    $42 = (($40) - ($41))|0;
    $43 = (($42) - 1)|0;
    $44 = $43<<2;
    _memmove(($31|0),($39|0),($44|0))|0;
    $45 = $i;
    $46 = (($45) + 1)|0;
    $i = $46;
   }
   $47 = $3;
   $i = $47;
   while(1) {
    $48 = $i;
    $49 = $1;
    $50 = (($49) - 1)|0;
    $51 = ($48|0)<($50|0);
    if (!($51)) {
     break L10;
    }
    $52 = $0;
    $53 = $i;
    $54 = $2;
    $55 = Math_imul($53, $54)|0;
    $56 = (($52) + ($55<<2)|0);
    $57 = $0;
    $58 = $i;
    $59 = $2;
    $60 = Math_imul($58, $59)|0;
    $61 = (($57) + ($60<<2)|0);
    $62 = $2;
    $63 = (($61) + ($62<<2)|0);
    $64 = $3;
    $65 = $64<<2;
    _memcpy(($56|0),($63|0),($65|0))|0;
    $66 = $i;
    $67 = (($66) + 1)|0;
    $i = $67;
   }
  }
 } while(0);
 $68 = $3;
 $i = $68;
 while(1) {
  $69 = $i;
  $70 = $1;
  $71 = (($70) - 1)|0;
  $72 = ($69|0)<($71|0);
  if (!($72)) {
   break;
  }
  $73 = $0;
  $74 = $i;
  $75 = $2;
  $76 = Math_imul($74, $75)|0;
  $77 = (($73) + ($76<<2)|0);
  $78 = $3;
  $79 = (($77) + ($78<<2)|0);
  $80 = $0;
  $81 = $i;
  $82 = $2;
  $83 = Math_imul($81, $82)|0;
  $84 = (($80) + ($83<<2)|0);
  $85 = $2;
  $86 = (($84) + ($85<<2)|0);
  $87 = $3;
  $88 = (($86) + ($87<<2)|0);
  $89 = ((($88)) + 4|0);
  $90 = $1;
  $91 = $3;
  $92 = (($90) - ($91))|0;
  $93 = (($92) - 1)|0;
  $94 = $93<<2;
  _memcpy(($79|0),($89|0),($94|0))|0;
  $95 = $i;
  $96 = (($95) + 1)|0;
  $i = $96;
 }
 STACKTOP = sp;return;
}
function _dRSetIdentity($R) {
 $R = $R|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $R;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 1811;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 HEAPF32[$3>>2] = 1.0;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = $0;
 $7 = ((($6)) + 8|0);
 HEAPF32[$7>>2] = 0.0;
 $8 = $0;
 $9 = ((($8)) + 12|0);
 HEAPF32[$9>>2] = 0.0;
 $10 = $0;
 $11 = ((($10)) + 16|0);
 HEAPF32[$11>>2] = 0.0;
 $12 = $0;
 $13 = ((($12)) + 20|0);
 HEAPF32[$13>>2] = 1.0;
 $14 = $0;
 $15 = ((($14)) + 24|0);
 HEAPF32[$15>>2] = 0.0;
 $16 = $0;
 $17 = ((($16)) + 28|0);
 HEAPF32[$17>>2] = 0.0;
 $18 = $0;
 $19 = ((($18)) + 32|0);
 HEAPF32[$19>>2] = 0.0;
 $20 = $0;
 $21 = ((($20)) + 36|0);
 HEAPF32[$21>>2] = 0.0;
 $22 = $0;
 $23 = ((($22)) + 40|0);
 HEAPF32[$23>>2] = 1.0;
 $24 = $0;
 $25 = ((($24)) + 44|0);
 HEAPF32[$25>>2] = 0.0;
 STACKTOP = sp;return;
}
function _dRFromAxisAndAngle($R,$ax,$ay,$az,$angle) {
 $R = $R|0;
 $ax = +$ax;
 $ay = +$ay;
 $az = +$az;
 $angle = +$angle;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $q = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $q = sp + 8|0;
 $0 = $R;
 $1 = $ax;
 $2 = $ay;
 $3 = $az;
 $4 = $angle;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  HEAP32[$vararg_buffer>>2] = 1825;
  _dDebug(2,6111,$vararg_buffer);
 }
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 _dQFromAxisAndAngle($q,$7,$8,$9,$10);
 $11 = $0;
 _dQtoR($q,$11);
 STACKTOP = sp;return;
}
function _dQFromAxisAndAngle($q,$ax,$ay,$az,$angle) {
 $q = $q|0;
 $ax = +$ax;
 $ay = +$ay;
 $az = +$az;
 $angle = +$angle;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $l = 0.0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $q;
 $1 = $ax;
 $2 = $ay;
 $3 = $az;
 $4 = $angle;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  HEAP32[$vararg_buffer>>2] = 1844;
  _dDebug(2,6111,$vararg_buffer);
 }
 $7 = $1;
 $8 = $1;
 $9 = $7 * $8;
 $10 = $2;
 $11 = $2;
 $12 = $10 * $11;
 $13 = $9 + $12;
 $14 = $3;
 $15 = $3;
 $16 = $14 * $15;
 $17 = $13 + $16;
 $l = $17;
 $18 = $l;
 $19 = $18 > 0.0;
 if ($19) {
  $20 = $4;
  $21 = $20 * 0.5;
  $4 = $21;
  $22 = $4;
  $23 = $22;
  $24 = (+Math_cos((+$23)));
  $25 = $24;
  $26 = $0;
  HEAPF32[$26>>2] = $25;
  $27 = $4;
  $28 = $27;
  $29 = (+Math_sin((+$28)));
  $30 = $29;
  $31 = $l;
  $32 = $31;
  $33 = (+Math_sqrt((+$32)));
  $34 = 1.0 / $33;
  $35 = $34;
  $36 = $30 * $35;
  $l = $36;
  $37 = $1;
  $38 = $l;
  $39 = $37 * $38;
  $40 = $0;
  $41 = ((($40)) + 4|0);
  HEAPF32[$41>>2] = $39;
  $42 = $2;
  $43 = $l;
  $44 = $42 * $43;
  $45 = $0;
  $46 = ((($45)) + 8|0);
  HEAPF32[$46>>2] = $44;
  $47 = $3;
  $48 = $l;
  $49 = $47 * $48;
  $50 = $0;
  $51 = ((($50)) + 12|0);
  HEAPF32[$51>>2] = $49;
  STACKTOP = sp;return;
 } else {
  $52 = $0;
  HEAPF32[$52>>2] = 1.0;
  $53 = $0;
  $54 = ((($53)) + 4|0);
  HEAPF32[$54>>2] = 0.0;
  $55 = $0;
  $56 = ((($55)) + 8|0);
  HEAPF32[$56>>2] = 0.0;
  $57 = $0;
  $58 = ((($57)) + 12|0);
  HEAPF32[$58>>2] = 0.0;
  STACKTOP = sp;return;
 }
}
function _dQtoR($q,$R) {
 $q = $q|0;
 $R = $R|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0;
 var $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0;
 var $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, $qq1 = 0.0, $qq2 = 0.0, $qq3 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $q;
 $1 = $R;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 1863;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $0;
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = 2.0 * $8;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $qq1 = $13;
 $14 = $0;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = 2.0 * $16;
 $18 = $0;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $qq2 = $21;
 $22 = $0;
 $23 = ((($22)) + 12|0);
 $24 = +HEAPF32[$23>>2];
 $25 = 2.0 * $24;
 $26 = $0;
 $27 = ((($26)) + 12|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $25 * $28;
 $qq3 = $29;
 $30 = $qq2;
 $31 = 1.0 - $30;
 $32 = $qq3;
 $33 = $31 - $32;
 $34 = $1;
 HEAPF32[$34>>2] = $33;
 $35 = $0;
 $36 = ((($35)) + 4|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $0;
 $39 = ((($38)) + 8|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $37 * $40;
 $42 = $0;
 $43 = +HEAPF32[$42>>2];
 $44 = $0;
 $45 = ((($44)) + 12|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $43 * $46;
 $48 = $41 - $47;
 $49 = 2.0 * $48;
 $50 = $1;
 $51 = ((($50)) + 4|0);
 HEAPF32[$51>>2] = $49;
 $52 = $0;
 $53 = ((($52)) + 4|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $0;
 $56 = ((($55)) + 12|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $54 * $57;
 $59 = $0;
 $60 = +HEAPF32[$59>>2];
 $61 = $0;
 $62 = ((($61)) + 8|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $60 * $63;
 $65 = $58 + $64;
 $66 = 2.0 * $65;
 $67 = $1;
 $68 = ((($67)) + 8|0);
 HEAPF32[$68>>2] = $66;
 $69 = $0;
 $70 = ((($69)) + 4|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $0;
 $73 = ((($72)) + 8|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $71 * $74;
 $76 = $0;
 $77 = +HEAPF32[$76>>2];
 $78 = $0;
 $79 = ((($78)) + 12|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $77 * $80;
 $82 = $75 + $81;
 $83 = 2.0 * $82;
 $84 = $1;
 $85 = ((($84)) + 16|0);
 HEAPF32[$85>>2] = $83;
 $86 = $qq1;
 $87 = 1.0 - $86;
 $88 = $qq3;
 $89 = $87 - $88;
 $90 = $1;
 $91 = ((($90)) + 20|0);
 HEAPF32[$91>>2] = $89;
 $92 = $0;
 $93 = ((($92)) + 8|0);
 $94 = +HEAPF32[$93>>2];
 $95 = $0;
 $96 = ((($95)) + 12|0);
 $97 = +HEAPF32[$96>>2];
 $98 = $94 * $97;
 $99 = $0;
 $100 = +HEAPF32[$99>>2];
 $101 = $0;
 $102 = ((($101)) + 4|0);
 $103 = +HEAPF32[$102>>2];
 $104 = $100 * $103;
 $105 = $98 - $104;
 $106 = 2.0 * $105;
 $107 = $1;
 $108 = ((($107)) + 24|0);
 HEAPF32[$108>>2] = $106;
 $109 = $0;
 $110 = ((($109)) + 4|0);
 $111 = +HEAPF32[$110>>2];
 $112 = $0;
 $113 = ((($112)) + 12|0);
 $114 = +HEAPF32[$113>>2];
 $115 = $111 * $114;
 $116 = $0;
 $117 = +HEAPF32[$116>>2];
 $118 = $0;
 $119 = ((($118)) + 8|0);
 $120 = +HEAPF32[$119>>2];
 $121 = $117 * $120;
 $122 = $115 - $121;
 $123 = 2.0 * $122;
 $124 = $1;
 $125 = ((($124)) + 32|0);
 HEAPF32[$125>>2] = $123;
 $126 = $0;
 $127 = ((($126)) + 8|0);
 $128 = +HEAPF32[$127>>2];
 $129 = $0;
 $130 = ((($129)) + 12|0);
 $131 = +HEAPF32[$130>>2];
 $132 = $128 * $131;
 $133 = $0;
 $134 = +HEAPF32[$133>>2];
 $135 = $0;
 $136 = ((($135)) + 4|0);
 $137 = +HEAPF32[$136>>2];
 $138 = $134 * $137;
 $139 = $132 + $138;
 $140 = 2.0 * $139;
 $141 = $1;
 $142 = ((($141)) + 36|0);
 HEAPF32[$142>>2] = $140;
 $143 = $qq1;
 $144 = 1.0 - $143;
 $145 = $qq2;
 $146 = $144 - $145;
 $147 = $1;
 $148 = ((($147)) + 40|0);
 HEAPF32[$148>>2] = $146;
 STACKTOP = sp;return;
}
function _dRFromEulerAngles($R,$phi,$theta,$psi) {
 $R = $R|0;
 $phi = +$phi;
 $theta = +$theta;
 $psi = +$psi;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $cphi = 0.0, $cpsi = 0.0, $ctheta = 0.0;
 var $sphi = 0.0, $spsi = 0.0, $stheta = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $R;
 $1 = $phi;
 $2 = $theta;
 $3 = $psi;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 1869;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = $6;
 $8 = (+Math_sin((+$7)));
 $9 = $8;
 $sphi = $9;
 $10 = $1;
 $11 = $10;
 $12 = (+Math_cos((+$11)));
 $13 = $12;
 $cphi = $13;
 $14 = $2;
 $15 = $14;
 $16 = (+Math_sin((+$15)));
 $17 = $16;
 $stheta = $17;
 $18 = $2;
 $19 = $18;
 $20 = (+Math_cos((+$19)));
 $21 = $20;
 $ctheta = $21;
 $22 = $3;
 $23 = $22;
 $24 = (+Math_sin((+$23)));
 $25 = $24;
 $spsi = $25;
 $26 = $3;
 $27 = $26;
 $28 = (+Math_cos((+$27)));
 $29 = $28;
 $cpsi = $29;
 $30 = $cpsi;
 $31 = $ctheta;
 $32 = $30 * $31;
 $33 = $0;
 HEAPF32[$33>>2] = $32;
 $34 = $spsi;
 $35 = $ctheta;
 $36 = $34 * $35;
 $37 = $0;
 $38 = ((($37)) + 4|0);
 HEAPF32[$38>>2] = $36;
 $39 = $stheta;
 $40 = -$39;
 $41 = $0;
 $42 = ((($41)) + 8|0);
 HEAPF32[$42>>2] = $40;
 $43 = $cpsi;
 $44 = $stheta;
 $45 = $43 * $44;
 $46 = $sphi;
 $47 = $45 * $46;
 $48 = $spsi;
 $49 = $cphi;
 $50 = $48 * $49;
 $51 = $47 - $50;
 $52 = $0;
 $53 = ((($52)) + 16|0);
 HEAPF32[$53>>2] = $51;
 $54 = $spsi;
 $55 = $stheta;
 $56 = $54 * $55;
 $57 = $sphi;
 $58 = $56 * $57;
 $59 = $cpsi;
 $60 = $cphi;
 $61 = $59 * $60;
 $62 = $58 + $61;
 $63 = $0;
 $64 = ((($63)) + 20|0);
 HEAPF32[$64>>2] = $62;
 $65 = $ctheta;
 $66 = $sphi;
 $67 = $65 * $66;
 $68 = $0;
 $69 = ((($68)) + 24|0);
 HEAPF32[$69>>2] = $67;
 $70 = $cpsi;
 $71 = $stheta;
 $72 = $70 * $71;
 $73 = $cphi;
 $74 = $72 * $73;
 $75 = $spsi;
 $76 = $sphi;
 $77 = $75 * $76;
 $78 = $74 + $77;
 $79 = $0;
 $80 = ((($79)) + 32|0);
 HEAPF32[$80>>2] = $78;
 $81 = $spsi;
 $82 = $stheta;
 $83 = $81 * $82;
 $84 = $cphi;
 $85 = $83 * $84;
 $86 = $cpsi;
 $87 = $sphi;
 $88 = $86 * $87;
 $89 = $85 - $88;
 $90 = $0;
 $91 = ((($90)) + 36|0);
 HEAPF32[$91>>2] = $89;
 $92 = $ctheta;
 $93 = $cphi;
 $94 = $92 * $93;
 $95 = $0;
 $96 = ((($95)) + 40|0);
 HEAPF32[$96>>2] = $94;
 STACKTOP = sp;return;
}
function _dRFrom2Axes($R,$ax,$ay,$az,$bx,$by,$bz) {
 $R = $R|0;
 $ax = +$ax;
 $ay = +$ay;
 $az = +$az;
 $bx = +$bx;
 $by = +$by;
 $bz = +$bz;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $k = 0.0, $l = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $R;
 $1 = $ax;
 $2 = $ay;
 $3 = $az;
 $4 = $bx;
 $5 = $by;
 $6 = $bz;
 $7 = $0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  HEAP32[$vararg_buffer>>2] = 1887;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $1;
 $10 = $1;
 $11 = $9 * $10;
 $12 = $2;
 $13 = $2;
 $14 = $12 * $13;
 $15 = $11 + $14;
 $16 = $3;
 $17 = $3;
 $18 = $16 * $17;
 $19 = $15 + $18;
 $20 = $19;
 $21 = (+Math_sqrt((+$20)));
 $22 = $21;
 $l = $22;
 $23 = $l;
 $24 = $23 <= 0.0;
 if ($24) {
  HEAP32[$vararg_buffer1>>2] = 1887;
  _dMessage(2,1899,$vararg_buffer1);
  STACKTOP = sp;return;
 }
 $25 = $l;
 $26 = 1.0 / $25;
 $l = $26;
 $27 = $l;
 $28 = $1;
 $29 = $28 * $27;
 $1 = $29;
 $30 = $l;
 $31 = $2;
 $32 = $31 * $30;
 $2 = $32;
 $33 = $l;
 $34 = $3;
 $35 = $34 * $33;
 $3 = $35;
 $36 = $1;
 $37 = $4;
 $38 = $36 * $37;
 $39 = $2;
 $40 = $5;
 $41 = $39 * $40;
 $42 = $38 + $41;
 $43 = $3;
 $44 = $6;
 $45 = $43 * $44;
 $46 = $42 + $45;
 $k = $46;
 $47 = $k;
 $48 = $1;
 $49 = $47 * $48;
 $50 = $4;
 $51 = $50 - $49;
 $4 = $51;
 $52 = $k;
 $53 = $2;
 $54 = $52 * $53;
 $55 = $5;
 $56 = $55 - $54;
 $5 = $56;
 $57 = $k;
 $58 = $3;
 $59 = $57 * $58;
 $60 = $6;
 $61 = $60 - $59;
 $6 = $61;
 $62 = $4;
 $63 = $4;
 $64 = $62 * $63;
 $65 = $5;
 $66 = $5;
 $67 = $65 * $66;
 $68 = $64 + $67;
 $69 = $6;
 $70 = $6;
 $71 = $69 * $70;
 $72 = $68 + $71;
 $73 = $72;
 $74 = (+Math_sqrt((+$73)));
 $75 = $74;
 $l = $75;
 $76 = $l;
 $77 = $76 <= 0.0;
 if ($77) {
  HEAP32[$vararg_buffer4>>2] = 1887;
  _dMessage(2,1899,$vararg_buffer4);
  STACKTOP = sp;return;
 } else {
  $78 = $l;
  $79 = 1.0 / $78;
  $l = $79;
  $80 = $l;
  $81 = $4;
  $82 = $81 * $80;
  $4 = $82;
  $83 = $l;
  $84 = $5;
  $85 = $84 * $83;
  $5 = $85;
  $86 = $l;
  $87 = $6;
  $88 = $87 * $86;
  $6 = $88;
  $89 = $1;
  $90 = $0;
  HEAPF32[$90>>2] = $89;
  $91 = $2;
  $92 = $0;
  $93 = ((($92)) + 16|0);
  HEAPF32[$93>>2] = $91;
  $94 = $3;
  $95 = $0;
  $96 = ((($95)) + 32|0);
  HEAPF32[$96>>2] = $94;
  $97 = $4;
  $98 = $0;
  $99 = ((($98)) + 4|0);
  HEAPF32[$99>>2] = $97;
  $100 = $5;
  $101 = $0;
  $102 = ((($101)) + 20|0);
  HEAPF32[$102>>2] = $100;
  $103 = $6;
  $104 = $0;
  $105 = ((($104)) + 36|0);
  HEAPF32[$105>>2] = $103;
  $106 = $5;
  $107 = -$106;
  $108 = $3;
  $109 = $107 * $108;
  $110 = $2;
  $111 = $6;
  $112 = $110 * $111;
  $113 = $109 + $112;
  $114 = $0;
  $115 = ((($114)) + 8|0);
  HEAPF32[$115>>2] = $113;
  $116 = $6;
  $117 = -$116;
  $118 = $1;
  $119 = $117 * $118;
  $120 = $3;
  $121 = $4;
  $122 = $120 * $121;
  $123 = $119 + $122;
  $124 = $0;
  $125 = ((($124)) + 24|0);
  HEAPF32[$125>>2] = $123;
  $126 = $4;
  $127 = -$126;
  $128 = $2;
  $129 = $127 * $128;
  $130 = $1;
  $131 = $5;
  $132 = $130 * $131;
  $133 = $129 + $132;
  $134 = $0;
  $135 = ((($134)) + 40|0);
  HEAPF32[$135>>2] = $133;
  STACKTOP = sp;return;
 }
}
function _dQSetIdentity($q) {
 $q = $q|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $q;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 1926;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 HEAPF32[$3>>2] = 1.0;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = $0;
 $7 = ((($6)) + 8|0);
 HEAPF32[$7>>2] = 0.0;
 $8 = $0;
 $9 = ((($8)) + 12|0);
 HEAPF32[$9>>2] = 0.0;
 STACKTOP = sp;return;
}
function _dQMultiply0($qa,$qb,$qc) {
 $qa = $qa|0;
 $qb = $qb|0;
 $qc = $qc|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0;
 var $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $qa;
 $1 = $qb;
 $2 = $qc;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 $or$cond3 = $or$cond & $8;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 1940;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $1;
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = +HEAPF32[$11>>2];
 $13 = $10 * $12;
 $14 = $1;
 $15 = ((($14)) + 4|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $2;
 $18 = ((($17)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 * $19;
 $21 = $13 - $20;
 $22 = $1;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $24 * $27;
 $29 = $21 - $28;
 $30 = $1;
 $31 = ((($30)) + 12|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $2;
 $34 = ((($33)) + 12|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $32 * $35;
 $37 = $29 - $36;
 $38 = $0;
 HEAPF32[$38>>2] = $37;
 $39 = $1;
 $40 = +HEAPF32[$39>>2];
 $41 = $2;
 $42 = ((($41)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $40 * $43;
 $45 = $1;
 $46 = ((($45)) + 4|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $2;
 $49 = +HEAPF32[$48>>2];
 $50 = $47 * $49;
 $51 = $44 + $50;
 $52 = $1;
 $53 = ((($52)) + 8|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $2;
 $56 = ((($55)) + 12|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $54 * $57;
 $59 = $51 + $58;
 $60 = $1;
 $61 = ((($60)) + 12|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $2;
 $64 = ((($63)) + 8|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $62 * $65;
 $67 = $59 - $66;
 $68 = $0;
 $69 = ((($68)) + 4|0);
 HEAPF32[$69>>2] = $67;
 $70 = $1;
 $71 = +HEAPF32[$70>>2];
 $72 = $2;
 $73 = ((($72)) + 8|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $71 * $74;
 $76 = $1;
 $77 = ((($76)) + 8|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $2;
 $80 = +HEAPF32[$79>>2];
 $81 = $78 * $80;
 $82 = $75 + $81;
 $83 = $1;
 $84 = ((($83)) + 12|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $2;
 $87 = ((($86)) + 4|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $85 * $88;
 $90 = $82 + $89;
 $91 = $1;
 $92 = ((($91)) + 4|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $2;
 $95 = ((($94)) + 12|0);
 $96 = +HEAPF32[$95>>2];
 $97 = $93 * $96;
 $98 = $90 - $97;
 $99 = $0;
 $100 = ((($99)) + 8|0);
 HEAPF32[$100>>2] = $98;
 $101 = $1;
 $102 = +HEAPF32[$101>>2];
 $103 = $2;
 $104 = ((($103)) + 12|0);
 $105 = +HEAPF32[$104>>2];
 $106 = $102 * $105;
 $107 = $1;
 $108 = ((($107)) + 12|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $2;
 $111 = +HEAPF32[$110>>2];
 $112 = $109 * $111;
 $113 = $106 + $112;
 $114 = $1;
 $115 = ((($114)) + 4|0);
 $116 = +HEAPF32[$115>>2];
 $117 = $2;
 $118 = ((($117)) + 8|0);
 $119 = +HEAPF32[$118>>2];
 $120 = $116 * $119;
 $121 = $113 + $120;
 $122 = $1;
 $123 = ((($122)) + 8|0);
 $124 = +HEAPF32[$123>>2];
 $125 = $2;
 $126 = ((($125)) + 4|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $124 * $127;
 $129 = $121 - $128;
 $130 = $0;
 $131 = ((($130)) + 12|0);
 HEAPF32[$131>>2] = $129;
 STACKTOP = sp;return;
}
function _dQMultiply1($qa,$qb,$qc) {
 $qa = $qa|0;
 $qb = $qb|0;
 $qc = $qc|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0;
 var $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $qa;
 $1 = $qb;
 $2 = $qc;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 $or$cond3 = $or$cond & $8;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 1952;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $1;
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = +HEAPF32[$11>>2];
 $13 = $10 * $12;
 $14 = $1;
 $15 = ((($14)) + 4|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $2;
 $18 = ((($17)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 * $19;
 $21 = $13 + $20;
 $22 = $1;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $24 * $27;
 $29 = $21 + $28;
 $30 = $1;
 $31 = ((($30)) + 12|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $2;
 $34 = ((($33)) + 12|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $32 * $35;
 $37 = $29 + $36;
 $38 = $0;
 HEAPF32[$38>>2] = $37;
 $39 = $1;
 $40 = +HEAPF32[$39>>2];
 $41 = $2;
 $42 = ((($41)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $40 * $43;
 $45 = $1;
 $46 = ((($45)) + 4|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $2;
 $49 = +HEAPF32[$48>>2];
 $50 = $47 * $49;
 $51 = $44 - $50;
 $52 = $1;
 $53 = ((($52)) + 8|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $2;
 $56 = ((($55)) + 12|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $54 * $57;
 $59 = $51 - $58;
 $60 = $1;
 $61 = ((($60)) + 12|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $2;
 $64 = ((($63)) + 8|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $62 * $65;
 $67 = $59 + $66;
 $68 = $0;
 $69 = ((($68)) + 4|0);
 HEAPF32[$69>>2] = $67;
 $70 = $1;
 $71 = +HEAPF32[$70>>2];
 $72 = $2;
 $73 = ((($72)) + 8|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $71 * $74;
 $76 = $1;
 $77 = ((($76)) + 8|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $2;
 $80 = +HEAPF32[$79>>2];
 $81 = $78 * $80;
 $82 = $75 - $81;
 $83 = $1;
 $84 = ((($83)) + 12|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $2;
 $87 = ((($86)) + 4|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $85 * $88;
 $90 = $82 - $89;
 $91 = $1;
 $92 = ((($91)) + 4|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $2;
 $95 = ((($94)) + 12|0);
 $96 = +HEAPF32[$95>>2];
 $97 = $93 * $96;
 $98 = $90 + $97;
 $99 = $0;
 $100 = ((($99)) + 8|0);
 HEAPF32[$100>>2] = $98;
 $101 = $1;
 $102 = +HEAPF32[$101>>2];
 $103 = $2;
 $104 = ((($103)) + 12|0);
 $105 = +HEAPF32[$104>>2];
 $106 = $102 * $105;
 $107 = $1;
 $108 = ((($107)) + 12|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $2;
 $111 = +HEAPF32[$110>>2];
 $112 = $109 * $111;
 $113 = $106 - $112;
 $114 = $1;
 $115 = ((($114)) + 4|0);
 $116 = +HEAPF32[$115>>2];
 $117 = $2;
 $118 = ((($117)) + 8|0);
 $119 = +HEAPF32[$118>>2];
 $120 = $116 * $119;
 $121 = $113 - $120;
 $122 = $1;
 $123 = ((($122)) + 8|0);
 $124 = +HEAPF32[$123>>2];
 $125 = $2;
 $126 = ((($125)) + 4|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $124 * $127;
 $129 = $121 + $128;
 $130 = $0;
 $131 = ((($130)) + 12|0);
 HEAPF32[$131>>2] = $129;
 STACKTOP = sp;return;
}
function _dQMultiply2($qa,$qb,$qc) {
 $qa = $qa|0;
 $qb = $qb|0;
 $qc = $qc|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0;
 var $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $qa;
 $1 = $qb;
 $2 = $qc;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 $or$cond3 = $or$cond & $8;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 1964;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $1;
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = +HEAPF32[$11>>2];
 $13 = $10 * $12;
 $14 = $1;
 $15 = ((($14)) + 4|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $2;
 $18 = ((($17)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 * $19;
 $21 = $13 + $20;
 $22 = $1;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $24 * $27;
 $29 = $21 + $28;
 $30 = $1;
 $31 = ((($30)) + 12|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $2;
 $34 = ((($33)) + 12|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $32 * $35;
 $37 = $29 + $36;
 $38 = $0;
 HEAPF32[$38>>2] = $37;
 $39 = $1;
 $40 = +HEAPF32[$39>>2];
 $41 = -$40;
 $42 = $2;
 $43 = ((($42)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $41 * $44;
 $46 = $1;
 $47 = ((($46)) + 4|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $2;
 $50 = +HEAPF32[$49>>2];
 $51 = $48 * $50;
 $52 = $45 + $51;
 $53 = $1;
 $54 = ((($53)) + 8|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $2;
 $57 = ((($56)) + 12|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $55 * $58;
 $60 = $52 - $59;
 $61 = $1;
 $62 = ((($61)) + 12|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $2;
 $65 = ((($64)) + 8|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $63 * $66;
 $68 = $60 + $67;
 $69 = $0;
 $70 = ((($69)) + 4|0);
 HEAPF32[$70>>2] = $68;
 $71 = $1;
 $72 = +HEAPF32[$71>>2];
 $73 = -$72;
 $74 = $2;
 $75 = ((($74)) + 8|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $73 * $76;
 $78 = $1;
 $79 = ((($78)) + 8|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $2;
 $82 = +HEAPF32[$81>>2];
 $83 = $80 * $82;
 $84 = $77 + $83;
 $85 = $1;
 $86 = ((($85)) + 12|0);
 $87 = +HEAPF32[$86>>2];
 $88 = $2;
 $89 = ((($88)) + 4|0);
 $90 = +HEAPF32[$89>>2];
 $91 = $87 * $90;
 $92 = $84 - $91;
 $93 = $1;
 $94 = ((($93)) + 4|0);
 $95 = +HEAPF32[$94>>2];
 $96 = $2;
 $97 = ((($96)) + 12|0);
 $98 = +HEAPF32[$97>>2];
 $99 = $95 * $98;
 $100 = $92 + $99;
 $101 = $0;
 $102 = ((($101)) + 8|0);
 HEAPF32[$102>>2] = $100;
 $103 = $1;
 $104 = +HEAPF32[$103>>2];
 $105 = -$104;
 $106 = $2;
 $107 = ((($106)) + 12|0);
 $108 = +HEAPF32[$107>>2];
 $109 = $105 * $108;
 $110 = $1;
 $111 = ((($110)) + 12|0);
 $112 = +HEAPF32[$111>>2];
 $113 = $2;
 $114 = +HEAPF32[$113>>2];
 $115 = $112 * $114;
 $116 = $109 + $115;
 $117 = $1;
 $118 = ((($117)) + 4|0);
 $119 = +HEAPF32[$118>>2];
 $120 = $2;
 $121 = ((($120)) + 8|0);
 $122 = +HEAPF32[$121>>2];
 $123 = $119 * $122;
 $124 = $116 - $123;
 $125 = $1;
 $126 = ((($125)) + 8|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $2;
 $129 = ((($128)) + 4|0);
 $130 = +HEAPF32[$129>>2];
 $131 = $127 * $130;
 $132 = $124 + $131;
 $133 = $0;
 $134 = ((($133)) + 12|0);
 HEAPF32[$134>>2] = $132;
 STACKTOP = sp;return;
}
function _dQMultiply3($qa,$qb,$qc) {
 $qa = $qa|0;
 $qb = $qb|0;
 $qc = $qc|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0;
 var $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $qa;
 $1 = $qb;
 $2 = $qc;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 $or$cond3 = $or$cond & $8;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 1976;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $1;
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = +HEAPF32[$11>>2];
 $13 = $10 * $12;
 $14 = $1;
 $15 = ((($14)) + 4|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $2;
 $18 = ((($17)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 * $19;
 $21 = $13 - $20;
 $22 = $1;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $24 * $27;
 $29 = $21 - $28;
 $30 = $1;
 $31 = ((($30)) + 12|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $2;
 $34 = ((($33)) + 12|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $32 * $35;
 $37 = $29 - $36;
 $38 = $0;
 HEAPF32[$38>>2] = $37;
 $39 = $1;
 $40 = +HEAPF32[$39>>2];
 $41 = -$40;
 $42 = $2;
 $43 = ((($42)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $41 * $44;
 $46 = $1;
 $47 = ((($46)) + 4|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $2;
 $50 = +HEAPF32[$49>>2];
 $51 = $48 * $50;
 $52 = $45 - $51;
 $53 = $1;
 $54 = ((($53)) + 8|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $2;
 $57 = ((($56)) + 12|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $55 * $58;
 $60 = $52 + $59;
 $61 = $1;
 $62 = ((($61)) + 12|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $2;
 $65 = ((($64)) + 8|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $63 * $66;
 $68 = $60 - $67;
 $69 = $0;
 $70 = ((($69)) + 4|0);
 HEAPF32[$70>>2] = $68;
 $71 = $1;
 $72 = +HEAPF32[$71>>2];
 $73 = -$72;
 $74 = $2;
 $75 = ((($74)) + 8|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $73 * $76;
 $78 = $1;
 $79 = ((($78)) + 8|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $2;
 $82 = +HEAPF32[$81>>2];
 $83 = $80 * $82;
 $84 = $77 - $83;
 $85 = $1;
 $86 = ((($85)) + 12|0);
 $87 = +HEAPF32[$86>>2];
 $88 = $2;
 $89 = ((($88)) + 4|0);
 $90 = +HEAPF32[$89>>2];
 $91 = $87 * $90;
 $92 = $84 + $91;
 $93 = $1;
 $94 = ((($93)) + 4|0);
 $95 = +HEAPF32[$94>>2];
 $96 = $2;
 $97 = ((($96)) + 12|0);
 $98 = +HEAPF32[$97>>2];
 $99 = $95 * $98;
 $100 = $92 - $99;
 $101 = $0;
 $102 = ((($101)) + 8|0);
 HEAPF32[$102>>2] = $100;
 $103 = $1;
 $104 = +HEAPF32[$103>>2];
 $105 = -$104;
 $106 = $2;
 $107 = ((($106)) + 12|0);
 $108 = +HEAPF32[$107>>2];
 $109 = $105 * $108;
 $110 = $1;
 $111 = ((($110)) + 12|0);
 $112 = +HEAPF32[$111>>2];
 $113 = $2;
 $114 = +HEAPF32[$113>>2];
 $115 = $112 * $114;
 $116 = $109 - $115;
 $117 = $1;
 $118 = ((($117)) + 4|0);
 $119 = +HEAPF32[$118>>2];
 $120 = $2;
 $121 = ((($120)) + 8|0);
 $122 = +HEAPF32[$121>>2];
 $123 = $119 * $122;
 $124 = $116 + $123;
 $125 = $1;
 $126 = ((($125)) + 8|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $2;
 $129 = ((($128)) + 4|0);
 $130 = +HEAPF32[$129>>2];
 $131 = $127 * $130;
 $132 = $124 - $131;
 $133 = $0;
 $134 = ((($133)) + 12|0);
 HEAPF32[$134>>2] = $132;
 STACKTOP = sp;return;
}
function _dRtoQ($R,$q) {
 $R = $R|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, $s = 0.0, $tr = 0.0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $R;
 $1 = $q;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 1988;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $0;
 $7 = +HEAPF32[$6>>2];
 $8 = $0;
 $9 = ((($8)) + 20|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $7 + $10;
 $12 = $0;
 $13 = ((($12)) + 40|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 + $14;
 $tr = $15;
 $16 = $tr;
 $17 = $16 >= 0.0;
 if ($17) {
  $18 = $tr;
  $19 = $18 + 1.0;
  $20 = $19;
  $21 = (+Math_sqrt((+$20)));
  $22 = $21;
  $s = $22;
  $23 = $s;
  $24 = 0.5 * $23;
  $25 = $1;
  HEAPF32[$25>>2] = $24;
  $26 = $s;
  $27 = 1.0 / $26;
  $28 = 0.5 * $27;
  $s = $28;
  $29 = $0;
  $30 = ((($29)) + 36|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $0;
  $33 = ((($32)) + 24|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $31 - $34;
  $36 = $s;
  $37 = $35 * $36;
  $38 = $1;
  $39 = ((($38)) + 4|0);
  HEAPF32[$39>>2] = $37;
  $40 = $0;
  $41 = ((($40)) + 8|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $0;
  $44 = ((($43)) + 32|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $42 - $45;
  $47 = $s;
  $48 = $46 * $47;
  $49 = $1;
  $50 = ((($49)) + 8|0);
  HEAPF32[$50>>2] = $48;
  $51 = $0;
  $52 = ((($51)) + 16|0);
  $53 = +HEAPF32[$52>>2];
  $54 = $0;
  $55 = ((($54)) + 4|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $53 - $56;
  $58 = $s;
  $59 = $57 * $58;
  $60 = $1;
  $61 = ((($60)) + 12|0);
  HEAPF32[$61>>2] = $59;
  STACKTOP = sp;return;
 }
 $62 = $0;
 $63 = ((($62)) + 20|0);
 $64 = +HEAPF32[$63>>2];
 $65 = $0;
 $66 = +HEAPF32[$65>>2];
 $67 = $64 > $66;
 $68 = $0;
 $69 = ((($68)) + 40|0);
 $70 = +HEAPF32[$69>>2];
 $71 = $0;
 if ($67) {
  $72 = ((($71)) + 20|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $70 > $73;
  if (!($74)) {
   $130 = $0;
   $131 = ((($130)) + 20|0);
   $132 = +HEAPF32[$131>>2];
   $133 = $0;
   $134 = ((($133)) + 40|0);
   $135 = +HEAPF32[$134>>2];
   $136 = $0;
   $137 = +HEAPF32[$136>>2];
   $138 = $135 + $137;
   $139 = $132 - $138;
   $140 = $139 + 1.0;
   $141 = $140;
   $142 = (+Math_sqrt((+$141)));
   $143 = $142;
   $s = $143;
   $144 = $s;
   $145 = 0.5 * $144;
   $146 = $1;
   $147 = ((($146)) + 8|0);
   HEAPF32[$147>>2] = $145;
   $148 = $s;
   $149 = 1.0 / $148;
   $150 = 0.5 * $149;
   $s = $150;
   $151 = $0;
   $152 = ((($151)) + 24|0);
   $153 = +HEAPF32[$152>>2];
   $154 = $0;
   $155 = ((($154)) + 36|0);
   $156 = +HEAPF32[$155>>2];
   $157 = $153 + $156;
   $158 = $s;
   $159 = $157 * $158;
   $160 = $1;
   $161 = ((($160)) + 12|0);
   HEAPF32[$161>>2] = $159;
   $162 = $0;
   $163 = ((($162)) + 4|0);
   $164 = +HEAPF32[$163>>2];
   $165 = $0;
   $166 = ((($165)) + 16|0);
   $167 = +HEAPF32[$166>>2];
   $168 = $164 + $167;
   $169 = $s;
   $170 = $168 * $169;
   $171 = $1;
   $172 = ((($171)) + 4|0);
   HEAPF32[$172>>2] = $170;
   $173 = $0;
   $174 = ((($173)) + 8|0);
   $175 = +HEAPF32[$174>>2];
   $176 = $0;
   $177 = ((($176)) + 32|0);
   $178 = +HEAPF32[$177>>2];
   $179 = $175 - $178;
   $180 = $s;
   $181 = $179 * $180;
   $182 = $1;
   HEAPF32[$182>>2] = $181;
   STACKTOP = sp;return;
  }
 } else {
  $75 = +HEAPF32[$71>>2];
  $76 = $70 > $75;
  if (!($76)) {
   $77 = $0;
   $78 = +HEAPF32[$77>>2];
   $79 = $0;
   $80 = ((($79)) + 20|0);
   $81 = +HEAPF32[$80>>2];
   $82 = $0;
   $83 = ((($82)) + 40|0);
   $84 = +HEAPF32[$83>>2];
   $85 = $81 + $84;
   $86 = $78 - $85;
   $87 = $86 + 1.0;
   $88 = $87;
   $89 = (+Math_sqrt((+$88)));
   $90 = $89;
   $s = $90;
   $91 = $s;
   $92 = 0.5 * $91;
   $93 = $1;
   $94 = ((($93)) + 4|0);
   HEAPF32[$94>>2] = $92;
   $95 = $s;
   $96 = 1.0 / $95;
   $97 = 0.5 * $96;
   $s = $97;
   $98 = $0;
   $99 = ((($98)) + 4|0);
   $100 = +HEAPF32[$99>>2];
   $101 = $0;
   $102 = ((($101)) + 16|0);
   $103 = +HEAPF32[$102>>2];
   $104 = $100 + $103;
   $105 = $s;
   $106 = $104 * $105;
   $107 = $1;
   $108 = ((($107)) + 8|0);
   HEAPF32[$108>>2] = $106;
   $109 = $0;
   $110 = ((($109)) + 32|0);
   $111 = +HEAPF32[$110>>2];
   $112 = $0;
   $113 = ((($112)) + 8|0);
   $114 = +HEAPF32[$113>>2];
   $115 = $111 + $114;
   $116 = $s;
   $117 = $115 * $116;
   $118 = $1;
   $119 = ((($118)) + 12|0);
   HEAPF32[$119>>2] = $117;
   $120 = $0;
   $121 = ((($120)) + 36|0);
   $122 = +HEAPF32[$121>>2];
   $123 = $0;
   $124 = ((($123)) + 24|0);
   $125 = +HEAPF32[$124>>2];
   $126 = $122 - $125;
   $127 = $s;
   $128 = $126 * $127;
   $129 = $1;
   HEAPF32[$129>>2] = $128;
   STACKTOP = sp;return;
  }
 }
 $183 = $0;
 $184 = ((($183)) + 40|0);
 $185 = +HEAPF32[$184>>2];
 $186 = $0;
 $187 = +HEAPF32[$186>>2];
 $188 = $0;
 $189 = ((($188)) + 20|0);
 $190 = +HEAPF32[$189>>2];
 $191 = $187 + $190;
 $192 = $185 - $191;
 $193 = $192 + 1.0;
 $194 = $193;
 $195 = (+Math_sqrt((+$194)));
 $196 = $195;
 $s = $196;
 $197 = $s;
 $198 = 0.5 * $197;
 $199 = $1;
 $200 = ((($199)) + 12|0);
 HEAPF32[$200>>2] = $198;
 $201 = $s;
 $202 = 1.0 / $201;
 $203 = 0.5 * $202;
 $s = $203;
 $204 = $0;
 $205 = ((($204)) + 32|0);
 $206 = +HEAPF32[$205>>2];
 $207 = $0;
 $208 = ((($207)) + 8|0);
 $209 = +HEAPF32[$208>>2];
 $210 = $206 + $209;
 $211 = $s;
 $212 = $210 * $211;
 $213 = $1;
 $214 = ((($213)) + 4|0);
 HEAPF32[$214>>2] = $212;
 $215 = $0;
 $216 = ((($215)) + 24|0);
 $217 = +HEAPF32[$216>>2];
 $218 = $0;
 $219 = ((($218)) + 36|0);
 $220 = +HEAPF32[$219>>2];
 $221 = $217 + $220;
 $222 = $s;
 $223 = $221 * $222;
 $224 = $1;
 $225 = ((($224)) + 8|0);
 HEAPF32[$225>>2] = $223;
 $226 = $0;
 $227 = ((($226)) + 16|0);
 $228 = +HEAPF32[$227>>2];
 $229 = $0;
 $230 = ((($229)) + 4|0);
 $231 = +HEAPF32[$230>>2];
 $232 = $228 - $231;
 $233 = $s;
 $234 = $232 * $233;
 $235 = $1;
 HEAPF32[$235>>2] = $234;
 STACKTOP = sp;return;
}
function _dWtoDQ($w,$q,$dq) {
 $w = $w|0;
 $q = $q|0;
 $dq = $dq|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0;
 var $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $q;
 $2 = $dq;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 $or$cond3 = $or$cond & $8;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 1994;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $0;
 $10 = +HEAPF32[$9>>2];
 $11 = -$10;
 $12 = $1;
 $13 = ((($12)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 * $14;
 $16 = $0;
 $17 = ((($16)) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $18 * $21;
 $23 = $15 - $22;
 $24 = $0;
 $25 = ((($24)) + 8|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = ((($27)) + 12|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $26 * $29;
 $31 = $23 - $30;
 $32 = 0.5 * $31;
 $33 = $2;
 HEAPF32[$33>>2] = $32;
 $34 = $0;
 $35 = +HEAPF32[$34>>2];
 $36 = $1;
 $37 = +HEAPF32[$36>>2];
 $38 = $35 * $37;
 $39 = $0;
 $40 = ((($39)) + 4|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $1;
 $43 = ((($42)) + 12|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $41 * $44;
 $46 = $38 + $45;
 $47 = $0;
 $48 = ((($47)) + 8|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $1;
 $51 = ((($50)) + 8|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $49 * $52;
 $54 = $46 - $53;
 $55 = 0.5 * $54;
 $56 = $2;
 $57 = ((($56)) + 4|0);
 HEAPF32[$57>>2] = $55;
 $58 = $0;
 $59 = +HEAPF32[$58>>2];
 $60 = -$59;
 $61 = $1;
 $62 = ((($61)) + 12|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $60 * $63;
 $65 = $0;
 $66 = ((($65)) + 4|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $1;
 $69 = +HEAPF32[$68>>2];
 $70 = $67 * $69;
 $71 = $64 + $70;
 $72 = $0;
 $73 = ((($72)) + 8|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $1;
 $76 = ((($75)) + 4|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $74 * $77;
 $79 = $71 + $78;
 $80 = 0.5 * $79;
 $81 = $2;
 $82 = ((($81)) + 8|0);
 HEAPF32[$82>>2] = $80;
 $83 = $0;
 $84 = +HEAPF32[$83>>2];
 $85 = $1;
 $86 = ((($85)) + 8|0);
 $87 = +HEAPF32[$86>>2];
 $88 = $84 * $87;
 $89 = $0;
 $90 = ((($89)) + 4|0);
 $91 = +HEAPF32[$90>>2];
 $92 = $1;
 $93 = ((($92)) + 4|0);
 $94 = +HEAPF32[$93>>2];
 $95 = $91 * $94;
 $96 = $88 - $95;
 $97 = $0;
 $98 = ((($97)) + 8|0);
 $99 = +HEAPF32[$98>>2];
 $100 = $1;
 $101 = +HEAPF32[$100>>2];
 $102 = $99 * $101;
 $103 = $96 + $102;
 $104 = 0.5 * $103;
 $105 = $2;
 $106 = ((($105)) + 12|0);
 HEAPF32[$106>>2] = $104;
 STACKTOP = sp;return;
}
function _dMassSetZero($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $m;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2001;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 HEAPF32[$3>>2] = 0.0;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 _dSetZero($5,4);
 $6 = $0;
 $7 = ((($6)) + 20|0);
 _dSetZero($7,12);
 STACKTOP = sp;return;
}
function _dMassSetParameters($m,$themass,$cgx,$cgy,$cgz,$I11,$I22,$I33,$I12,$I13,$I23) {
 $m = $m|0;
 $themass = +$themass;
 $cgx = +$cgx;
 $cgy = +$cgy;
 $cgz = +$cgz;
 $I11 = +$I11;
 $I22 = +$I22;
 $I33 = +$I33;
 $I12 = +$I12;
 $I13 = +$I13;
 $I23 = +$I23;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $m;
 $1 = $themass;
 $2 = $cgx;
 $3 = $cgy;
 $4 = $cgz;
 $5 = $I11;
 $6 = $I22;
 $7 = $I33;
 $8 = $I12;
 $9 = $I13;
 $10 = $I23;
 $11 = $0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  HEAP32[$vararg_buffer>>2] = 2014;
  _dDebug(2,6111,$vararg_buffer);
 }
 $13 = $0;
 _dMassSetZero($13);
 $14 = $1;
 $15 = $0;
 HEAPF32[$15>>2] = $14;
 $16 = $2;
 $17 = $0;
 $18 = ((($17)) + 4|0);
 HEAPF32[$18>>2] = $16;
 $19 = $3;
 $20 = $0;
 $21 = ((($20)) + 4|0);
 $22 = ((($21)) + 4|0);
 HEAPF32[$22>>2] = $19;
 $23 = $4;
 $24 = $0;
 $25 = ((($24)) + 4|0);
 $26 = ((($25)) + 8|0);
 HEAPF32[$26>>2] = $23;
 $27 = $5;
 $28 = $0;
 $29 = ((($28)) + 20|0);
 HEAPF32[$29>>2] = $27;
 $30 = $6;
 $31 = $0;
 $32 = ((($31)) + 20|0);
 $33 = ((($32)) + 20|0);
 HEAPF32[$33>>2] = $30;
 $34 = $7;
 $35 = $0;
 $36 = ((($35)) + 20|0);
 $37 = ((($36)) + 40|0);
 HEAPF32[$37>>2] = $34;
 $38 = $8;
 $39 = $0;
 $40 = ((($39)) + 20|0);
 $41 = ((($40)) + 4|0);
 HEAPF32[$41>>2] = $38;
 $42 = $9;
 $43 = $0;
 $44 = ((($43)) + 20|0);
 $45 = ((($44)) + 8|0);
 HEAPF32[$45>>2] = $42;
 $46 = $10;
 $47 = $0;
 $48 = ((($47)) + 20|0);
 $49 = ((($48)) + 24|0);
 HEAPF32[$49>>2] = $46;
 $50 = $8;
 $51 = $0;
 $52 = ((($51)) + 20|0);
 $53 = ((($52)) + 16|0);
 HEAPF32[$53>>2] = $50;
 $54 = $9;
 $55 = $0;
 $56 = ((($55)) + 20|0);
 $57 = ((($56)) + 32|0);
 HEAPF32[$57>>2] = $54;
 $58 = $10;
 $59 = $0;
 $60 = ((($59)) + 20|0);
 $61 = ((($60)) + 36|0);
 HEAPF32[$61>>2] = $58;
 $62 = $0;
 (__ZL9checkMassP5dMass($62)|0);
 STACKTOP = sp;return;
}
function _dMassSetSphere($m,$density,$radius) {
 $m = $m|0;
 $density = +$density;
 $radius = +$radius;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $II = 0.0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $m;
 $1 = $density;
 $2 = $radius;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  HEAP32[$vararg_buffer>>2] = 2033;
  _dDebug(2,6111,$vararg_buffer);
 }
 $5 = $0;
 _dMassSetZero($5);
 $6 = $2;
 $7 = $6;
 $8 = 4.1887903296220665 * $7;
 $9 = $2;
 $10 = $9;
 $11 = $8 * $10;
 $12 = $2;
 $13 = $12;
 $14 = $11 * $13;
 $15 = $1;
 $16 = $15;
 $17 = $14 * $16;
 $18 = $17;
 $19 = $0;
 HEAPF32[$19>>2] = $18;
 $20 = $0;
 $21 = +HEAPF32[$20>>2];
 $22 = 0.40000000596046448 * $21;
 $23 = $2;
 $24 = $22 * $23;
 $25 = $2;
 $26 = $24 * $25;
 $II = $26;
 $27 = $II;
 $28 = $0;
 $29 = ((($28)) + 20|0);
 HEAPF32[$29>>2] = $27;
 $30 = $II;
 $31 = $0;
 $32 = ((($31)) + 20|0);
 $33 = ((($32)) + 20|0);
 HEAPF32[$33>>2] = $30;
 $34 = $II;
 $35 = $0;
 $36 = ((($35)) + 20|0);
 $37 = ((($36)) + 40|0);
 HEAPF32[$37>>2] = $34;
 $38 = $0;
 (__ZL9checkMassP5dMass($38)|0);
 STACKTOP = sp;return;
}
function _dMassSetCappedCylinder($m,$density,$direction,$a,$b) {
 $m = $m|0;
 $density = +$density;
 $direction = $direction|0;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $Ia = 0.0, $Ib = 0.0, $M1 = 0.0, $M2 = 0.0;
 var $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $m;
 $1 = $density;
 $2 = $direction;
 $3 = $a;
 $4 = $b;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  HEAP32[$vararg_buffer>>2] = 2048;
  _dDebug(2,6111,$vararg_buffer);
 }
 $7 = $2;
 $8 = ($7|0)>=(1);
 $9 = $2;
 $10 = ($9|0)<=(3);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer2>>2] = 2048;
  _dDebug(2,2071,$vararg_buffer2);
 }
 $11 = $0;
 _dMassSetZero($11);
 $12 = $3;
 $13 = $12;
 $14 = 3.1415926535897931 * $13;
 $15 = $3;
 $16 = $15;
 $17 = $14 * $16;
 $18 = $4;
 $19 = $18;
 $20 = $17 * $19;
 $21 = $1;
 $22 = $21;
 $23 = $20 * $22;
 $24 = $23;
 $M1 = $24;
 $25 = $3;
 $26 = $25;
 $27 = 4.1887903296220665 * $26;
 $28 = $3;
 $29 = $28;
 $30 = $27 * $29;
 $31 = $3;
 $32 = $31;
 $33 = $30 * $32;
 $34 = $1;
 $35 = $34;
 $36 = $33 * $35;
 $37 = $36;
 $M2 = $37;
 $38 = $M1;
 $39 = $M2;
 $40 = $38 + $39;
 $41 = $0;
 HEAPF32[$41>>2] = $40;
 $42 = $M1;
 $43 = $3;
 $44 = 0.25 * $43;
 $45 = $3;
 $46 = $44 * $45;
 $47 = $4;
 $48 = 0.083333335816860198 * $47;
 $49 = $4;
 $50 = $48 * $49;
 $51 = $46 + $50;
 $52 = $42 * $51;
 $53 = $M2;
 $54 = $3;
 $55 = 0.40000000596046448 * $54;
 $56 = $3;
 $57 = $55 * $56;
 $58 = $4;
 $59 = 0.5 * $58;
 $60 = $4;
 $61 = $59 * $60;
 $62 = $57 + $61;
 $63 = $53 * $62;
 $64 = $52 + $63;
 $Ia = $64;
 $65 = $M1;
 $66 = $65 * 0.5;
 $67 = $M2;
 $68 = $67 * 0.40000000596046448;
 $69 = $66 + $68;
 $70 = $3;
 $71 = $69 * $70;
 $72 = $3;
 $73 = $71 * $72;
 $Ib = $73;
 $74 = $Ia;
 $75 = $0;
 $76 = ((($75)) + 20|0);
 HEAPF32[$76>>2] = $74;
 $77 = $Ia;
 $78 = $0;
 $79 = ((($78)) + 20|0);
 $80 = ((($79)) + 20|0);
 HEAPF32[$80>>2] = $77;
 $81 = $Ia;
 $82 = $0;
 $83 = ((($82)) + 20|0);
 $84 = ((($83)) + 40|0);
 HEAPF32[$84>>2] = $81;
 $85 = $Ib;
 $86 = $2;
 $87 = (($86) - 1)|0;
 $88 = $87<<2;
 $89 = $2;
 $90 = (($89) - 1)|0;
 $91 = (($88) + ($90))|0;
 $92 = $0;
 $93 = ((($92)) + 20|0);
 $94 = (($93) + ($91<<2)|0);
 HEAPF32[$94>>2] = $85;
 $95 = $0;
 (__ZL9checkMassP5dMass($95)|0);
 STACKTOP = sp;return;
}
function _dMassSetBox($m,$density,$lx,$ly,$lz) {
 $m = $m|0;
 $density = +$density;
 $lx = +$lx;
 $ly = +$ly;
 $lz = +$lz;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $M = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $m;
 $1 = $density;
 $2 = $lx;
 $3 = $ly;
 $4 = $lz;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  HEAP32[$vararg_buffer>>2] = 2100;
  _dDebug(2,6111,$vararg_buffer);
 }
 $7 = $0;
 _dMassSetZero($7);
 $8 = $2;
 $9 = $3;
 $10 = $8 * $9;
 $11 = $4;
 $12 = $10 * $11;
 $13 = $1;
 $14 = $12 * $13;
 $M = $14;
 $15 = $M;
 $16 = $0;
 HEAPF32[$16>>2] = $15;
 $17 = $M;
 $18 = $17 / 12.0;
 $19 = $3;
 $20 = $3;
 $21 = $19 * $20;
 $22 = $4;
 $23 = $4;
 $24 = $22 * $23;
 $25 = $21 + $24;
 $26 = $18 * $25;
 $27 = $0;
 $28 = ((($27)) + 20|0);
 HEAPF32[$28>>2] = $26;
 $29 = $M;
 $30 = $29 / 12.0;
 $31 = $2;
 $32 = $2;
 $33 = $31 * $32;
 $34 = $4;
 $35 = $4;
 $36 = $34 * $35;
 $37 = $33 + $36;
 $38 = $30 * $37;
 $39 = $0;
 $40 = ((($39)) + 20|0);
 $41 = ((($40)) + 20|0);
 HEAPF32[$41>>2] = $38;
 $42 = $M;
 $43 = $42 / 12.0;
 $44 = $2;
 $45 = $2;
 $46 = $44 * $45;
 $47 = $3;
 $48 = $3;
 $49 = $47 * $48;
 $50 = $46 + $49;
 $51 = $43 * $50;
 $52 = $0;
 $53 = ((($52)) + 20|0);
 $54 = ((($53)) + 40|0);
 HEAPF32[$54>>2] = $51;
 $55 = $0;
 (__ZL9checkMassP5dMass($55)|0);
 STACKTOP = sp;return;
}
function _dMassAdjust($m,$newmass) {
 $m = $m|0;
 $newmass = +$newmass;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $i = 0, $j = 0, $scale = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $m;
 $1 = $newmass;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 2112;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $1;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 / $6;
 $scale = $7;
 $8 = $1;
 $9 = $0;
 HEAPF32[$9>>2] = $8;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(3);
  if (!($11)) {
   break;
  }
  $j = 0;
  while(1) {
   $12 = $j;
   $13 = ($12|0)<(3);
   if (!($13)) {
    break;
   }
   $14 = $scale;
   $15 = $i;
   $16 = $15<<2;
   $17 = $j;
   $18 = (($16) + ($17))|0;
   $19 = $0;
   $20 = ((($19)) + 20|0);
   $21 = (($20) + ($18<<2)|0);
   $22 = +HEAPF32[$21>>2];
   $23 = $22 * $14;
   HEAPF32[$21>>2] = $23;
   $24 = $j;
   $25 = (($24) + 1)|0;
   $j = $25;
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $0;
 (__ZL9checkMassP5dMass($28)|0);
 STACKTOP = sp;return;
}
function _dMassTranslate($m,$x,$y,$z) {
 $m = $m|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0;
 var $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $ahat = 0, $chat = 0, $i = 0, $j = 0, $t1 = 0, $t2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ahat = sp + 160|0;
 $chat = sp + 112|0;
 $t1 = sp + 64|0;
 $t2 = sp + 16|0;
 $a = sp + 4|0;
 $0 = $m;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 2124;
  _dDebug(2,6111,$vararg_buffer);
 }
 _dSetZero($chat,12);
 $6 = $0;
 $7 = ((($6)) + 4|0);
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = -$9;
 $11 = ((($chat)) + 4|0);
 HEAPF32[$11>>2] = $10;
 $12 = $0;
 $13 = ((($12)) + 4|0);
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = ((($chat)) + 8|0);
 HEAPF32[$16>>2] = $15;
 $17 = $0;
 $18 = ((($17)) + 4|0);
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = ((($chat)) + 16|0);
 HEAPF32[$21>>2] = $20;
 $22 = $0;
 $23 = ((($22)) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = -$24;
 $26 = ((($chat)) + 24|0);
 HEAPF32[$26>>2] = $25;
 $27 = $0;
 $28 = ((($27)) + 4|0);
 $29 = ((($28)) + 4|0);
 $30 = +HEAPF32[$29>>2];
 $31 = -$30;
 $32 = ((($chat)) + 32|0);
 HEAPF32[$32>>2] = $31;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = +HEAPF32[$34>>2];
 $36 = ((($chat)) + 36|0);
 HEAPF32[$36>>2] = $35;
 $37 = $1;
 $38 = $0;
 $39 = ((($38)) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $37 + $40;
 HEAPF32[$a>>2] = $41;
 $42 = $2;
 $43 = $0;
 $44 = ((($43)) + 4|0);
 $45 = ((($44)) + 4|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $42 + $46;
 $48 = ((($a)) + 4|0);
 HEAPF32[$48>>2] = $47;
 $49 = $3;
 $50 = $0;
 $51 = ((($50)) + 4|0);
 $52 = ((($51)) + 8|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $49 + $53;
 $55 = ((($a)) + 8|0);
 HEAPF32[$55>>2] = $54;
 _dSetZero($ahat,12);
 $56 = ((($a)) + 8|0);
 $57 = +HEAPF32[$56>>2];
 $58 = -$57;
 $59 = ((($ahat)) + 4|0);
 HEAPF32[$59>>2] = $58;
 $60 = ((($a)) + 4|0);
 $61 = +HEAPF32[$60>>2];
 $62 = ((($ahat)) + 8|0);
 HEAPF32[$62>>2] = $61;
 $63 = ((($a)) + 8|0);
 $64 = +HEAPF32[$63>>2];
 $65 = ((($ahat)) + 16|0);
 HEAPF32[$65>>2] = $64;
 $66 = +HEAPF32[$a>>2];
 $67 = -$66;
 $68 = ((($ahat)) + 24|0);
 HEAPF32[$68>>2] = $67;
 $69 = ((($a)) + 4|0);
 $70 = +HEAPF32[$69>>2];
 $71 = -$70;
 $72 = ((($ahat)) + 32|0);
 HEAPF32[$72>>2] = $71;
 $73 = +HEAPF32[$a>>2];
 $74 = ((($ahat)) + 36|0);
 HEAPF32[$74>>2] = $73;
 _dMULTIPLY0_333($t1,$ahat,$ahat);
 _dMULTIPLY0_333($t2,$chat,$chat);
 $i = 0;
 while(1) {
  $75 = $i;
  $76 = ($75|0)<(3);
  if (!($76)) {
   break;
  }
  $j = 0;
  while(1) {
   $77 = $j;
   $78 = ($77|0)<(3);
   if (!($78)) {
    break;
   }
   $79 = $0;
   $80 = +HEAPF32[$79>>2];
   $81 = $i;
   $82 = $81<<2;
   $83 = $j;
   $84 = (($82) + ($83))|0;
   $85 = (($t2) + ($84<<2)|0);
   $86 = +HEAPF32[$85>>2];
   $87 = $i;
   $88 = $87<<2;
   $89 = $j;
   $90 = (($88) + ($89))|0;
   $91 = (($t1) + ($90<<2)|0);
   $92 = +HEAPF32[$91>>2];
   $93 = $86 - $92;
   $94 = $80 * $93;
   $95 = $i;
   $96 = $95<<2;
   $97 = $j;
   $98 = (($96) + ($97))|0;
   $99 = $0;
   $100 = ((($99)) + 20|0);
   $101 = (($100) + ($98<<2)|0);
   $102 = +HEAPF32[$101>>2];
   $103 = $102 + $94;
   HEAPF32[$101>>2] = $103;
   $104 = $j;
   $105 = (($104) + 1)|0;
   $j = $105;
  }
  $106 = $i;
  $107 = (($106) + 1)|0;
  $i = $107;
 }
 $108 = $0;
 $109 = ((($108)) + 20|0);
 $110 = ((($109)) + 4|0);
 $111 = +HEAPF32[$110>>2];
 $112 = $0;
 $113 = ((($112)) + 20|0);
 $114 = ((($113)) + 16|0);
 HEAPF32[$114>>2] = $111;
 $115 = $0;
 $116 = ((($115)) + 20|0);
 $117 = ((($116)) + 8|0);
 $118 = +HEAPF32[$117>>2];
 $119 = $0;
 $120 = ((($119)) + 20|0);
 $121 = ((($120)) + 32|0);
 HEAPF32[$121>>2] = $118;
 $122 = $0;
 $123 = ((($122)) + 20|0);
 $124 = ((($123)) + 24|0);
 $125 = +HEAPF32[$124>>2];
 $126 = $0;
 $127 = ((($126)) + 20|0);
 $128 = ((($127)) + 36|0);
 HEAPF32[$128>>2] = $125;
 $129 = $1;
 $130 = $0;
 $131 = ((($130)) + 4|0);
 $132 = +HEAPF32[$131>>2];
 $133 = $132 + $129;
 HEAPF32[$131>>2] = $133;
 $134 = $2;
 $135 = $0;
 $136 = ((($135)) + 4|0);
 $137 = ((($136)) + 4|0);
 $138 = +HEAPF32[$137>>2];
 $139 = $138 + $134;
 HEAPF32[$137>>2] = $139;
 $140 = $3;
 $141 = $0;
 $142 = ((($141)) + 4|0);
 $143 = ((($142)) + 8|0);
 $144 = +HEAPF32[$143>>2];
 $145 = $144 + $140;
 HEAPF32[$143>>2] = $145;
 $146 = $0;
 (__ZL9checkMassP5dMass($146)|0);
 STACKTOP = sp;return;
}
function _dMassRotate($m,$R) {
 $m = $m|0;
 $R = $R|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t1 = 0, $t2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $t1 = sp + 16|0;
 $t2 = sp + 4|0;
 $0 = $m;
 $1 = $R;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 2139;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $0;
 $5 = ((($4)) + 20|0);
 $6 = $1;
 _dMULTIPLY2_333($t1,$5,$6);
 $7 = $0;
 $8 = ((($7)) + 20|0);
 $9 = $1;
 _dMULTIPLY0_333($8,$9,$t1);
 $10 = $0;
 $11 = ((($10)) + 20|0);
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $0;
 $15 = ((($14)) + 20|0);
 $16 = ((($15)) + 16|0);
 HEAPF32[$16>>2] = $13;
 $17 = $0;
 $18 = ((($17)) + 20|0);
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $0;
 $22 = ((($21)) + 20|0);
 $23 = ((($22)) + 32|0);
 HEAPF32[$23>>2] = $20;
 $24 = $0;
 $25 = ((($24)) + 20|0);
 $26 = ((($25)) + 24|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $0;
 $29 = ((($28)) + 20|0);
 $30 = ((($29)) + 36|0);
 HEAPF32[$30>>2] = $27;
 $31 = $1;
 $32 = $0;
 $33 = ((($32)) + 4|0);
 _dMULTIPLY0_331($t2,$31,$33);
 $34 = +HEAPF32[$t2>>2];
 $35 = $0;
 $36 = ((($35)) + 4|0);
 HEAPF32[$36>>2] = $34;
 $37 = ((($t2)) + 4|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $0;
 $40 = ((($39)) + 4|0);
 $41 = ((($40)) + 4|0);
 HEAPF32[$41>>2] = $38;
 $42 = ((($t2)) + 8|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $0;
 $45 = ((($44)) + 4|0);
 $46 = ((($45)) + 8|0);
 HEAPF32[$46>>2] = $43;
 $47 = $0;
 (__ZL9checkMassP5dMass($47)|0);
 STACKTOP = sp;return;
}
function _dMassAdd($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $denom = 0.0;
 var $i = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 2151;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $0;
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = +HEAPF32[$8>>2];
 $10 = $7 + $9;
 $11 = 1.0 / $10;
 $denom = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<(3);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $0;
  $16 = ((($15)) + 4|0);
  $17 = (($16) + ($14<<2)|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $0;
  $20 = +HEAPF32[$19>>2];
  $21 = $18 * $20;
  $22 = $i;
  $23 = $1;
  $24 = ((($23)) + 4|0);
  $25 = (($24) + ($22<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $1;
  $28 = +HEAPF32[$27>>2];
  $29 = $26 * $28;
  $30 = $21 + $29;
  $31 = $denom;
  $32 = $30 * $31;
  $33 = $i;
  $34 = $0;
  $35 = ((($34)) + 4|0);
  $36 = (($35) + ($33<<2)|0);
  HEAPF32[$36>>2] = $32;
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 $39 = $1;
 $40 = +HEAPF32[$39>>2];
 $41 = $0;
 $42 = +HEAPF32[$41>>2];
 $43 = $42 + $40;
 HEAPF32[$41>>2] = $43;
 $i = 0;
 while(1) {
  $44 = $i;
  $45 = ($44|0)<(12);
  if (!($45)) {
   break;
  }
  $46 = $i;
  $47 = $1;
  $48 = ((($47)) + 20|0);
  $49 = (($48) + ($46<<2)|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $i;
  $52 = $0;
  $53 = ((($52)) + 20|0);
  $54 = (($53) + ($51<<2)|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $55 + $50;
  HEAPF32[$54>>2] = $56;
  $57 = $i;
  $58 = (($57) + 1)|0;
  $i = $58;
 }
 STACKTOP = sp;return;
}
function __ZL9checkMassP5dMass($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $I2 = 0, $chat = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $I2 = sp + 72|0;
 $chat = sp + 24|0;
 $1 = $m;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $4 = $3 <= 0.0;
 if ($4) {
  HEAP32[$vararg_buffer>>2] = 2185;
  _dMessage(2,2160,$vararg_buffer);
  $0 = 0;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 $5 = $1;
 $6 = ((($5)) + 20|0);
 $7 = (_dIsPositiveDefinite($6,3)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  HEAP32[$vararg_buffer1>>2] = 2185;
  _dMessage(2,2470,$vararg_buffer1);
  $0 = 0;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 _dSetZero($chat,12);
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = -$12;
 $14 = ((($chat)) + 4|0);
 HEAPF32[$14>>2] = $13;
 $15 = $1;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = ((($chat)) + 8|0);
 HEAPF32[$19>>2] = $18;
 $20 = $1;
 $21 = ((($20)) + 4|0);
 $22 = ((($21)) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = ((($chat)) + 16|0);
 HEAPF32[$24>>2] = $23;
 $25 = $1;
 $26 = ((($25)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = -$27;
 $29 = ((($chat)) + 24|0);
 HEAPF32[$29>>2] = $28;
 $30 = $1;
 $31 = ((($30)) + 4|0);
 $32 = ((($31)) + 4|0);
 $33 = +HEAPF32[$32>>2];
 $34 = -$33;
 $35 = ((($chat)) + 32|0);
 HEAPF32[$35>>2] = $34;
 $36 = $1;
 $37 = ((($36)) + 4|0);
 $38 = +HEAPF32[$37>>2];
 $39 = ((($chat)) + 36|0);
 HEAPF32[$39>>2] = $38;
 _dMULTIPLY0_333($I2,$chat,$chat);
 $i = 0;
 while(1) {
  $40 = $i;
  $41 = ($40|0)<(12);
  if (!($41)) {
   break;
  }
  $42 = $i;
  $43 = $1;
  $44 = ((($43)) + 20|0);
  $45 = (($44) + ($42<<2)|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $1;
  $48 = +HEAPF32[$47>>2];
  $49 = $i;
  $50 = (($I2) + ($49<<2)|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $48 * $51;
  $53 = $46 + $52;
  $54 = $i;
  $55 = (($I2) + ($54<<2)|0);
  HEAPF32[$55>>2] = $53;
  $56 = $i;
  $57 = (($56) + 1)|0;
  $i = $57;
 }
 $58 = (_dIsPositiveDefinite($I2,3)|0);
 $59 = ($58|0)!=(0);
 if ($59) {
  $0 = 1;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 } else {
  HEAP32[$vararg_buffer4>>2] = 2185;
  _dMessage(2,2195,$vararg_buffer4);
  $0 = 0;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 return (0)|0;
}
function _dMULTIPLY0_333($A,$B,$C) {
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $A;
 $1 = $B;
 $2 = $C;
 $3 = $1;
 $4 = $2;
 $5 = (+_dDOT14($3,$4));
 $6 = $0;
 HEAPF32[$6>>2] = $5;
 $7 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = (+_dDOT14($7,$9));
 $11 = $0;
 $12 = ((($11)) + 4|0);
 HEAPF32[$12>>2] = $10;
 $13 = $1;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = (+_dDOT14($13,$15));
 $17 = $0;
 $18 = ((($17)) + 8|0);
 HEAPF32[$18>>2] = $16;
 $19 = $1;
 $20 = ((($19)) + 16|0);
 $21 = $2;
 $22 = (+_dDOT14($20,$21));
 $23 = $0;
 $24 = ((($23)) + 16|0);
 HEAPF32[$24>>2] = $22;
 $25 = $1;
 $26 = ((($25)) + 16|0);
 $27 = $2;
 $28 = ((($27)) + 4|0);
 $29 = (+_dDOT14($26,$28));
 $30 = $0;
 $31 = ((($30)) + 20|0);
 HEAPF32[$31>>2] = $29;
 $32 = $1;
 $33 = ((($32)) + 16|0);
 $34 = $2;
 $35 = ((($34)) + 8|0);
 $36 = (+_dDOT14($33,$35));
 $37 = $0;
 $38 = ((($37)) + 24|0);
 HEAPF32[$38>>2] = $36;
 $39 = $1;
 $40 = ((($39)) + 32|0);
 $41 = $2;
 $42 = (+_dDOT14($40,$41));
 $43 = $0;
 $44 = ((($43)) + 32|0);
 HEAPF32[$44>>2] = $42;
 $45 = $1;
 $46 = ((($45)) + 32|0);
 $47 = $2;
 $48 = ((($47)) + 4|0);
 $49 = (+_dDOT14($46,$48));
 $50 = $0;
 $51 = ((($50)) + 36|0);
 HEAPF32[$51>>2] = $49;
 $52 = $1;
 $53 = ((($52)) + 32|0);
 $54 = $2;
 $55 = ((($54)) + 8|0);
 $56 = (+_dDOT14($53,$55));
 $57 = $0;
 $58 = ((($57)) + 40|0);
 HEAPF32[$58>>2] = $56;
 STACKTOP = sp;return;
}
function _dMULTIPLY2_333($A,$B,$C) {
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $A;
 $1 = $B;
 $2 = $C;
 $3 = $1;
 $4 = $2;
 $5 = (+_dDOT($3,$4));
 $6 = $0;
 HEAPF32[$6>>2] = $5;
 $7 = $1;
 $8 = $2;
 $9 = ((($8)) + 16|0);
 $10 = (+_dDOT($7,$9));
 $11 = $0;
 $12 = ((($11)) + 4|0);
 HEAPF32[$12>>2] = $10;
 $13 = $1;
 $14 = $2;
 $15 = ((($14)) + 32|0);
 $16 = (+_dDOT($13,$15));
 $17 = $0;
 $18 = ((($17)) + 8|0);
 HEAPF32[$18>>2] = $16;
 $19 = $1;
 $20 = ((($19)) + 16|0);
 $21 = $2;
 $22 = (+_dDOT($20,$21));
 $23 = $0;
 $24 = ((($23)) + 16|0);
 HEAPF32[$24>>2] = $22;
 $25 = $1;
 $26 = ((($25)) + 16|0);
 $27 = $2;
 $28 = ((($27)) + 16|0);
 $29 = (+_dDOT($26,$28));
 $30 = $0;
 $31 = ((($30)) + 20|0);
 HEAPF32[$31>>2] = $29;
 $32 = $1;
 $33 = ((($32)) + 16|0);
 $34 = $2;
 $35 = ((($34)) + 32|0);
 $36 = (+_dDOT($33,$35));
 $37 = $0;
 $38 = ((($37)) + 24|0);
 HEAPF32[$38>>2] = $36;
 $39 = $1;
 $40 = ((($39)) + 32|0);
 $41 = $2;
 $42 = (+_dDOT($40,$41));
 $43 = $0;
 $44 = ((($43)) + 32|0);
 HEAPF32[$44>>2] = $42;
 $45 = $1;
 $46 = ((($45)) + 32|0);
 $47 = $2;
 $48 = ((($47)) + 16|0);
 $49 = (+_dDOT($46,$48));
 $50 = $0;
 $51 = ((($50)) + 36|0);
 HEAPF32[$51>>2] = $49;
 $52 = $1;
 $53 = ((($52)) + 32|0);
 $54 = $2;
 $55 = ((($54)) + 32|0);
 $56 = (+_dDOT($53,$55));
 $57 = $0;
 $58 = ((($57)) + 40|0);
 HEAPF32[$58>>2] = $56;
 STACKTOP = sp;return;
}
function _dMULTIPLY0_331($A,$B,$C) {
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $A;
 $1 = $B;
 $2 = $C;
 $3 = $1;
 $4 = $2;
 $5 = (+_dDOT($3,$4));
 $6 = $0;
 HEAPF32[$6>>2] = $5;
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = $2;
 $10 = (+_dDOT($8,$9));
 $11 = $0;
 $12 = ((($11)) + 4|0);
 HEAPF32[$12>>2] = $10;
 $13 = $1;
 $14 = ((($13)) + 32|0);
 $15 = $2;
 $16 = (+_dDOT($14,$15));
 $17 = $0;
 $18 = ((($17)) + 8|0);
 HEAPF32[$18>>2] = $16;
 STACKTOP = sp;return;
}
function _dDOT14($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 16|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 32|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 STACKTOP = sp;return (+$22);
}
function _dBodyCreate($w) {
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $b = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  HEAP32[$vararg_buffer>>2] = 2252;
  _dDebug(2,6111,$vararg_buffer);
 }
 $5 = (__ZN5dBasenwEj(308)|0);
 __THREW__ = 0;
 invoke_vi(59,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $b = $5;
  $8 = $b;
  $9 = $0;
  __ZL10initObjectP7dObjectP7dxWorld($8,$9);
  $10 = $b;
  $11 = ((($10)) + 20|0);
  HEAP32[$11>>2] = 0;
  $12 = $b;
  $13 = ((($12)) + 24|0);
  HEAP32[$13>>2] = 0;
  $14 = $b;
  $15 = ((($14)) + 28|0);
  _dMassSetParameters($15,1.0,0.0,0.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0);
  $16 = $b;
  $17 = ((($16)) + 96|0);
  _dSetZero($17,12);
  $18 = $b;
  $19 = ((($18)) + 96|0);
  HEAPF32[$19>>2] = 1.0;
  $20 = $b;
  $21 = ((($20)) + 96|0);
  $22 = ((($21)) + 20|0);
  HEAPF32[$22>>2] = 1.0;
  $23 = $b;
  $24 = ((($23)) + 96|0);
  $25 = ((($24)) + 40|0);
  HEAPF32[$25>>2] = 1.0;
  $26 = $b;
  $27 = ((($26)) + 144|0);
  HEAPF32[$27>>2] = 1.0;
  $28 = $b;
  $29 = ((($28)) + 148|0);
  _dSetZero($29,4);
  $30 = $b;
  $31 = ((($30)) + 164|0);
  _dSetZero($31,4);
  $32 = $b;
  $33 = ((($32)) + 164|0);
  HEAPF32[$33>>2] = 1.0;
  $34 = $b;
  $35 = ((($34)) + 180|0);
  _dRSetIdentity($35);
  $36 = $b;
  $37 = ((($36)) + 228|0);
  _dSetZero($37,4);
  $38 = $b;
  $39 = ((($38)) + 244|0);
  _dSetZero($39,4);
  $40 = $b;
  $41 = ((($40)) + 260|0);
  _dSetZero($41,4);
  $42 = $b;
  $43 = ((($42)) + 276|0);
  _dSetZero($43,4);
  $44 = $b;
  $45 = ((($44)) + 292|0);
  _dSetZero($45,4);
  $46 = $b;
  $47 = $0;
  __ZL15addObjectToListP7dObjectPS0_($46,$47);
  $48 = $0;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$49>>2] = $51;
  $52 = $b;
  STACKTOP = sp;return ($52|0);
 }
 $53 = ___cxa_find_matching_catch()|0;
 $54 = tempRet0;
 $1 = $53;
 $2 = $54;
 __THREW__ = 0;
 invoke_vii(60,($5|0),308);
 $55 = __THREW__; __THREW__ = 0;
 $56 = $55&1;
 if ($56) {
  $59 = ___cxa_find_matching_catch(0|0)|0;
  $60 = tempRet0;
  ___clang_call_terminate($59);
  // unreachable;
 } else {
  $57 = $1;
  $58 = $2;
  ___resumeException($57|0);
  // unreachable;
 }
 return (0)|0;
}
function _dBodyDestroy($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $next = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2264;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $n = $5;
 while(1) {
  $6 = $n;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $n;
  $9 = $n;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 28|0);
  $12 = ($8|0)==($11|0);
  $13 = $12&1;
  $14 = $n;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 28|0);
  $17 = (($16) + (($13*12)|0)|0);
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = 0;
  $19 = $n;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $next = $21;
  $22 = $n;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = 0;
  $24 = $n;
  $25 = HEAP32[$24>>2]|0;
  __ZL39removeJointReferencesFromAttachedBodiesP7dxJoint($25);
  $26 = $next;
  $n = $26;
 }
 $27 = $0;
 __ZL20removeObjectFromListP7dObject($27);
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + -1)|0;
 HEAP32[$30>>2] = $32;
 $33 = $0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  STACKTOP = sp;return;
 }
 __ZN5dBasedlEPvj($33,308);
 STACKTOP = sp;return;
}
function _dBodySetPosition($b,$x,$y,$z) {
 $b = $b|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 2277;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 148|0);
 HEAPF32[$8>>2] = $6;
 $9 = $2;
 $10 = $0;
 $11 = ((($10)) + 148|0);
 $12 = ((($11)) + 4|0);
 HEAPF32[$12>>2] = $9;
 $13 = $3;
 $14 = $0;
 $15 = ((($14)) + 148|0);
 $16 = ((($15)) + 8|0);
 HEAPF32[$16>>2] = $13;
 STACKTOP = sp;return;
}
function _dBodySetRotation($b,$R) {
 $b = $b|0;
 $R = $R|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $q = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $q = sp + 8|0;
 $0 = $b;
 $1 = $R;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 2294;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 _dRtoQ($6,$q);
 _dNormalize4($q);
 $7 = +HEAPF32[$q>>2];
 $8 = $0;
 $9 = ((($8)) + 164|0);
 HEAPF32[$9>>2] = $7;
 $10 = ((($q)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $0;
 $13 = ((($12)) + 164|0);
 $14 = ((($13)) + 4|0);
 HEAPF32[$14>>2] = $11;
 $15 = ((($q)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $0;
 $18 = ((($17)) + 164|0);
 $19 = ((($18)) + 8|0);
 HEAPF32[$19>>2] = $16;
 $20 = ((($q)) + 12|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $0;
 $23 = ((($22)) + 164|0);
 $24 = ((($23)) + 12|0);
 HEAPF32[$24>>2] = $21;
 $25 = $0;
 $26 = ((($25)) + 164|0);
 $27 = $0;
 $28 = ((($27)) + 180|0);
 _dQtoR($26,$28);
 STACKTOP = sp;return;
}
function _dBodySetQuaternion($b,$q) {
 $b = $b|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $q;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 2311;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = +HEAPF32[$6>>2];
 $8 = $0;
 $9 = ((($8)) + 164|0);
 HEAPF32[$9>>2] = $7;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $0;
 $14 = ((($13)) + 164|0);
 $15 = ((($14)) + 4|0);
 HEAPF32[$15>>2] = $12;
 $16 = $1;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $0;
 $20 = ((($19)) + 164|0);
 $21 = ((($20)) + 8|0);
 HEAPF32[$21>>2] = $18;
 $22 = $1;
 $23 = ((($22)) + 12|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $0;
 $26 = ((($25)) + 164|0);
 $27 = ((($26)) + 12|0);
 HEAPF32[$27>>2] = $24;
 $28 = $0;
 $29 = ((($28)) + 164|0);
 _dNormalize4($29);
 $30 = $0;
 $31 = ((($30)) + 164|0);
 $32 = $0;
 $33 = ((($32)) + 180|0);
 _dQtoR($31,$33);
 STACKTOP = sp;return;
}
function _dBodySetLinearVel($b,$x,$y,$z) {
 $b = $b|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 2330;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 228|0);
 HEAPF32[$8>>2] = $6;
 $9 = $2;
 $10 = $0;
 $11 = ((($10)) + 228|0);
 $12 = ((($11)) + 4|0);
 HEAPF32[$12>>2] = $9;
 $13 = $3;
 $14 = $0;
 $15 = ((($14)) + 228|0);
 $16 = ((($15)) + 8|0);
 HEAPF32[$16>>2] = $13;
 STACKTOP = sp;return;
}
function _dBodySetAngularVel($b,$x,$y,$z) {
 $b = $b|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 2348;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 244|0);
 HEAPF32[$8>>2] = $6;
 $9 = $2;
 $10 = $0;
 $11 = ((($10)) + 244|0);
 $12 = ((($11)) + 4|0);
 HEAPF32[$12>>2] = $9;
 $13 = $3;
 $14 = $0;
 $15 = ((($14)) + 244|0);
 $16 = ((($15)) + 8|0);
 HEAPF32[$16>>2] = $13;
 STACKTOP = sp;return;
}
function _dBodyGetPosition($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2367;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 148|0);
 STACKTOP = sp;return ($4|0);
}
function _dBodyGetRotation($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2384;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 180|0);
 STACKTOP = sp;return ($4|0);
}
function _dBodyGetQuaternion($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2401;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 164|0);
 STACKTOP = sp;return ($4|0);
}
function _dBodyGetLinearVel($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2420;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 228|0);
 STACKTOP = sp;return ($4|0);
}
function _dBodyGetAngularVel($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2438;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 244|0);
 STACKTOP = sp;return ($4|0);
}
function _dBodySetMass($b,$mass) {
 $b = $b|0;
 $mass = $mass|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $mass;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 2457;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $0;
 $7 = ((($6)) + 28|0);
 $8 = $1;
 dest=$7; src=$8; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = ((($10)) + 20|0);
 $12 = $0;
 $13 = ((($12)) + 96|0);
 $14 = (_dInvertPDMatrix($11,$13,3)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $18 = $0;
  $19 = ((($18)) + 28|0);
  $20 = +HEAPF32[$19>>2];
  $21 = 1.0 / $20;
  $22 = $0;
  $23 = ((($22)) + 144|0);
  HEAPF32[$23>>2] = $21;
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer2>>2] = 2457;
 _dMessage(2,2470,$vararg_buffer2);
 $16 = $0;
 $17 = ((($16)) + 96|0);
 _dRSetIdentity($17);
 $18 = $0;
 $19 = ((($18)) + 28|0);
 $20 = +HEAPF32[$19>>2];
 $21 = 1.0 / $20;
 $22 = $0;
 $23 = ((($22)) + 144|0);
 HEAPF32[$23>>2] = $21;
 STACKTOP = sp;return;
}
function _dBodyGetMass($b,$mass) {
 $b = $b|0;
 $mass = $mass|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $mass;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 2512;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 28|0);
 dest=$6; src=$8; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _dBodyAddForce($b,$fx,$fy,$fz) {
 $b = $b|0;
 $fx = +$fx;
 $fy = +$fy;
 $fz = +$fz;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $fx;
 $2 = $fy;
 $3 = $fz;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 2525;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 260|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9 + $6;
 HEAPF32[$8>>2] = $10;
 $11 = $2;
 $12 = $0;
 $13 = ((($12)) + 260|0);
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 + $11;
 HEAPF32[$14>>2] = $16;
 $17 = $3;
 $18 = $0;
 $19 = ((($18)) + 260|0);
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $21 + $17;
 HEAPF32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function _dBodyAddTorque($b,$fx,$fy,$fz) {
 $b = $b|0;
 $fx = +$fx;
 $fy = +$fy;
 $fz = +$fz;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $fx;
 $2 = $fy;
 $3 = $fz;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 2539;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 276|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9 + $6;
 HEAPF32[$8>>2] = $10;
 $11 = $2;
 $12 = $0;
 $13 = ((($12)) + 276|0);
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 + $11;
 HEAPF32[$14>>2] = $16;
 $17 = $3;
 $18 = $0;
 $19 = ((($18)) + 276|0);
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $21 + $17;
 HEAPF32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function _dBodyAddRelForce($b,$fx,$fy,$fz) {
 $b = $b|0;
 $fx = +$fx;
 $fy = +$fy;
 $fz = +$fz;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $t1 = 0, $t2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $t1 = sp + 24|0;
 $t2 = sp + 8|0;
 $0 = $b;
 $1 = $fx;
 $2 = $fy;
 $3 = $fz;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 2554;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 HEAPF32[$t1>>2] = $6;
 $7 = $2;
 $8 = ((($t1)) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $3;
 $10 = ((($t1)) + 8|0);
 HEAPF32[$10>>2] = $9;
 $11 = ((($t1)) + 12|0);
 HEAPF32[$11>>2] = 0.0;
 $12 = $0;
 $13 = ((($12)) + 180|0);
 _dMULTIPLY0_331($t2,$13,$t1);
 $14 = +HEAPF32[$t2>>2];
 $15 = $0;
 $16 = ((($15)) + 260|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 + $14;
 HEAPF32[$16>>2] = $18;
 $19 = ((($t2)) + 4|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $0;
 $22 = ((($21)) + 260|0);
 $23 = ((($22)) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24 + $20;
 HEAPF32[$23>>2] = $25;
 $26 = ((($t2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $0;
 $29 = ((($28)) + 260|0);
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $31 + $27;
 HEAPF32[$30>>2] = $32;
 STACKTOP = sp;return;
}
function _dBodyAddRelTorque($b,$fx,$fy,$fz) {
 $b = $b|0;
 $fx = +$fx;
 $fy = +$fy;
 $fz = +$fz;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $t1 = 0, $t2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $t1 = sp + 24|0;
 $t2 = sp + 8|0;
 $0 = $b;
 $1 = $fx;
 $2 = $fy;
 $3 = $fz;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 2571;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 HEAPF32[$t1>>2] = $6;
 $7 = $2;
 $8 = ((($t1)) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $3;
 $10 = ((($t1)) + 8|0);
 HEAPF32[$10>>2] = $9;
 $11 = ((($t1)) + 12|0);
 HEAPF32[$11>>2] = 0.0;
 $12 = $0;
 $13 = ((($12)) + 180|0);
 _dMULTIPLY0_331($t2,$13,$t1);
 $14 = +HEAPF32[$t2>>2];
 $15 = $0;
 $16 = ((($15)) + 276|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 + $14;
 HEAPF32[$16>>2] = $18;
 $19 = ((($t2)) + 4|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $0;
 $22 = ((($21)) + 276|0);
 $23 = ((($22)) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24 + $20;
 HEAPF32[$23>>2] = $25;
 $26 = ((($t2)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $0;
 $29 = ((($28)) + 276|0);
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $31 + $27;
 HEAPF32[$30>>2] = $32;
 STACKTOP = sp;return;
}
function _dBodyAddForceAtPos($b,$fx,$fy,$fz,$px,$py,$pz) {
 $b = $b|0;
 $fx = +$fx;
 $fy = +$fy;
 $fz = +$fz;
 $px = +$px;
 $py = +$py;
 $pz = +$pz;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $f = 0, $q = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $f = sp + 24|0;
 $q = sp + 8|0;
 $0 = $b;
 $1 = $fx;
 $2 = $fy;
 $3 = $fz;
 $4 = $px;
 $5 = $py;
 $6 = $pz;
 $7 = $0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  HEAP32[$vararg_buffer>>2] = 2589;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $1;
 $10 = $0;
 $11 = ((($10)) + 260|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 + $9;
 HEAPF32[$11>>2] = $13;
 $14 = $2;
 $15 = $0;
 $16 = ((($15)) + 260|0);
 $17 = ((($16)) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 + $14;
 HEAPF32[$17>>2] = $19;
 $20 = $3;
 $21 = $0;
 $22 = ((($21)) + 260|0);
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24 + $20;
 HEAPF32[$23>>2] = $25;
 $26 = $1;
 HEAPF32[$f>>2] = $26;
 $27 = $2;
 $28 = ((($f)) + 4|0);
 HEAPF32[$28>>2] = $27;
 $29 = $3;
 $30 = ((($f)) + 8|0);
 HEAPF32[$30>>2] = $29;
 $31 = $4;
 $32 = $0;
 $33 = ((($32)) + 148|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $31 - $34;
 HEAPF32[$q>>2] = $35;
 $36 = $5;
 $37 = $0;
 $38 = ((($37)) + 148|0);
 $39 = ((($38)) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $36 - $40;
 $42 = ((($q)) + 4|0);
 HEAPF32[$42>>2] = $41;
 $43 = $6;
 $44 = $0;
 $45 = ((($44)) + 148|0);
 $46 = ((($45)) + 8|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $43 - $47;
 $49 = ((($q)) + 8|0);
 HEAPF32[$49>>2] = $48;
 $50 = ((($q)) + 4|0);
 $51 = +HEAPF32[$50>>2];
 $52 = ((($f)) + 8|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $51 * $53;
 $55 = ((($q)) + 8|0);
 $56 = +HEAPF32[$55>>2];
 $57 = ((($f)) + 4|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $56 * $58;
 $60 = $54 - $59;
 $61 = $0;
 $62 = ((($61)) + 276|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $63 + $60;
 HEAPF32[$62>>2] = $64;
 $65 = ((($q)) + 8|0);
 $66 = +HEAPF32[$65>>2];
 $67 = +HEAPF32[$f>>2];
 $68 = $66 * $67;
 $69 = +HEAPF32[$q>>2];
 $70 = ((($f)) + 8|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $69 * $71;
 $73 = $68 - $72;
 $74 = $0;
 $75 = ((($74)) + 276|0);
 $76 = ((($75)) + 4|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $77 + $73;
 HEAPF32[$76>>2] = $78;
 $79 = +HEAPF32[$q>>2];
 $80 = ((($f)) + 4|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $79 * $81;
 $83 = ((($q)) + 4|0);
 $84 = +HEAPF32[$83>>2];
 $85 = +HEAPF32[$f>>2];
 $86 = $84 * $85;
 $87 = $82 - $86;
 $88 = $0;
 $89 = ((($88)) + 276|0);
 $90 = ((($89)) + 8|0);
 $91 = +HEAPF32[$90>>2];
 $92 = $91 + $87;
 HEAPF32[$90>>2] = $92;
 STACKTOP = sp;return;
}
function _dBodyAddForceAtRelPos($b,$fx,$fy,$fz,$px,$py,$pz) {
 $b = $b|0;
 $fx = +$fx;
 $fy = +$fy;
 $fz = +$fz;
 $px = +$px;
 $py = +$py;
 $pz = +$pz;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $9 = 0.0, $f = 0, $p = 0, $prel = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $prel = sp + 40|0;
 $f = sp + 24|0;
 $p = sp + 8|0;
 $0 = $b;
 $1 = $fx;
 $2 = $fy;
 $3 = $fz;
 $4 = $px;
 $5 = $py;
 $6 = $pz;
 $7 = $0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  HEAP32[$vararg_buffer>>2] = 2608;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $1;
 HEAPF32[$f>>2] = $9;
 $10 = $2;
 $11 = ((($f)) + 4|0);
 HEAPF32[$11>>2] = $10;
 $12 = $3;
 $13 = ((($f)) + 8|0);
 HEAPF32[$13>>2] = $12;
 $14 = ((($f)) + 12|0);
 HEAPF32[$14>>2] = 0.0;
 $15 = $4;
 HEAPF32[$prel>>2] = $15;
 $16 = $5;
 $17 = ((($prel)) + 4|0);
 HEAPF32[$17>>2] = $16;
 $18 = $6;
 $19 = ((($prel)) + 8|0);
 HEAPF32[$19>>2] = $18;
 $20 = ((($prel)) + 12|0);
 HEAPF32[$20>>2] = 0.0;
 $21 = $0;
 $22 = ((($21)) + 180|0);
 _dMULTIPLY0_331($p,$22,$prel);
 $23 = +HEAPF32[$f>>2];
 $24 = $0;
 $25 = ((($24)) + 260|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $26 + $23;
 HEAPF32[$25>>2] = $27;
 $28 = ((($f)) + 4|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $0;
 $31 = ((($30)) + 260|0);
 $32 = ((($31)) + 4|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $33 + $29;
 HEAPF32[$32>>2] = $34;
 $35 = ((($f)) + 8|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $0;
 $38 = ((($37)) + 260|0);
 $39 = ((($38)) + 8|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $40 + $36;
 HEAPF32[$39>>2] = $41;
 $42 = ((($p)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = ((($f)) + 8|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $43 * $45;
 $47 = ((($p)) + 8|0);
 $48 = +HEAPF32[$47>>2];
 $49 = ((($f)) + 4|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $48 * $50;
 $52 = $46 - $51;
 $53 = $0;
 $54 = ((($53)) + 276|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $55 + $52;
 HEAPF32[$54>>2] = $56;
 $57 = ((($p)) + 8|0);
 $58 = +HEAPF32[$57>>2];
 $59 = +HEAPF32[$f>>2];
 $60 = $58 * $59;
 $61 = +HEAPF32[$p>>2];
 $62 = ((($f)) + 8|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $61 * $63;
 $65 = $60 - $64;
 $66 = $0;
 $67 = ((($66)) + 276|0);
 $68 = ((($67)) + 4|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $69 + $65;
 HEAPF32[$68>>2] = $70;
 $71 = +HEAPF32[$p>>2];
 $72 = ((($f)) + 4|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $71 * $73;
 $75 = ((($p)) + 4|0);
 $76 = +HEAPF32[$75>>2];
 $77 = +HEAPF32[$f>>2];
 $78 = $76 * $77;
 $79 = $74 - $78;
 $80 = $0;
 $81 = ((($80)) + 276|0);
 $82 = ((($81)) + 8|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $83 + $79;
 HEAPF32[$82>>2] = $84;
 STACKTOP = sp;return;
}
function _dBodyAddRelForceAtPos($b,$fx,$fy,$fz,$px,$py,$pz) {
 $b = $b|0;
 $fx = +$fx;
 $fy = +$fy;
 $fz = +$fz;
 $px = +$px;
 $py = +$py;
 $pz = +$pz;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $f = 0, $frel = 0;
 var $q = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $frel = sp + 40|0;
 $f = sp + 24|0;
 $q = sp + 8|0;
 $0 = $b;
 $1 = $fx;
 $2 = $fy;
 $3 = $fz;
 $4 = $px;
 $5 = $py;
 $6 = $pz;
 $7 = $0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  HEAP32[$vararg_buffer>>2] = 2630;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $1;
 HEAPF32[$frel>>2] = $9;
 $10 = $2;
 $11 = ((($frel)) + 4|0);
 HEAPF32[$11>>2] = $10;
 $12 = $3;
 $13 = ((($frel)) + 8|0);
 HEAPF32[$13>>2] = $12;
 $14 = ((($frel)) + 12|0);
 HEAPF32[$14>>2] = 0.0;
 $15 = $0;
 $16 = ((($15)) + 180|0);
 _dMULTIPLY0_331($f,$16,$frel);
 $17 = +HEAPF32[$f>>2];
 $18 = $0;
 $19 = ((($18)) + 260|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $20 + $17;
 HEAPF32[$19>>2] = $21;
 $22 = ((($f)) + 4|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $0;
 $25 = ((($24)) + 260|0);
 $26 = ((($25)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $27 + $23;
 HEAPF32[$26>>2] = $28;
 $29 = ((($f)) + 8|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $0;
 $32 = ((($31)) + 260|0);
 $33 = ((($32)) + 8|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $34 + $30;
 HEAPF32[$33>>2] = $35;
 $36 = $4;
 $37 = $0;
 $38 = ((($37)) + 148|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $36 - $39;
 HEAPF32[$q>>2] = $40;
 $41 = $5;
 $42 = $0;
 $43 = ((($42)) + 148|0);
 $44 = ((($43)) + 4|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $41 - $45;
 $47 = ((($q)) + 4|0);
 HEAPF32[$47>>2] = $46;
 $48 = $6;
 $49 = $0;
 $50 = ((($49)) + 148|0);
 $51 = ((($50)) + 8|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $48 - $52;
 $54 = ((($q)) + 8|0);
 HEAPF32[$54>>2] = $53;
 $55 = ((($q)) + 4|0);
 $56 = +HEAPF32[$55>>2];
 $57 = ((($f)) + 8|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $56 * $58;
 $60 = ((($q)) + 8|0);
 $61 = +HEAPF32[$60>>2];
 $62 = ((($f)) + 4|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $61 * $63;
 $65 = $59 - $64;
 $66 = $0;
 $67 = ((($66)) + 276|0);
 $68 = +HEAPF32[$67>>2];
 $69 = $68 + $65;
 HEAPF32[$67>>2] = $69;
 $70 = ((($q)) + 8|0);
 $71 = +HEAPF32[$70>>2];
 $72 = +HEAPF32[$f>>2];
 $73 = $71 * $72;
 $74 = +HEAPF32[$q>>2];
 $75 = ((($f)) + 8|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $74 * $76;
 $78 = $73 - $77;
 $79 = $0;
 $80 = ((($79)) + 276|0);
 $81 = ((($80)) + 4|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $82 + $78;
 HEAPF32[$81>>2] = $83;
 $84 = +HEAPF32[$q>>2];
 $85 = ((($f)) + 4|0);
 $86 = +HEAPF32[$85>>2];
 $87 = $84 * $86;
 $88 = ((($q)) + 4|0);
 $89 = +HEAPF32[$88>>2];
 $90 = +HEAPF32[$f>>2];
 $91 = $89 * $90;
 $92 = $87 - $91;
 $93 = $0;
 $94 = ((($93)) + 276|0);
 $95 = ((($94)) + 8|0);
 $96 = +HEAPF32[$95>>2];
 $97 = $96 + $92;
 HEAPF32[$95>>2] = $97;
 STACKTOP = sp;return;
}
function _dBodyAddRelForceAtRelPos($b,$fx,$fy,$fz,$px,$py,$pz) {
 $b = $b|0;
 $fx = +$fx;
 $fy = +$fy;
 $fz = +$fz;
 $px = +$px;
 $py = +$py;
 $pz = +$pz;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $9 = 0.0, $f = 0, $frel = 0, $p = 0, $prel = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $frel = sp + 56|0;
 $prel = sp + 40|0;
 $f = sp + 24|0;
 $p = sp + 8|0;
 $0 = $b;
 $1 = $fx;
 $2 = $fy;
 $3 = $fz;
 $4 = $px;
 $5 = $py;
 $6 = $pz;
 $7 = $0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  HEAP32[$vararg_buffer>>2] = 2652;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $1;
 HEAPF32[$frel>>2] = $9;
 $10 = $2;
 $11 = ((($frel)) + 4|0);
 HEAPF32[$11>>2] = $10;
 $12 = $3;
 $13 = ((($frel)) + 8|0);
 HEAPF32[$13>>2] = $12;
 $14 = ((($frel)) + 12|0);
 HEAPF32[$14>>2] = 0.0;
 $15 = $4;
 HEAPF32[$prel>>2] = $15;
 $16 = $5;
 $17 = ((($prel)) + 4|0);
 HEAPF32[$17>>2] = $16;
 $18 = $6;
 $19 = ((($prel)) + 8|0);
 HEAPF32[$19>>2] = $18;
 $20 = ((($prel)) + 12|0);
 HEAPF32[$20>>2] = 0.0;
 $21 = $0;
 $22 = ((($21)) + 180|0);
 _dMULTIPLY0_331($f,$22,$frel);
 $23 = $0;
 $24 = ((($23)) + 180|0);
 _dMULTIPLY0_331($p,$24,$prel);
 $25 = +HEAPF32[$f>>2];
 $26 = $0;
 $27 = ((($26)) + 260|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $28 + $25;
 HEAPF32[$27>>2] = $29;
 $30 = ((($f)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $0;
 $33 = ((($32)) + 260|0);
 $34 = ((($33)) + 4|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $35 + $31;
 HEAPF32[$34>>2] = $36;
 $37 = ((($f)) + 8|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $0;
 $40 = ((($39)) + 260|0);
 $41 = ((($40)) + 8|0);
 $42 = +HEAPF32[$41>>2];
 $43 = $42 + $38;
 HEAPF32[$41>>2] = $43;
 $44 = ((($p)) + 4|0);
 $45 = +HEAPF32[$44>>2];
 $46 = ((($f)) + 8|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $45 * $47;
 $49 = ((($p)) + 8|0);
 $50 = +HEAPF32[$49>>2];
 $51 = ((($f)) + 4|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $50 * $52;
 $54 = $48 - $53;
 $55 = $0;
 $56 = ((($55)) + 276|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $57 + $54;
 HEAPF32[$56>>2] = $58;
 $59 = ((($p)) + 8|0);
 $60 = +HEAPF32[$59>>2];
 $61 = +HEAPF32[$f>>2];
 $62 = $60 * $61;
 $63 = +HEAPF32[$p>>2];
 $64 = ((($f)) + 8|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $63 * $65;
 $67 = $62 - $66;
 $68 = $0;
 $69 = ((($68)) + 276|0);
 $70 = ((($69)) + 4|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $71 + $67;
 HEAPF32[$70>>2] = $72;
 $73 = +HEAPF32[$p>>2];
 $74 = ((($f)) + 4|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $73 * $75;
 $77 = ((($p)) + 4|0);
 $78 = +HEAPF32[$77>>2];
 $79 = +HEAPF32[$f>>2];
 $80 = $78 * $79;
 $81 = $76 - $80;
 $82 = $0;
 $83 = ((($82)) + 276|0);
 $84 = ((($83)) + 8|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $85 + $81;
 HEAPF32[$84>>2] = $86;
 STACKTOP = sp;return;
}
function _dBodyGetForce($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2677;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 260|0);
 STACKTOP = sp;return ($4|0);
}
function _dBodyGetTorque($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2691;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 276|0);
 STACKTOP = sp;return ($4|0);
}
function _dBodyGetRelPointPos($b,$px,$py,$pz,$result) {
 $b = $b|0;
 $px = +$px;
 $py = +$py;
 $pz = +$pz;
 $result = $result|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $p = 0;
 var $prel = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $prel = sp + 24|0;
 $p = sp + 8|0;
 $0 = $b;
 $1 = $px;
 $2 = $py;
 $3 = $pz;
 $4 = $result;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  HEAP32[$vararg_buffer>>2] = 2706;
  _dDebug(2,6111,$vararg_buffer);
 }
 $7 = $1;
 HEAPF32[$prel>>2] = $7;
 $8 = $2;
 $9 = ((($prel)) + 4|0);
 HEAPF32[$9>>2] = $8;
 $10 = $3;
 $11 = ((($prel)) + 8|0);
 HEAPF32[$11>>2] = $10;
 $12 = ((($prel)) + 12|0);
 HEAPF32[$12>>2] = 0.0;
 $13 = $0;
 $14 = ((($13)) + 180|0);
 _dMULTIPLY0_331($p,$14,$prel);
 $15 = +HEAPF32[$p>>2];
 $16 = $0;
 $17 = ((($16)) + 148|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $15 + $18;
 $20 = $4;
 HEAPF32[$20>>2] = $19;
 $21 = ((($p)) + 4|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $0;
 $24 = ((($23)) + 148|0);
 $25 = ((($24)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $22 + $26;
 $28 = $4;
 $29 = ((($28)) + 4|0);
 HEAPF32[$29>>2] = $27;
 $30 = ((($p)) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $0;
 $33 = ((($32)) + 148|0);
 $34 = ((($33)) + 8|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $31 + $35;
 $37 = $4;
 $38 = ((($37)) + 8|0);
 HEAPF32[$38>>2] = $36;
 STACKTOP = sp;return;
}
function _dBodyGetRelPointVel($b,$px,$py,$pz,$result) {
 $b = $b|0;
 $px = +$px;
 $py = +$py;
 $pz = +$pz;
 $result = $result|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0.0, $82 = 0.0, $9 = 0, $p = 0, $prel = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $prel = sp + 24|0;
 $p = sp + 8|0;
 $0 = $b;
 $1 = $px;
 $2 = $py;
 $3 = $pz;
 $4 = $result;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  HEAP32[$vararg_buffer>>2] = 2726;
  _dDebug(2,6111,$vararg_buffer);
 }
 $7 = $1;
 HEAPF32[$prel>>2] = $7;
 $8 = $2;
 $9 = ((($prel)) + 4|0);
 HEAPF32[$9>>2] = $8;
 $10 = $3;
 $11 = ((($prel)) + 8|0);
 HEAPF32[$11>>2] = $10;
 $12 = ((($prel)) + 12|0);
 HEAPF32[$12>>2] = 0.0;
 $13 = $0;
 $14 = ((($13)) + 180|0);
 _dMULTIPLY0_331($p,$14,$prel);
 $15 = $0;
 $16 = ((($15)) + 228|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $4;
 HEAPF32[$18>>2] = $17;
 $19 = $0;
 $20 = ((($19)) + 228|0);
 $21 = ((($20)) + 4|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $4;
 $24 = ((($23)) + 4|0);
 HEAPF32[$24>>2] = $22;
 $25 = $0;
 $26 = ((($25)) + 228|0);
 $27 = ((($26)) + 8|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $4;
 $30 = ((($29)) + 8|0);
 HEAPF32[$30>>2] = $28;
 $31 = $0;
 $32 = ((($31)) + 244|0);
 $33 = ((($32)) + 4|0);
 $34 = +HEAPF32[$33>>2];
 $35 = ((($p)) + 8|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $34 * $36;
 $38 = $0;
 $39 = ((($38)) + 244|0);
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF32[$40>>2];
 $42 = ((($p)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $41 * $43;
 $45 = $37 - $44;
 $46 = $4;
 $47 = +HEAPF32[$46>>2];
 $48 = $47 + $45;
 HEAPF32[$46>>2] = $48;
 $49 = $0;
 $50 = ((($49)) + 244|0);
 $51 = ((($50)) + 8|0);
 $52 = +HEAPF32[$51>>2];
 $53 = +HEAPF32[$p>>2];
 $54 = $52 * $53;
 $55 = $0;
 $56 = ((($55)) + 244|0);
 $57 = +HEAPF32[$56>>2];
 $58 = ((($p)) + 8|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $57 * $59;
 $61 = $54 - $60;
 $62 = $4;
 $63 = ((($62)) + 4|0);
 $64 = +HEAPF32[$63>>2];
 $65 = $64 + $61;
 HEAPF32[$63>>2] = $65;
 $66 = $0;
 $67 = ((($66)) + 244|0);
 $68 = +HEAPF32[$67>>2];
 $69 = ((($p)) + 4|0);
 $70 = +HEAPF32[$69>>2];
 $71 = $68 * $70;
 $72 = $0;
 $73 = ((($72)) + 244|0);
 $74 = ((($73)) + 4|0);
 $75 = +HEAPF32[$74>>2];
 $76 = +HEAPF32[$p>>2];
 $77 = $75 * $76;
 $78 = $71 - $77;
 $79 = $4;
 $80 = ((($79)) + 8|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $81 + $78;
 HEAPF32[$80>>2] = $82;
 STACKTOP = sp;return;
}
function _dBodyEnable($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2746;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -5;
 HEAP32[$4>>2] = $6;
 STACKTOP = sp;return;
}
function _dBodyDisable($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2758;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | 4;
 HEAP32[$4>>2] = $6;
 STACKTOP = sp;return;
}
function _dBodyIsEnabled($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $b;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2771;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 4;
 $7 = ($6|0)==(0);
 $8 = $7&1;
 STACKTOP = sp;return ($8|0);
}
function _dJointCreateBall($w,$group) {
 $w = $w|0;
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $group;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 2786;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $0;
 $5 = $1;
 $6 = (__ZL11createJointP7dxWorldP12dxJointGroupPN7dxJoint6VtableE($4,$5,184)|0);
 STACKTOP = sp;return ($6|0);
}
function _dJointCreateHinge($w,$group) {
 $w = $w|0;
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $group;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 2803;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $0;
 $5 = $1;
 $6 = (__ZL11createJointP7dxWorldP12dxJointGroupPN7dxJoint6VtableE($4,$5,204)|0);
 STACKTOP = sp;return ($6|0);
}
function _dJointCreateSlider($w,$group) {
 $w = $w|0;
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $group;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 2821;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $0;
 $5 = $1;
 $6 = (__ZL11createJointP7dxWorldP12dxJointGroupPN7dxJoint6VtableE($4,$5,224)|0);
 STACKTOP = sp;return ($6|0);
}
function _dJointCreateContact($w,$group,$c) {
 $w = $w|0;
 $group = $group|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, $or$cond = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $group;
 $2 = $c;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 2840;
  _dDebug(2,6111,$vararg_buffer);
 }
 $7 = $0;
 $8 = $1;
 $9 = (__ZL11createJointP7dxWorldP12dxJointGroupPN7dxJoint6VtableE($7,$8,244)|0);
 $j = $9;
 $10 = $j;
 $11 = ((($10)) + 56|0);
 $12 = $2;
 dest=$11; src=$12; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $13 = $j;
 STACKTOP = sp;return ($13|0);
}
function _dJointCreateHinge2($w,$group) {
 $w = $w|0;
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $group;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 2860;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $0;
 $5 = $1;
 $6 = (__ZL11createJointP7dxWorldP12dxJointGroupPN7dxJoint6VtableE($4,$5,264)|0);
 STACKTOP = sp;return ($6|0);
}
function _dJointCreateFixed($w,$group) {
 $w = $w|0;
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $group;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 2879;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $0;
 $5 = $1;
 $6 = (__ZL11createJointP7dxWorldP12dxJointGroupPN7dxJoint6VtableE($4,$5,304)|0);
 STACKTOP = sp;return ($6|0);
}
function _dJointCreateNull($w,$group) {
 $w = $w|0;
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $group;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 2897;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $0;
 $5 = $1;
 $6 = (__ZL11createJointP7dxWorldP12dxJointGroupPN7dxJoint6VtableE($4,$5,324)|0);
 STACKTOP = sp;return ($6|0);
}
function _dJointCreateAMotor($w,$group) {
 $w = $w|0;
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $group;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 2914;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $0;
 $5 = $1;
 $6 = (__ZL11createJointP7dxWorldP12dxJointGroupPN7dxJoint6VtableE($4,$5,284)|0);
 STACKTOP = sp;return ($6|0);
}
function _dJointDestroy($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $j;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2933;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 __ZL39removeJointReferencesFromAttachedBodiesP7dxJoint($8);
 $9 = $0;
 __ZL20removeObjectFromListP7dObject($9);
 $10 = $0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + -1)|0;
 HEAP32[$12>>2] = $14;
 $15 = $0;
 $16 = $0;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 _dFree($15,$19);
 STACKTOP = sp;return;
}
function _dJointGroupCreate($max_size) {
 $max_size = $max_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $group = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $max_size;
 $3 = (__ZN5dBasenwEj(20)|0);
 __THREW__ = 0;
 invoke_vi(61,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $group = $3;
  $6 = $group;
  HEAP32[$6>>2] = 0;
  $7 = $group;
  STACKTOP = sp;return ($7|0);
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vii(60,($3|0),20);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
 return (0)|0;
}
function _dJointGroupDestroy($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $group;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  HEAP32[$vararg_buffer>>2] = 2947;
  _dDebug(2,6111,$vararg_buffer);
 }
 $5 = $0;
 _dJointGroupEmpty($5);
 $6 = $0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(62,($6|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __ZN5dBasedlEPvj($6,20);
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 __THREW__ = 0;
 invoke_vii(60,($6|0),20);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 } else {
  $14 = $1;
  $15 = $2;
  ___resumeException($14|0);
  // unreachable;
 }
}
function _dJointGroupEmpty($group) {
 $group = $group|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $jlist = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $group;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 2966;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4<<2;
 $6 = (($5) + 15)|0;
 $$alloca_mul = $6;
 $7 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $8 = $7;
 $9 = (($8) - 1)|0;
 $10 = $9 | 15;
 $11 = (($10) + 1)|0;
 $12 = $11;
 $jlist = $12;
 $13 = $0;
 $14 = ((($13)) + 4|0);
 $15 = (__ZN8dObStack6rewindEv($14)|0);
 $j = $15;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $0;
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $j;
  $21 = $i;
  $22 = $jlist;
  $23 = (($22) + ($21<<2)|0);
  HEAP32[$23>>2] = $20;
  $24 = $0;
  $25 = ((($24)) + 4|0);
  $26 = $j;
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = (__ZN8dObStack4nextEi($25,$29)|0);
  $j = $30;
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 $33 = $0;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) - 1)|0;
 $i = $35;
 while(1) {
  $36 = $i;
  $37 = ($36|0)>=(0);
  if (!($37)) {
   break;
  }
  $38 = $i;
  $39 = $jlist;
  $40 = (($39) + ($38<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(0|0);
  if ($43) {
   $44 = $i;
   $45 = $jlist;
   $46 = (($45) + ($44<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   __ZL39removeJointReferencesFromAttachedBodiesP7dxJoint($47);
   $48 = $i;
   $49 = $jlist;
   $50 = (($49) + ($48<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   __ZL20removeObjectFromListP7dObject($51);
   $52 = $i;
   $53 = $jlist;
   $54 = (($53) + ($52<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($56)) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + -1)|0;
   HEAP32[$57>>2] = $59;
  }
  $60 = $i;
  $61 = (($60) + -1)|0;
  $i = $61;
 }
 $62 = $0;
 HEAP32[$62>>2] = 0;
 $63 = $0;
 $64 = ((($63)) + 4|0);
 __ZN8dObStack7freeAllEv($64);
 STACKTOP = sp;return;
}
function _dJointAttach($joint,$body1,$body2) {
 $joint = $joint|0;
 $body1 = $body1|0;
 $body2 = $body2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $world = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $body1;
 $2 = $body2;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  HEAP32[$vararg_buffer>>2] = 2983;
  _dDebug(2,4658,$vararg_buffer);
 }
 $5 = $1;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = $1;
  $8 = $2;
  $9 = ($7|0)!=($8|0);
  if (!($9)) {
   HEAP32[$vararg_buffer1>>2] = 2983;
   _dDebug(2,2996,$vararg_buffer1);
  }
 }
 $10 = $0;
 $11 = HEAP32[$10>>2]|0;
 $world = $11;
 $12 = $1;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = $world;
  $17 = ($15|0)==($16|0);
  if ($17) {
   label = 8;
  } else {
   label = 10;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $18 = $2;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = $2;
   $21 = HEAP32[$20>>2]|0;
   $22 = $world;
   $23 = ($21|0)==($22|0);
   if (!($23)) {
    label = 10;
   }
  }
 }
 if ((label|0) == 10) {
  HEAP32[$vararg_buffer4>>2] = 2983;
  _dDebug(2,3028,$vararg_buffer4);
 }
 $24 = $0;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 4;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $1;
  $30 = ($29|0)!=(0|0);
  $31 = $30&1;
  $32 = $2;
  $33 = ($32|0)!=(0|0);
  $34 = $33&1;
  $35 = $31 ^ $34;
  $36 = ($35|0)!=(0);
  if ($36) {
   HEAP32[$vararg_buffer7>>2] = 2983;
   _dDebug(2,3075,$vararg_buffer7);
  }
 }
 $37 = $0;
 $38 = ((($37)) + 28|0);
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  label = 16;
 } else {
  $42 = $0;
  $43 = ((($42)) + 28|0);
  $44 = ((($43)) + 12|0);
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0|0);
  if ($47) {
   label = 16;
  }
 }
 if ((label|0) == 16) {
  $48 = $0;
  __ZL39removeJointReferencesFromAttachedBodiesP7dxJoint($48);
 }
 $49 = $1;
 $50 = ($49|0)==(0|0);
 if ($50) {
  $51 = $2;
  $1 = $51;
  $2 = 0;
  $52 = $0;
  $53 = ((($52)) + 24|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 & -3;
  HEAP32[$53>>2] = $55;
 } else {
  $56 = $0;
  $57 = ((($56)) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58 | 2;
  HEAP32[$57>>2] = $59;
 }
 $60 = $1;
 $61 = $0;
 $62 = ((($61)) + 28|0);
 $63 = ((($62)) + 4|0);
 HEAP32[$63>>2] = $60;
 $64 = $2;
 $65 = $0;
 $66 = ((($65)) + 28|0);
 $67 = ((($66)) + 12|0);
 $68 = ((($67)) + 4|0);
 HEAP32[$68>>2] = $64;
 $69 = $1;
 $70 = ($69|0)!=(0|0);
 if ($70) {
  $71 = $1;
  $72 = ((($71)) + 20|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $0;
  $75 = ((($74)) + 28|0);
  $76 = ((($75)) + 12|0);
  $77 = ((($76)) + 8|0);
  HEAP32[$77>>2] = $73;
  $78 = $0;
  $79 = ((($78)) + 28|0);
  $80 = ((($79)) + 12|0);
  $81 = $1;
  $82 = ((($81)) + 20|0);
  HEAP32[$82>>2] = $80;
 } else {
  $83 = $0;
  $84 = ((($83)) + 28|0);
  $85 = ((($84)) + 12|0);
  $86 = ((($85)) + 8|0);
  HEAP32[$86>>2] = 0;
 }
 $87 = $2;
 $88 = ($87|0)!=(0|0);
 if ($88) {
  $89 = $2;
  $90 = ((($89)) + 20|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $0;
  $93 = ((($92)) + 28|0);
  $94 = ((($93)) + 8|0);
  HEAP32[$94>>2] = $91;
  $95 = $0;
  $96 = ((($95)) + 28|0);
  $97 = $2;
  $98 = ((($97)) + 20|0);
  HEAP32[$98>>2] = $96;
  STACKTOP = sp;return;
 } else {
  $99 = $0;
  $100 = ((($99)) + 28|0);
  $101 = ((($100)) + 8|0);
  HEAP32[$101>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _dJointGetType($joint) {
 $joint = $joint|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 3126;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _dJointGetBody($joint,$index) {
 $joint = $joint|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $joint;
 $2 = $index;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  HEAP32[$vararg_buffer>>2] = 3140;
  _dDebug(2,6111,$vararg_buffer);
 }
 $5 = $2;
 $6 = ($5|0)>=(0);
 $7 = $2;
 $8 = ($7|0)<(2);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $2;
  $10 = $1;
  $11 = ((($10)) + 28|0);
  $12 = (($11) + (($9*12)|0)|0);
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _dAreConnected($b1,$b2) {
 $b1 = $b1|0;
 $b2 = $b2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $n = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $b1;
 $2 = $b2;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 3154;
  _dDebug(2,6111,$vararg_buffer);
 }
 $7 = $1;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $n = $9;
 while(1) {
  $10 = $n;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   label = 8;
   break;
  }
  $12 = $n;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ($14|0)==($15|0);
  if ($16) {
   label = 6;
   break;
  }
  $17 = $n;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $n = $19;
 }
 if ((label|0) == 6) {
  $0 = 1;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _dWorldCreate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (__ZN5dBasenwEj(40)|0);
 $w = $0;
 $1 = $w;
 HEAP32[$1>>2] = 0;
 $2 = $w;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = $w;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = $w;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = $w;
 $9 = ((($8)) + 16|0);
 _dSetZero($9,4);
 $10 = $w;
 $11 = ((($10)) + 32|0);
 HEAPF32[$11>>2] = 0.20000000298023224;
 $12 = $w;
 $13 = ((($12)) + 36|0);
 HEAPF32[$13>>2] = 9.9999997473787516E-6;
 $14 = $w;
 STACKTOP = sp;return ($14|0);
}
function _dWorldDestroy($w) {
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $j = 0, $nextb = 0, $nextj = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 3168;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $b = $4;
 while(1) {
  $5 = $b;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $b;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $nextb = $9;
  $10 = $b;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   __ZN5dBasedlEPvj($10,308);
  }
  $12 = $nextb;
  $b = $12;
 }
 $13 = $0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $j = $15;
 while(1) {
  $16 = $j;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   break;
  }
  $18 = $j;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $nextj = $20;
  $21 = $j;
  $22 = ((($21)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 1;
  $25 = ($24|0)!=(0);
  $26 = $j;
  if ($25) {
   HEAP32[$26>>2] = 0;
   $27 = $j;
   $28 = ((($27)) + 28|0);
   $29 = ((($28)) + 4|0);
   HEAP32[$29>>2] = 0;
   $30 = $j;
   $31 = ((($30)) + 28|0);
   $32 = ((($31)) + 8|0);
   HEAP32[$32>>2] = 0;
   $33 = $j;
   $34 = ((($33)) + 28|0);
   $35 = ((($34)) + 12|0);
   $36 = ((($35)) + 4|0);
   HEAP32[$36>>2] = 0;
   $37 = $j;
   $38 = ((($37)) + 28|0);
   $39 = ((($38)) + 12|0);
   $40 = ((($39)) + 8|0);
   HEAP32[$40>>2] = 0;
   _dMessage(0,3182,$vararg_buffer1);
  } else {
   $41 = $j;
   $42 = ((($41)) + 20|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = HEAP32[$43>>2]|0;
   _dFree($26,$44);
  }
  $45 = $nextj;
  $j = $45;
 }
 $46 = $0;
 $47 = ($46|0)==(0|0);
 if ($47) {
  STACKTOP = sp;return;
 }
 __ZN5dBasedlEPvj($46,40);
 STACKTOP = sp;return;
}
function _dWorldSetGravity($w,$x,$y,$z) {
 $w = $w|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 3234;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 16|0);
 HEAPF32[$8>>2] = $6;
 $9 = $2;
 $10 = $0;
 $11 = ((($10)) + 16|0);
 $12 = ((($11)) + 4|0);
 HEAPF32[$12>>2] = $9;
 $13 = $3;
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = ((($15)) + 8|0);
 HEAPF32[$16>>2] = $13;
 STACKTOP = sp;return;
}
function _dWorldGetGravity($w,$g) {
 $w = $w|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $g;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 3251;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $0;
 $5 = ((($4)) + 16|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 HEAPF32[$7>>2] = $6;
 $8 = $0;
 $9 = ((($8)) + 16|0);
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = ((($12)) + 4|0);
 HEAPF32[$13>>2] = $11;
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 8|0);
 HEAPF32[$19>>2] = $17;
 STACKTOP = sp;return;
}
function _dWorldSetERP($w,$erp) {
 $w = $w|0;
 $erp = +$erp;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $w;
 $1 = $erp;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 32|0);
 HEAPF32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _dWorldGetERP($w) {
 $w = $w|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $w;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $3 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$3);
}
function _dWorldSetCFM($w,$cfm) {
 $w = $w|0;
 $cfm = +$cfm;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $w;
 $1 = $cfm;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 HEAPF32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _dWorldGetCFM($w) {
 $w = $w|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $w;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$3);
}
function _dWorldStep($w,$stepsize) {
 $w = $w|0;
 $stepsize = +$stepsize;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $stepsize;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 3295;
  _dDebug(2,3268,$vararg_buffer);
 }
 $4 = $1;
 $5 = $4 > 0.0;
 if (!($5)) {
  HEAP32[$vararg_buffer1>>2] = 3295;
  _dDebug(2,3306,$vararg_buffer1);
 }
 $6 = $0;
 $7 = $1;
 __ZL14processIslandsP7dxWorldf($6,$7);
 STACKTOP = sp;return;
}
function __ZN5dBasenwEj($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $0;
 $2 = (_dAlloc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN6dxBodyC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 __ZN5dMassC2Ev($2);
 STACKTOP = sp;return;
}
function __ZL10initObjectP7dObjectP7dxWorld($obj,$w) {
 $obj = $obj|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = $w;
 $2 = $1;
 $3 = $0;
 HEAP32[$3>>2] = $2;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = $0;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = $0;
 $9 = ((($8)) + 12|0);
 HEAP32[$9>>2] = 0;
 $10 = $0;
 $11 = ((($10)) + 16|0);
 HEAP32[$11>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL15addObjectToListP7dObjectPS0_($obj,$first) {
 $obj = $obj|0;
 $first = $first|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = $first;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $17 = $0;
  $18 = $1;
  HEAP32[$18>>2] = $17;
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ((($12)) + 4|0);
 $14 = $1;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 8|0);
 HEAP32[$16>>2] = $13;
 $17 = $0;
 $18 = $1;
 HEAP32[$18>>2] = $17;
 STACKTOP = sp;return;
}
function __ZN5dBasedlEPvj($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $size;
 $2 = $0;
 $3 = $1;
 _dFree($2,$3);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZL39removeJointReferencesFromAttachedBodiesP7dxJoint($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $body = 0, $i = 0, $last = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(2);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = $0;
  $5 = ((($4)) + 28|0);
  $6 = (($5) + (($3*12)|0)|0);
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $body = $8;
  $9 = $body;
  $10 = ($9|0)!=(0|0);
  L4: do {
   if ($10) {
    $11 = $body;
    $12 = ((($11)) + 20|0);
    $13 = HEAP32[$12>>2]|0;
    $n = $13;
    $last = 0;
    while(1) {
     $14 = $n;
     $15 = ($14|0)!=(0|0);
     if (!($15)) {
      break L4;
     }
     $16 = $n;
     $17 = HEAP32[$16>>2]|0;
     $18 = $0;
     $19 = ($17|0)==($18|0);
     if ($19) {
      break;
     }
     $29 = $n;
     $last = $29;
     $30 = $n;
     $31 = ((($30)) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     $n = $32;
    }
    $20 = $last;
    $21 = ($20|0)!=(0|0);
    $22 = $n;
    $23 = ((($22)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    if ($21) {
     $25 = $last;
     $26 = ((($25)) + 8|0);
     HEAP32[$26>>2] = $24;
     break;
    } else {
     $27 = $body;
     $28 = ((($27)) + 20|0);
     HEAP32[$28>>2] = $24;
     break;
    }
   }
  } while(0);
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $0;
 $36 = ((($35)) + 28|0);
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $0;
 $39 = ((($38)) + 28|0);
 $40 = ((($39)) + 8|0);
 HEAP32[$40>>2] = 0;
 $41 = $0;
 $42 = ((($41)) + 28|0);
 $43 = ((($42)) + 12|0);
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = 0;
 $45 = $0;
 $46 = ((($45)) + 28|0);
 $47 = ((($46)) + 12|0);
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL20removeObjectFromListP7dObject($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  HEAP32[$11>>2] = $7;
 }
 $12 = $0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$17>>2] = $14;
 $18 = $0;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = 0;
 $20 = $0;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL11createJointP7dxWorldP12dxJointGroupPN7dxJoint6VtableE($w,$group,$vtable) {
 $w = $w|0;
 $group = $group|0;
 $vtable = $vtable|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $j = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $group;
 $2 = $vtable;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 3627;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = 3405;
  _dDebug(1,3583,$vararg_buffer);
 }
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZN8dObStack5allocEi($10,$12)|0);
  $j = $13;
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$14>>2] = $16;
 } else {
  $17 = $2;
  $18 = HEAP32[$17>>2]|0;
  $19 = (_dAlloc($18)|0);
  $j = $19;
 }
 $20 = $0;
 $21 = $j;
 __ZL10dJointInitP7dxWorldP7dxJoint($20,$21);
 $22 = $2;
 $23 = $j;
 $24 = ((($23)) + 20|0);
 HEAP32[$24>>2] = $22;
 $25 = $1;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $j;
  $28 = ((($27)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 | 1;
  HEAP32[$28>>2] = $30;
 }
 $31 = $2;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $39 = $j;
  STACKTOP = sp;return ($39|0);
 }
 $35 = $2;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $j;
 FUNCTION_TABLE_vi[$37 & 127]($38);
 $39 = $j;
 STACKTOP = sp;return ($39|0);
}
function __ZN12dxJointGroupC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN8dObStackC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN12dxJointGroupD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN8dObStackD2Ev($2);
 STACKTOP = sp;return;
}
function __ZL14processIslandsP7dxWorldf($world,$stepsize) {
 $world = $world|0;
 $stepsize = +$stepsize;
 var $$alloca_mul = 0, $$alloca_mul16 = 0, $$alloca_mul18 = 0, $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $bb = 0, $bcount = 0, $body = 0, $i = 0, $j = 0, $jcount = 0, $joint = 0, $n = 0;
 var $stack = 0, $stackalloc = 0, $stacksize = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $world;
 $1 = $stepsize;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8<<2;
 $10 = (($9) + 15)|0;
 $$alloca_mul = $10;
 $11 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $12 = $11;
 $13 = (($12) - 1)|0;
 $14 = $13 | 15;
 $15 = (($14) + 1)|0;
 $16 = $15;
 $body = $16;
 $17 = $0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19<<2;
 $21 = (($20) + 15)|0;
 $$alloca_mul16 = $21;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul16)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $23 = $22;
 $24 = (($23) - 1)|0;
 $25 = $24 | 15;
 $26 = (($25) + 1)|0;
 $27 = $26;
 $joint = $27;
 $bcount = 0;
 $jcount = 0;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $b = $29;
 while(1) {
  $30 = $b;
  $31 = ($30|0)!=(0|0);
  if (!($31)) {
   break;
  }
  $32 = $b;
  $33 = ((($32)) + 16|0);
  HEAP32[$33>>2] = 0;
  $34 = $b;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $b = $36;
 }
 $37 = $0;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $j = $39;
 while(1) {
  $40 = $j;
  $41 = ($40|0)!=(0|0);
  if (!($41)) {
   break;
  }
  $42 = $j;
  $43 = ((($42)) + 16|0);
  HEAP32[$43>>2] = 0;
  $44 = $j;
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $j = $46;
 }
 $47 = $0;
 $48 = ((($47)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $0;
 $51 = ((($50)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($49|0)<($52|0);
 $54 = $0;
 if ($53) {
  $55 = ((($54)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $59 = $56;
 } else {
  $57 = ((($54)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58;
 }
 $stackalloc = $59;
 $60 = $stackalloc;
 $61 = $60<<2;
 $62 = (($61) + 15)|0;
 $$alloca_mul18 = $62;
 $63 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul18)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $64 = $63;
 $65 = (($64) - 1)|0;
 $66 = $65 | 15;
 $67 = (($66) + 1)|0;
 $68 = $67;
 $stack = $68;
 $69 = $0;
 $70 = HEAP32[$69>>2]|0;
 $bb = $70;
 while(1) {
  $71 = $bb;
  $72 = ($71|0)!=(0|0);
  if (!($72)) {
   break;
  }
  $73 = $bb;
  $74 = ((($73)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)!=(0);
  L19: do {
   if (!($76)) {
    $77 = $bb;
    $78 = ((($77)) + 24|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 4;
    $81 = ($80|0)!=(0);
    if (!($81)) {
     $82 = $bb;
     $83 = ((($82)) + 16|0);
     HEAP32[$83>>2] = 1;
     $stacksize = 0;
     $84 = $bb;
     $b = $84;
     $85 = $bb;
     $86 = $body;
     HEAP32[$86>>2] = $85;
     $bcount = 1;
     $jcount = 0;
     while(1) {
      $97 = $b;
      $98 = ((($97)) + 20|0);
      $99 = HEAP32[$98>>2]|0;
      $n = $99;
      while(1) {
       $100 = $n;
       $101 = ($100|0)!=(0|0);
       if (!($101)) {
        break;
       }
       $102 = $n;
       $103 = HEAP32[$102>>2]|0;
       $104 = ((($103)) + 16|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ($105|0)!=(0);
       if (!($106)) {
        $107 = $n;
        $108 = HEAP32[$107>>2]|0;
        $109 = ((($108)) + 16|0);
        HEAP32[$109>>2] = 1;
        $110 = $n;
        $111 = HEAP32[$110>>2]|0;
        $112 = $jcount;
        $113 = (($112) + 1)|0;
        $jcount = $113;
        $114 = $joint;
        $115 = (($114) + ($112<<2)|0);
        HEAP32[$115>>2] = $111;
        $116 = $n;
        $117 = ((($116)) + 4|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = ($118|0)!=(0|0);
        if ($119) {
         $120 = $n;
         $121 = ((($120)) + 4|0);
         $122 = HEAP32[$121>>2]|0;
         $123 = ((($122)) + 16|0);
         $124 = HEAP32[$123>>2]|0;
         $125 = ($124|0)!=(0);
         if (!($125)) {
          $126 = $n;
          $127 = ((($126)) + 4|0);
          $128 = HEAP32[$127>>2]|0;
          $129 = ((($128)) + 16|0);
          HEAP32[$129>>2] = 1;
          $130 = $n;
          $131 = ((($130)) + 4|0);
          $132 = HEAP32[$131>>2]|0;
          $133 = $stacksize;
          $134 = (($133) + 1)|0;
          $stacksize = $134;
          $135 = $stack;
          $136 = (($135) + ($133<<2)|0);
          HEAP32[$136>>2] = $132;
         }
        }
       }
       $137 = $n;
       $138 = ((($137)) + 8|0);
       $139 = HEAP32[$138>>2]|0;
       $n = $139;
      }
      $140 = $stacksize;
      $141 = $0;
      $142 = ((($141)) + 8|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ($140|0)<=($143|0);
      if (!($144)) {
       HEAP32[$vararg_buffer>>2] = 3390;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = 3405;
       _dDebug(1,3335,$vararg_buffer);
      }
      $145 = $stacksize;
      $146 = $0;
      $147 = ((($146)) + 12|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($145|0)<=($148|0);
      if (!($149)) {
       HEAP32[$vararg_buffer2>>2] = 3390;
       $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
       HEAP32[$vararg_ptr5>>2] = 3405;
       _dDebug(1,3413,$vararg_buffer2);
      }
      $150 = $stacksize;
      $151 = ($150|0)>(0);
      if (!($151)) {
       break;
      }
      $87 = $stacksize;
      $88 = (($87) + -1)|0;
      $stacksize = $88;
      $89 = $stack;
      $90 = (($89) + ($88<<2)|0);
      $91 = HEAP32[$90>>2]|0;
      $b = $91;
      $92 = $b;
      $93 = $bcount;
      $94 = (($93) + 1)|0;
      $bcount = $94;
      $95 = $body;
      $96 = (($95) + ($93<<2)|0);
      HEAP32[$96>>2] = $92;
     }
     $152 = $0;
     $153 = $body;
     $154 = $bcount;
     $155 = $joint;
     $156 = $jcount;
     $157 = $1;
     __Z19dInternalStepIslandP7dxWorldPKP6dxBodyiPKP7dxJointif($152,$153,$154,$155,$156,$157);
     $i = 0;
     while(1) {
      $158 = $i;
      $159 = $bcount;
      $160 = ($158|0)<($159|0);
      if (!($160)) {
       break;
      }
      $161 = $i;
      $162 = $body;
      $163 = (($162) + ($161<<2)|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ((($164)) + 16|0);
      HEAP32[$165>>2] = 1;
      $166 = $i;
      $167 = $body;
      $168 = (($167) + ($166<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ((($169)) + 24|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = $171 & -5;
      HEAP32[$170>>2] = $172;
      $173 = $i;
      $174 = (($173) + 1)|0;
      $i = $174;
     }
     $i = 0;
     while(1) {
      $175 = $i;
      $176 = $jcount;
      $177 = ($175|0)<($176|0);
      if (!($177)) {
       break L19;
      }
      $178 = $i;
      $179 = $joint;
      $180 = (($179) + ($178<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ((($181)) + 16|0);
      HEAP32[$182>>2] = 1;
      $183 = $i;
      $184 = (($183) + 1)|0;
      $i = $184;
     }
    }
   }
  } while(0);
  $185 = $bb;
  $186 = ((($185)) + 4|0);
  $187 = HEAP32[$186>>2]|0;
  $bb = $187;
 }
 $188 = $0;
 $189 = HEAP32[$188>>2]|0;
 $b = $189;
 while(1) {
  $190 = $b;
  $191 = ($190|0)!=(0|0);
  if (!($191)) {
   break;
  }
  $192 = $b;
  $193 = ((($192)) + 24|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $194 & 4;
  $196 = ($195|0)!=(0);
  $197 = $b;
  $198 = ((($197)) + 16|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = ($199|0)!=(0);
  if ($196) {
   if ($200) {
    _dDebug(0,3468,$vararg_buffer6);
   }
  } else {
   if (!($200)) {
    _dDebug(0,3489,$vararg_buffer8);
   }
  }
  $201 = $b;
  $202 = ((($201)) + 4|0);
  $203 = HEAP32[$202>>2]|0;
  $b = $203;
 }
 $204 = $0;
 $205 = ((($204)) + 4|0);
 $206 = HEAP32[$205>>2]|0;
 $j = $206;
 while(1) {
  $207 = $j;
  $208 = ($207|0)!=(0|0);
  if (!($208)) {
   break;
  }
  $209 = $j;
  $210 = ((($209)) + 28|0);
  $211 = ((($210)) + 4|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = ($212|0)!=(0|0);
  if ($213) {
   $214 = $j;
   $215 = ((($214)) + 28|0);
   $216 = ((($215)) + 4|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = ((($217)) + 24|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $219 & 4;
   $221 = ($220|0)==(0);
   if ($221) {
    label = 50;
   } else {
    label = 48;
   }
  } else {
   label = 48;
  }
  do {
   if ((label|0) == 48) {
    label = 0;
    $222 = $j;
    $223 = ((($222)) + 28|0);
    $224 = ((($223)) + 12|0);
    $225 = ((($224)) + 4|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = ($226|0)!=(0|0);
    if ($227) {
     $228 = $j;
     $229 = ((($228)) + 28|0);
     $230 = ((($229)) + 12|0);
     $231 = ((($230)) + 4|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = ((($232)) + 24|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = $234 & 4;
     $236 = ($235|0)==(0);
     if ($236) {
      label = 50;
      break;
     }
    }
    $241 = $j;
    $242 = ((($241)) + 16|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = ($243|0)!=(0);
    if ($244) {
     _dDebug(0,3547,$vararg_buffer12);
    }
   }
  } while(0);
  if ((label|0) == 50) {
   label = 0;
   $237 = $j;
   $238 = ((($237)) + 16|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = ($239|0)!=(0);
   if (!($240)) {
    _dDebug(0,3513,$vararg_buffer10);
   }
  }
  $245 = $j;
  $246 = ((($245)) + 4|0);
  $247 = HEAP32[$246>>2]|0;
  $j = $247;
 }
 STACKTOP = sp;return;
}
function __ZL10dJointInitP7dxWorldP7dxJoint($w,$j) {
 $w = $w|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $j;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 3678;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = 3405;
  _dDebug(1,3639,$vararg_buffer);
 }
 $6 = $1;
 $7 = $0;
 __ZL10initObjectP7dObjectP7dxWorld($6,$7);
 $8 = $1;
 $9 = ((($8)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 24|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = $1;
 $14 = ((($13)) + 28|0);
 HEAP32[$14>>2] = $12;
 $15 = $1;
 $16 = ((($15)) + 28|0);
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = $1;
 $19 = ((($18)) + 28|0);
 $20 = ((($19)) + 8|0);
 HEAP32[$20>>2] = 0;
 $21 = $1;
 $22 = $1;
 $23 = ((($22)) + 28|0);
 $24 = ((($23)) + 12|0);
 HEAP32[$24>>2] = $21;
 $25 = $1;
 $26 = ((($25)) + 28|0);
 $27 = ((($26)) + 12|0);
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = 0;
 $29 = $1;
 $30 = ((($29)) + 28|0);
 $31 = ((($30)) + 12|0);
 $32 = ((($31)) + 8|0);
 HEAP32[$32>>2] = 0;
 $33 = $1;
 $34 = $0;
 $35 = ((($34)) + 4|0);
 __ZL15addObjectToListP7dObjectPS0_($33,$35);
 $36 = $0;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 1)|0;
 HEAP32[$37>>2] = $39;
 STACKTOP = sp;return;
}
function __ZN5dMassC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 _dMassSetZero($1);
 STACKTOP = sp;return;
}
function __Z22dInternalStepIsland_x2P7dxWorldPKP6dxBodyiPKP7dxJointif($world,$body,$nb,$_joint,$nj,$stepsize) {
 $world = $world|0;
 $body = $body|0;
 $nb = $nb|0;
 $_joint = $_joint|0;
 $nj = $nj|0;
 $stepsize = +$stepsize;
 var $$alloca_mul = 0, $$alloca_mul21 = 0, $$alloca_mul23 = 0, $$alloca_mul25 = 0, $$alloca_mul27 = 0, $$alloca_mul29 = 0, $$alloca_mul31 = 0, $$alloca_mul33 = 0, $$alloca_mul35 = 0, $$alloca_mul37 = 0, $$alloca_mul39 = 0, $$alloca_mul41 = 0, $$alloca_mul43 = 0, $$alloca_mul45 = 0, $$alloca_mul47 = 0, $$alloca_mul49 = 0, $$alloca_mul51 = 0, $$alloca_mul53 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0.0, $1038 = 0.0, $1039 = 0.0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0.0, $1048 = 0.0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0.0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0.0, $1087 = 0.0, $1088 = 0.0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0.0, $1097 = 0.0, $1098 = 0.0, $1099 = 0.0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0.0, $1129 = 0.0, $113 = 0, $1130 = 0.0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0.0, $1139 = 0.0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0.0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0.0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0.0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0.0, $1236 = 0.0, $1237 = 0.0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0.0, $1242 = 0.0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0.0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0.0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0.0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0.0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0.0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0.0, $1369 = 0.0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0.0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0.0, $139 = 0.0, $1390 = 0.0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0.0, $14 = 0, $140 = 0.0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0.0, $1404 = 0.0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0.0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0.0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0.0, $143 = 0, $1430 = 0.0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0.0, $1439 = 0.0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0.0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0.0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0.0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0.0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0;
 var $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0.0;
 var $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0;
 var $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0.0;
 var $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0.0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0.0, $514 = 0, $515 = 0, $516 = 0.0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0.0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0.0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0.0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0.0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0.0, $75 = 0, $750 = 0.0, $751 = 0.0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $A = 0, $I = 0, $J = 0, $JJ = 0, $JJ5 = 0, $Jdst = 0;
 var $Jinfo = 0, $JinvM = 0, $Jsrc = 0, $b = 0, $body_invI = 0, $body_invI4 = 0, $body_invI7 = 0, $body_invMass = 0.0, $body_invMass3 = 0.0, $body_invMass6 = 0.0, $c = 0, $cfm = 0, $cforce = 0, $findex = 0, $hi = 0, $i = 0, $info = 0, $invI = 0, $j = 0, $j1 = 0;
 var $j2 = 0, $jb1 = 0, $jb2 = 0, $joint = 0, $k = 0, $lambda = 0, $lo = 0, $m = 0, $mskip = 0, $n1 = 0, $n2 = 0, $nub = 0, $ofs = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $residual = 0, $rhs = 0, $stepsize1 = 0.0, $tmp = 0;
 var $tmp1 = 0, $tmp12 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 16|0;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer = sp;
 $tmp = sp + 224|0;
 $Jinfo = sp + 128|0;
 $0 = $world;
 $1 = $body;
 $2 = $nb;
 $3 = $_joint;
 $4 = $nj;
 $5 = $stepsize;
 $6 = $5;
 $7 = 1.0 / $6;
 $stepsize1 = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $2;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = $i;
  $13 = $1;
  $14 = (($13) + ($12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 16|0);
  HEAP32[$16>>2] = $11;
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 $19 = $4;
 $20 = $19<<2;
 $21 = (($20) + 15)|0;
 $$alloca_mul = $21;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $23 = $22;
 $24 = (($23) - 1)|0;
 $25 = $24 | 15;
 $26 = (($25) + 1)|0;
 $27 = $26;
 $joint = $27;
 $28 = $joint;
 $29 = $3;
 $30 = $4;
 $31 = $30<<2;
 _memcpy(($28|0),($29|0),($31|0))|0;
 $32 = $2;
 $33 = ($32*3)|0;
 $34 = $33<<2;
 $35 = $34<<2;
 $36 = (($35) + 15)|0;
 $$alloca_mul21 = $36;
 $37 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul21)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $38 = $37;
 $39 = (($38) - 1)|0;
 $40 = $39 | 15;
 $41 = (($40) + 1)|0;
 $42 = $41;
 $I = $42;
 $43 = $2;
 $44 = ($43*3)|0;
 $45 = $44<<2;
 $46 = $45<<2;
 $47 = (($46) + 15)|0;
 $$alloca_mul23 = $47;
 $48 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul23)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $49 = $48;
 $50 = (($49) - 1)|0;
 $51 = $50 | 15;
 $52 = (($51) + 1)|0;
 $53 = $52;
 $invI = $53;
 $54 = $I;
 $55 = $2;
 $56 = ($55*3)|0;
 $57 = $56<<2;
 _dSetZero($54,$57);
 $58 = $invI;
 $59 = $2;
 $60 = ($59*3)|0;
 $61 = $60<<2;
 _dSetZero($58,$61);
 $i = 0;
 while(1) {
  $62 = $i;
  $63 = $2;
  $64 = ($62|0)<($63|0);
  if (!($64)) {
   break;
  }
  $65 = $i;
  $66 = $1;
  $67 = (($66) + ($65<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($68)) + 28|0);
  $70 = ((($69)) + 20|0);
  $71 = $i;
  $72 = $1;
  $73 = (($72) + ($71<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($74)) + 180|0);
  _dMULTIPLY2_333($tmp,$70,$75);
  $76 = $I;
  $77 = $i;
  $78 = ($77*12)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = $i;
  $81 = $1;
  $82 = (($81) + ($80<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + 180|0);
  _dMULTIPLY0_333($79,$84,$tmp);
  $85 = $i;
  $86 = $1;
  $87 = (($86) + ($85<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 96|0);
  $90 = $i;
  $91 = $1;
  $92 = (($91) + ($90<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($93)) + 180|0);
  _dMULTIPLY2_333($tmp,$89,$94);
  $95 = $invI;
  $96 = $i;
  $97 = ($96*12)|0;
  $98 = (($95) + ($97<<2)|0);
  $99 = $i;
  $100 = $1;
  $101 = (($100) + ($99<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($102)) + 180|0);
  _dMULTIPLY0_333($98,$103,$tmp);
  $104 = $I;
  $105 = $i;
  $106 = ($105*12)|0;
  $107 = (($104) + ($106<<2)|0);
  $108 = $i;
  $109 = $1;
  $110 = (($109) + ($108<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ((($111)) + 244|0);
  _dMULTIPLY0_331($tmp,$107,$112);
  $113 = $i;
  $114 = $1;
  $115 = (($114) + ($113<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ((($116)) + 244|0);
  $118 = ((($117)) + 4|0);
  $119 = +HEAPF32[$118>>2];
  $120 = ((($tmp)) + 8|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $119 * $121;
  $123 = $i;
  $124 = $1;
  $125 = (($124) + ($123<<2)|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($126)) + 244|0);
  $128 = ((($127)) + 8|0);
  $129 = +HEAPF32[$128>>2];
  $130 = ((($tmp)) + 4|0);
  $131 = +HEAPF32[$130>>2];
  $132 = $129 * $131;
  $133 = $122 - $132;
  $134 = $i;
  $135 = $1;
  $136 = (($135) + ($134<<2)|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ((($137)) + 276|0);
  $139 = +HEAPF32[$138>>2];
  $140 = $139 - $133;
  HEAPF32[$138>>2] = $140;
  $141 = $i;
  $142 = $1;
  $143 = (($142) + ($141<<2)|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ((($144)) + 244|0);
  $146 = ((($145)) + 8|0);
  $147 = +HEAPF32[$146>>2];
  $148 = +HEAPF32[$tmp>>2];
  $149 = $147 * $148;
  $150 = $i;
  $151 = $1;
  $152 = (($151) + ($150<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ((($153)) + 244|0);
  $155 = +HEAPF32[$154>>2];
  $156 = ((($tmp)) + 8|0);
  $157 = +HEAPF32[$156>>2];
  $158 = $155 * $157;
  $159 = $149 - $158;
  $160 = $i;
  $161 = $1;
  $162 = (($161) + ($160<<2)|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ((($163)) + 276|0);
  $165 = ((($164)) + 4|0);
  $166 = +HEAPF32[$165>>2];
  $167 = $166 - $159;
  HEAPF32[$165>>2] = $167;
  $168 = $i;
  $169 = $1;
  $170 = (($169) + ($168<<2)|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ((($171)) + 244|0);
  $173 = +HEAPF32[$172>>2];
  $174 = ((($tmp)) + 4|0);
  $175 = +HEAPF32[$174>>2];
  $176 = $173 * $175;
  $177 = $i;
  $178 = $1;
  $179 = (($178) + ($177<<2)|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ((($180)) + 244|0);
  $182 = ((($181)) + 4|0);
  $183 = +HEAPF32[$182>>2];
  $184 = +HEAPF32[$tmp>>2];
  $185 = $183 * $184;
  $186 = $176 - $185;
  $187 = $i;
  $188 = $1;
  $189 = (($188) + ($187<<2)|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = ((($190)) + 276|0);
  $192 = ((($191)) + 8|0);
  $193 = +HEAPF32[$192>>2];
  $194 = $193 - $186;
  HEAPF32[$192>>2] = $194;
  $195 = $i;
  $196 = (($195) + 1)|0;
  $i = $196;
 }
 $i = 0;
 while(1) {
  $197 = $i;
  $198 = $2;
  $199 = ($197|0)<($198|0);
  if (!($199)) {
   break;
  }
  $200 = $i;
  $201 = $1;
  $202 = (($201) + ($200<<2)|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = ((($203)) + 28|0);
  $205 = +HEAPF32[$204>>2];
  $206 = $0;
  $207 = ((($206)) + 16|0);
  $208 = +HEAPF32[$207>>2];
  $209 = $205 * $208;
  $210 = $i;
  $211 = $1;
  $212 = (($211) + ($210<<2)|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ((($213)) + 260|0);
  $215 = +HEAPF32[$214>>2];
  $216 = $215 + $209;
  HEAPF32[$214>>2] = $216;
  $217 = $i;
  $218 = $1;
  $219 = (($218) + ($217<<2)|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = ((($220)) + 28|0);
  $222 = +HEAPF32[$221>>2];
  $223 = $0;
  $224 = ((($223)) + 16|0);
  $225 = ((($224)) + 4|0);
  $226 = +HEAPF32[$225>>2];
  $227 = $222 * $226;
  $228 = $i;
  $229 = $1;
  $230 = (($229) + ($228<<2)|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = ((($231)) + 260|0);
  $233 = ((($232)) + 4|0);
  $234 = +HEAPF32[$233>>2];
  $235 = $234 + $227;
  HEAPF32[$233>>2] = $235;
  $236 = $i;
  $237 = $1;
  $238 = (($237) + ($236<<2)|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = ((($239)) + 28|0);
  $241 = +HEAPF32[$240>>2];
  $242 = $0;
  $243 = ((($242)) + 16|0);
  $244 = ((($243)) + 8|0);
  $245 = +HEAPF32[$244>>2];
  $246 = $241 * $245;
  $247 = $i;
  $248 = $1;
  $249 = (($248) + ($247<<2)|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = ((($250)) + 260|0);
  $252 = ((($251)) + 8|0);
  $253 = +HEAPF32[$252>>2];
  $254 = $253 + $246;
  HEAPF32[$252>>2] = $254;
  $255 = $i;
  $256 = (($255) + 1)|0;
  $i = $256;
 }
 $m = 0;
 $257 = $4;
 $258 = $257<<3;
 $259 = (($258) + 15)|0;
 $$alloca_mul25 = $259;
 $260 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul25)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $261 = $260;
 $262 = (($261) - 1)|0;
 $263 = $262 | 15;
 $264 = (($263) + 1)|0;
 $265 = $264;
 $info = $265;
 $266 = $4;
 $267 = $266<<2;
 $268 = (($267) + 15)|0;
 $$alloca_mul27 = $268;
 $269 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul27)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $270 = $269;
 $271 = (($270) - 1)|0;
 $272 = $271 | 15;
 $273 = (($272) + 1)|0;
 $274 = $273;
 $ofs = $274;
 $i = 0;
 $j = 0;
 while(1) {
  $275 = $j;
  $276 = $4;
  $277 = ($275|0)<($276|0);
  if (!($277)) {
   break;
  }
  $278 = $j;
  $279 = $joint;
  $280 = (($279) + ($278<<2)|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = ((($281)) + 20|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = ((($283)) + 8|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $j;
  $287 = $joint;
  $288 = (($287) + ($286<<2)|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = $info;
  $291 = $i;
  $292 = (($290) + ($291<<3)|0);
  FUNCTION_TABLE_vii[$285 & 127]($289,$292);
  $293 = $i;
  $294 = $info;
  $295 = (($294) + ($293<<3)|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = ($296|0)>=(0);
  if ($297) {
   $298 = $i;
   $299 = $info;
   $300 = (($299) + ($298<<3)|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = ($301|0)<=(6);
   if ($302) {
    $303 = $i;
    $304 = $info;
    $305 = (($304) + ($303<<3)|0);
    $306 = ((($305)) + 4|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = ($307|0)>=(0);
    if ($308) {
     $309 = $i;
     $310 = $info;
     $311 = (($310) + ($309<<3)|0);
     $312 = ((($311)) + 4|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = $i;
     $315 = $info;
     $316 = (($315) + ($314<<3)|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = ($313|0)<=($317|0);
     if (!($318)) {
      label = 16;
     }
    } else {
     label = 16;
    }
   } else {
    label = 16;
   }
  } else {
   label = 16;
  }
  if ((label|0) == 16) {
   label = 0;
   HEAP32[$vararg_buffer>>2] = 3811;
   $vararg_ptr6 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 3802;
   _dDebug(1,3689,$vararg_buffer);
  }
  $319 = $i;
  $320 = $info;
  $321 = (($320) + ($319<<3)|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = ($322|0)>(0);
  $324 = $j;
  $325 = $joint;
  $326 = (($325) + ($324<<2)|0);
  $327 = HEAP32[$326>>2]|0;
  if ($323) {
   $328 = $i;
   $329 = $joint;
   $330 = (($329) + ($328<<2)|0);
   HEAP32[$330>>2] = $327;
   $331 = $i;
   $332 = $i;
   $333 = $joint;
   $334 = (($333) + ($332<<2)|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = ((($335)) + 16|0);
   HEAP32[$336>>2] = $331;
   $337 = $i;
   $338 = (($337) + 1)|0;
   $i = $338;
  } else {
   $339 = ((($327)) + 16|0);
   HEAP32[$339>>2] = -1;
  }
  $340 = $j;
  $341 = (($340) + 1)|0;
  $j = $341;
 }
 $342 = $i;
 $4 = $342;
 $i = 0;
 while(1) {
  $343 = $i;
  $344 = $4;
  $345 = ($343|0)<($344|0);
  if (!($345)) {
   break;
  }
  $346 = $i;
  $347 = $info;
  $348 = (($347) + ($346<<3)|0);
  $349 = ((($348)) + 4|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = $i;
  $352 = $info;
  $353 = (($352) + ($351<<3)|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = ($350|0)==($354|0);
  if ($355) {
   $356 = $m;
   $357 = $i;
   $358 = $ofs;
   $359 = (($358) + ($357<<2)|0);
   HEAP32[$359>>2] = $356;
   $360 = $i;
   $361 = $info;
   $362 = (($361) + ($360<<3)|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = $m;
   $365 = (($364) + ($363))|0;
   $m = $365;
  }
  $366 = $i;
  $367 = (($366) + 1)|0;
  $i = $367;
 }
 $368 = $m;
 $nub = $368;
 $i = 0;
 while(1) {
  $369 = $i;
  $370 = $4;
  $371 = ($369|0)<($370|0);
  if (!($371)) {
   break;
  }
  $372 = $i;
  $373 = $info;
  $374 = (($373) + ($372<<3)|0);
  $375 = ((($374)) + 4|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = ($376|0)>(0);
  if ($377) {
   $378 = $i;
   $379 = $info;
   $380 = (($379) + ($378<<3)|0);
   $381 = ((($380)) + 4|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = $i;
   $384 = $info;
   $385 = (($384) + ($383<<3)|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = ($382|0)<($386|0);
   if ($387) {
    $388 = $m;
    $389 = $i;
    $390 = $ofs;
    $391 = (($390) + ($389<<2)|0);
    HEAP32[$391>>2] = $388;
    $392 = $i;
    $393 = $info;
    $394 = (($393) + ($392<<3)|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = $m;
    $397 = (($396) + ($395))|0;
    $m = $397;
   }
  }
  $398 = $i;
  $399 = (($398) + 1)|0;
  $i = $399;
 }
 $i = 0;
 while(1) {
  $400 = $i;
  $401 = $4;
  $402 = ($400|0)<($401|0);
  if (!($402)) {
   break;
  }
  $403 = $i;
  $404 = $info;
  $405 = (($404) + ($403<<3)|0);
  $406 = ((($405)) + 4|0);
  $407 = HEAP32[$406>>2]|0;
  $408 = ($407|0)==(0);
  if ($408) {
   $409 = $m;
   $410 = $i;
   $411 = $ofs;
   $412 = (($411) + ($410<<2)|0);
   HEAP32[$412>>2] = $409;
   $413 = $i;
   $414 = $info;
   $415 = (($414) + ($413<<3)|0);
   $416 = HEAP32[$415>>2]|0;
   $417 = $m;
   $418 = (($417) + ($416))|0;
   $m = $418;
  }
  $419 = $i;
  $420 = (($419) + 1)|0;
  $i = $420;
 }
 $421 = $2;
 $422 = $421<<3;
 $423 = $422<<2;
 $424 = (($423) + 15)|0;
 $$alloca_mul29 = $424;
 $425 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul29)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $426 = $425;
 $427 = (($426) - 1)|0;
 $428 = $427 | 15;
 $429 = (($428) + 1)|0;
 $430 = $429;
 $cforce = $430;
 $431 = $cforce;
 $432 = $2;
 $433 = $432<<3;
 _dSetZero($431,$433);
 $434 = $m;
 $435 = ($434|0)>(0);
 L50: do {
  if ($435) {
   $436 = $m;
   $437 = $436<<2;
   $438 = (($437) + 15)|0;
   $$alloca_mul31 = $438;
   $439 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul31)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $440 = $439;
   $441 = (($440) - 1)|0;
   $442 = $441 | 15;
   $443 = (($442) + 1)|0;
   $444 = $443;
   $c = $444;
   $445 = $m;
   $446 = $445<<2;
   $447 = (($446) + 15)|0;
   $$alloca_mul33 = $447;
   $448 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul33)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $449 = $448;
   $450 = (($449) - 1)|0;
   $451 = $450 | 15;
   $452 = (($451) + 1)|0;
   $453 = $452;
   $cfm = $453;
   $454 = $m;
   $455 = $454<<2;
   $456 = (($455) + 15)|0;
   $$alloca_mul35 = $456;
   $457 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul35)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $458 = $457;
   $459 = (($458) - 1)|0;
   $460 = $459 | 15;
   $461 = (($460) + 1)|0;
   $462 = $461;
   $lo = $462;
   $463 = $m;
   $464 = $463<<2;
   $465 = (($464) + 15)|0;
   $$alloca_mul37 = $465;
   $466 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul37)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $467 = $466;
   $468 = (($467) - 1)|0;
   $469 = $468 | 15;
   $470 = (($469) + 1)|0;
   $471 = $470;
   $hi = $471;
   $472 = $m;
   $473 = $472<<2;
   $$alloca_mul39 = $473;
   $474 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul39)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $findex = $474;
   $475 = $c;
   $476 = $m;
   _dSetZero($475,$476);
   $477 = $cfm;
   $478 = $m;
   $479 = $0;
   $480 = ((($479)) + 36|0);
   $481 = +HEAPF32[$480>>2];
   _dSetValue($477,$478,$481);
   $482 = $lo;
   $483 = $m;
   $484 = +HEAPF32[180>>2];
   $485 = -$484;
   _dSetValue($482,$483,$485);
   $486 = $hi;
   $487 = $m;
   $488 = +HEAPF32[180>>2];
   _dSetValue($486,$487,$488);
   $i = 0;
   while(1) {
    $489 = $i;
    $490 = $m;
    $491 = ($489|0)<($490|0);
    if (!($491)) {
     break;
    }
    $492 = $i;
    $493 = $findex;
    $494 = (($493) + ($492<<2)|0);
    HEAP32[$494>>2] = -1;
    $495 = $i;
    $496 = (($495) + 1)|0;
    $i = $496;
   }
   $497 = $m;
   $498 = $497<<1;
   $499 = $498<<3;
   $500 = $499<<2;
   $501 = (($500) + 15)|0;
   $$alloca_mul41 = $501;
   $502 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul41)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $503 = $502;
   $504 = (($503) - 1)|0;
   $505 = $504 | 15;
   $506 = (($505) + 1)|0;
   $507 = $506;
   $J = $507;
   $508 = $J;
   $509 = $m;
   $510 = $509<<1;
   $511 = $510<<3;
   _dSetZero($508,$511);
   $512 = ((($Jinfo)) + 24|0);
   HEAP32[$512>>2] = 8;
   $513 = $stepsize1;
   HEAPF32[$Jinfo>>2] = $513;
   $514 = $0;
   $515 = ((($514)) + 32|0);
   $516 = +HEAPF32[$515>>2];
   $517 = ((($Jinfo)) + 4|0);
   HEAPF32[$517>>2] = $516;
   $i = 0;
   while(1) {
    $518 = $i;
    $519 = $4;
    $520 = ($518|0)<($519|0);
    if (!($520)) {
     break;
    }
    $521 = $J;
    $522 = $i;
    $523 = $ofs;
    $524 = (($523) + ($522<<2)|0);
    $525 = HEAP32[$524>>2]|0;
    $526 = $525<<4;
    $527 = (($521) + ($526<<2)|0);
    $528 = ((($Jinfo)) + 8|0);
    HEAP32[$528>>2] = $527;
    $529 = ((($Jinfo)) + 8|0);
    $530 = HEAP32[$529>>2]|0;
    $531 = ((($530)) + 16|0);
    $532 = ((($Jinfo)) + 12|0);
    HEAP32[$532>>2] = $531;
    $533 = ((($Jinfo)) + 8|0);
    $534 = HEAP32[$533>>2]|0;
    $535 = $i;
    $536 = $info;
    $537 = (($536) + ($535<<3)|0);
    $538 = HEAP32[$537>>2]|0;
    $539 = $538<<3;
    $540 = (($534) + ($539<<2)|0);
    $541 = ((($Jinfo)) + 16|0);
    HEAP32[$541>>2] = $540;
    $542 = ((($Jinfo)) + 16|0);
    $543 = HEAP32[$542>>2]|0;
    $544 = ((($543)) + 16|0);
    $545 = ((($Jinfo)) + 20|0);
    HEAP32[$545>>2] = $544;
    $546 = $c;
    $547 = $i;
    $548 = $ofs;
    $549 = (($548) + ($547<<2)|0);
    $550 = HEAP32[$549>>2]|0;
    $551 = (($546) + ($550<<2)|0);
    $552 = ((($Jinfo)) + 28|0);
    HEAP32[$552>>2] = $551;
    $553 = $cfm;
    $554 = $i;
    $555 = $ofs;
    $556 = (($555) + ($554<<2)|0);
    $557 = HEAP32[$556>>2]|0;
    $558 = (($553) + ($557<<2)|0);
    $559 = ((($Jinfo)) + 32|0);
    HEAP32[$559>>2] = $558;
    $560 = $lo;
    $561 = $i;
    $562 = $ofs;
    $563 = (($562) + ($561<<2)|0);
    $564 = HEAP32[$563>>2]|0;
    $565 = (($560) + ($564<<2)|0);
    $566 = ((($Jinfo)) + 36|0);
    HEAP32[$566>>2] = $565;
    $567 = $hi;
    $568 = $i;
    $569 = $ofs;
    $570 = (($569) + ($568<<2)|0);
    $571 = HEAP32[$570>>2]|0;
    $572 = (($567) + ($571<<2)|0);
    $573 = ((($Jinfo)) + 40|0);
    HEAP32[$573>>2] = $572;
    $574 = $findex;
    $575 = $i;
    $576 = $ofs;
    $577 = (($576) + ($575<<2)|0);
    $578 = HEAP32[$577>>2]|0;
    $579 = (($574) + ($578<<2)|0);
    $580 = ((($Jinfo)) + 44|0);
    HEAP32[$580>>2] = $579;
    $581 = $i;
    $582 = $joint;
    $583 = (($582) + ($581<<2)|0);
    $584 = HEAP32[$583>>2]|0;
    $585 = ((($584)) + 20|0);
    $586 = HEAP32[$585>>2]|0;
    $587 = ((($586)) + 12|0);
    $588 = HEAP32[$587>>2]|0;
    $589 = $i;
    $590 = $joint;
    $591 = (($590) + ($589<<2)|0);
    $592 = HEAP32[$591>>2]|0;
    FUNCTION_TABLE_vii[$588 & 127]($592,$Jinfo);
    $j = 0;
    while(1) {
     $593 = $j;
     $594 = $i;
     $595 = $info;
     $596 = (($595) + ($594<<3)|0);
     $597 = HEAP32[$596>>2]|0;
     $598 = ($593|0)<($597|0);
     $599 = $i;
     if (!($598)) {
      break;
     }
     $600 = $ofs;
     $601 = (($600) + ($599<<2)|0);
     $602 = HEAP32[$601>>2]|0;
     $603 = $j;
     $604 = (($602) + ($603))|0;
     $605 = $findex;
     $606 = (($605) + ($604<<2)|0);
     $607 = HEAP32[$606>>2]|0;
     $608 = ($607|0)>=(0);
     if ($608) {
      $609 = $i;
      $610 = $ofs;
      $611 = (($610) + ($609<<2)|0);
      $612 = HEAP32[$611>>2]|0;
      $613 = $i;
      $614 = $ofs;
      $615 = (($614) + ($613<<2)|0);
      $616 = HEAP32[$615>>2]|0;
      $617 = $j;
      $618 = (($616) + ($617))|0;
      $619 = $findex;
      $620 = (($619) + ($618<<2)|0);
      $621 = HEAP32[$620>>2]|0;
      $622 = (($621) + ($612))|0;
      HEAP32[$620>>2] = $622;
     }
     $623 = $j;
     $624 = (($623) + 1)|0;
     $j = $624;
    }
    $625 = (($599) + 1)|0;
    $i = $625;
   }
   $626 = $m;
   $627 = $626<<1;
   $628 = $627<<3;
   $629 = $628<<2;
   $630 = (($629) + 15)|0;
   $$alloca_mul43 = $630;
   $631 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul43)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $632 = $631;
   $633 = (($632) - 1)|0;
   $634 = $633 | 15;
   $635 = (($634) + 1)|0;
   $636 = $635;
   $JinvM = $636;
   $637 = $JinvM;
   $638 = $m;
   $639 = $638<<1;
   $640 = $639<<3;
   _dSetZero($637,$640);
   $i = 0;
   while(1) {
    $641 = $i;
    $642 = $4;
    $643 = ($641|0)<($642|0);
    if (!($643)) {
     break;
    }
    $644 = $i;
    $645 = $joint;
    $646 = (($645) + ($644<<2)|0);
    $647 = HEAP32[$646>>2]|0;
    $648 = ((($647)) + 28|0);
    $649 = ((($648)) + 4|0);
    $650 = HEAP32[$649>>2]|0;
    $651 = ((($650)) + 16|0);
    $652 = HEAP32[$651>>2]|0;
    $b = $652;
    $653 = $b;
    $654 = $1;
    $655 = (($654) + ($653<<2)|0);
    $656 = HEAP32[$655>>2]|0;
    $657 = ((($656)) + 144|0);
    $658 = +HEAPF32[$657>>2];
    $body_invMass = $658;
    $659 = $invI;
    $660 = $b;
    $661 = ($660*12)|0;
    $662 = (($659) + ($661<<2)|0);
    $body_invI = $662;
    $663 = $J;
    $664 = $i;
    $665 = $ofs;
    $666 = (($665) + ($664<<2)|0);
    $667 = HEAP32[$666>>2]|0;
    $668 = $667<<4;
    $669 = (($663) + ($668<<2)|0);
    $Jsrc = $669;
    $670 = $JinvM;
    $671 = $i;
    $672 = $ofs;
    $673 = (($672) + ($671<<2)|0);
    $674 = HEAP32[$673>>2]|0;
    $675 = $674<<4;
    $676 = (($670) + ($675<<2)|0);
    $Jdst = $676;
    $677 = $i;
    $678 = $info;
    $679 = (($678) + ($677<<3)|0);
    $680 = HEAP32[$679>>2]|0;
    $681 = (($680) - 1)|0;
    $j = $681;
    while(1) {
     $682 = $j;
     $683 = ($682|0)>=(0);
     if (!($683)) {
      break;
     }
     $k = 0;
     while(1) {
      $684 = $k;
      $685 = ($684|0)<(3);
      if (!($685)) {
       break;
      }
      $686 = $k;
      $687 = $Jsrc;
      $688 = (($687) + ($686<<2)|0);
      $689 = +HEAPF32[$688>>2];
      $690 = $body_invMass;
      $691 = $689 * $690;
      $692 = $k;
      $693 = $Jdst;
      $694 = (($693) + ($692<<2)|0);
      HEAPF32[$694>>2] = $691;
      $695 = $k;
      $696 = (($695) + 1)|0;
      $k = $696;
     }
     $697 = $Jdst;
     $698 = ((($697)) + 16|0);
     $699 = $Jsrc;
     $700 = ((($699)) + 16|0);
     $701 = $body_invI;
     _dMULTIPLY0_133($698,$700,$701);
     $702 = $Jsrc;
     $703 = ((($702)) + 32|0);
     $Jsrc = $703;
     $704 = $Jdst;
     $705 = ((($704)) + 32|0);
     $Jdst = $705;
     $706 = $j;
     $707 = (($706) + -1)|0;
     $j = $707;
    }
    $708 = $i;
    $709 = $joint;
    $710 = (($709) + ($708<<2)|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = ((($711)) + 28|0);
    $713 = ((($712)) + 12|0);
    $714 = ((($713)) + 4|0);
    $715 = HEAP32[$714>>2]|0;
    $716 = ($715|0)!=(0|0);
    L78: do {
     if ($716) {
      $717 = $i;
      $718 = $joint;
      $719 = (($718) + ($717<<2)|0);
      $720 = HEAP32[$719>>2]|0;
      $721 = ((($720)) + 28|0);
      $722 = ((($721)) + 12|0);
      $723 = ((($722)) + 4|0);
      $724 = HEAP32[$723>>2]|0;
      $725 = ((($724)) + 16|0);
      $726 = HEAP32[$725>>2]|0;
      $b = $726;
      $727 = $b;
      $728 = $1;
      $729 = (($728) + ($727<<2)|0);
      $730 = HEAP32[$729>>2]|0;
      $731 = ((($730)) + 144|0);
      $732 = +HEAPF32[$731>>2];
      $body_invMass = $732;
      $733 = $invI;
      $734 = $b;
      $735 = ($734*12)|0;
      $736 = (($733) + ($735<<2)|0);
      $body_invI = $736;
      $737 = $i;
      $738 = $info;
      $739 = (($738) + ($737<<3)|0);
      $740 = HEAP32[$739>>2]|0;
      $741 = (($740) - 1)|0;
      $j = $741;
      while(1) {
       $742 = $j;
       $743 = ($742|0)>=(0);
       if (!($743)) {
        break L78;
       }
       $k = 0;
       while(1) {
        $744 = $k;
        $745 = ($744|0)<(3);
        if (!($745)) {
         break;
        }
        $746 = $k;
        $747 = $Jsrc;
        $748 = (($747) + ($746<<2)|0);
        $749 = +HEAPF32[$748>>2];
        $750 = $body_invMass;
        $751 = $749 * $750;
        $752 = $k;
        $753 = $Jdst;
        $754 = (($753) + ($752<<2)|0);
        HEAPF32[$754>>2] = $751;
        $755 = $k;
        $756 = (($755) + 1)|0;
        $k = $756;
       }
       $757 = $Jdst;
       $758 = ((($757)) + 16|0);
       $759 = $Jsrc;
       $760 = ((($759)) + 16|0);
       $761 = $body_invI;
       _dMULTIPLY0_133($758,$760,$761);
       $762 = $Jsrc;
       $763 = ((($762)) + 32|0);
       $Jsrc = $763;
       $764 = $Jdst;
       $765 = ((($764)) + 32|0);
       $Jdst = $765;
       $766 = $j;
       $767 = (($766) + -1)|0;
       $j = $767;
      }
     }
    } while(0);
    $768 = $i;
    $769 = (($768) + 1)|0;
    $i = $769;
   }
   $770 = $m;
   $771 = ($770|0)>(1);
   $772 = $m;
   if ($771) {
    $773 = (($772) - 1)|0;
    $774 = $773 | 3;
    $775 = (($774) + 1)|0;
    $776 = $775;
   } else {
    $776 = $772;
   }
   $mskip = $776;
   $777 = $m;
   $778 = $mskip;
   $779 = Math_imul($777, $778)|0;
   $780 = $779<<2;
   $781 = (($780) + 15)|0;
   $$alloca_mul45 = $781;
   $782 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul45)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $783 = $782;
   $784 = (($783) - 1)|0;
   $785 = $784 | 15;
   $786 = (($785) + 1)|0;
   $787 = $786;
   $A = $787;
   $788 = $A;
   $789 = $m;
   $790 = $mskip;
   $791 = Math_imul($789, $790)|0;
   _dSetZero($788,$791);
   $i = 0;
   while(1) {
    $792 = $i;
    $793 = $2;
    $794 = ($792|0)<($793|0);
    if (!($794)) {
     break;
    }
    $795 = $i;
    $796 = $1;
    $797 = (($796) + ($795<<2)|0);
    $798 = HEAP32[$797>>2]|0;
    $799 = ((($798)) + 20|0);
    $800 = HEAP32[$799>>2]|0;
    $n1 = $800;
    while(1) {
     $801 = $n1;
     $802 = ($801|0)!=(0|0);
     if (!($802)) {
      break;
     }
     $803 = $n1;
     $804 = ((($803)) + 8|0);
     $805 = HEAP32[$804>>2]|0;
     $n2 = $805;
     while(1) {
      $806 = $n2;
      $807 = ($806|0)!=(0|0);
      $808 = $n1;
      if (!($807)) {
       break;
      }
      $809 = HEAP32[$808>>2]|0;
      $810 = ((($809)) + 16|0);
      $811 = HEAP32[$810>>2]|0;
      $j1 = $811;
      $812 = $n2;
      $813 = HEAP32[$812>>2]|0;
      $814 = ((($813)) + 16|0);
      $815 = HEAP32[$814>>2]|0;
      $j2 = $815;
      $816 = $j1;
      $817 = $ofs;
      $818 = (($817) + ($816<<2)|0);
      $819 = HEAP32[$818>>2]|0;
      $820 = $j2;
      $821 = $ofs;
      $822 = (($821) + ($820<<2)|0);
      $823 = HEAP32[$822>>2]|0;
      $824 = ($819|0)<($823|0);
      if ($824) {
       $825 = $j1;
       $tmp1 = $825;
       $826 = $j2;
       $j1 = $826;
       $827 = $tmp1;
       $j2 = $827;
      }
      $828 = $j1;
      $829 = ($828|0)==(-1);
      $830 = $j2;
      $831 = ($830|0)==(-1);
      $or$cond = $829 | $831;
      if (!($or$cond)) {
       $832 = $j1;
       $833 = $joint;
       $834 = (($833) + ($832<<2)|0);
       $835 = HEAP32[$834>>2]|0;
       $836 = ((($835)) + 28|0);
       $837 = ((($836)) + 12|0);
       $838 = ((($837)) + 4|0);
       $839 = HEAP32[$838>>2]|0;
       $840 = $i;
       $841 = $1;
       $842 = (($841) + ($840<<2)|0);
       $843 = HEAP32[$842>>2]|0;
       $844 = ($839|0)==($843|0);
       $845 = $844&1;
       $jb1 = $845;
       $846 = $j2;
       $847 = $joint;
       $848 = (($847) + ($846<<2)|0);
       $849 = HEAP32[$848>>2]|0;
       $850 = ((($849)) + 28|0);
       $851 = ((($850)) + 12|0);
       $852 = ((($851)) + 4|0);
       $853 = HEAP32[$852>>2]|0;
       $854 = $i;
       $855 = $1;
       $856 = (($855) + ($854<<2)|0);
       $857 = HEAP32[$856>>2]|0;
       $858 = ($853|0)==($857|0);
       $859 = $858&1;
       $jb2 = $859;
       $860 = $j1;
       $861 = $joint;
       $862 = (($861) + ($860<<2)|0);
       $863 = HEAP32[$862>>2]|0;
       $864 = ((($863)) + 28|0);
       $865 = ((($864)) + 12|0);
       $866 = ((($865)) + 4|0);
       $867 = HEAP32[$866>>2]|0;
       $868 = ($867|0)!=(0|0);
       $869 = $jb1;
       $870 = ($869|0)==(0);
       $or$cond3 = $868 | $870;
       if (!($or$cond3)) {
        HEAP32[$vararg_buffer7>>2] = 3811;
        $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
        HEAP32[$vararg_ptr10>>2] = 3802;
        _dDebug(1,3834,$vararg_buffer7);
       }
       $871 = $j2;
       $872 = $joint;
       $873 = (($872) + ($871<<2)|0);
       $874 = HEAP32[$873>>2]|0;
       $875 = ((($874)) + 28|0);
       $876 = ((($875)) + 12|0);
       $877 = ((($876)) + 4|0);
       $878 = HEAP32[$877>>2]|0;
       $879 = ($878|0)!=(0|0);
       $880 = $jb2;
       $881 = ($880|0)==(0);
       $or$cond5 = $879 | $881;
       if (!($or$cond5)) {
        HEAP32[$vararg_buffer11>>2] = 3811;
        $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
        HEAP32[$vararg_ptr14>>2] = 3802;
        _dDebug(1,3900,$vararg_buffer11);
       }
       $882 = $A;
       $883 = $j1;
       $884 = $ofs;
       $885 = (($884) + ($883<<2)|0);
       $886 = HEAP32[$885>>2]|0;
       $887 = $mskip;
       $888 = Math_imul($886, $887)|0;
       $889 = (($882) + ($888<<2)|0);
       $890 = $j2;
       $891 = $ofs;
       $892 = (($891) + ($890<<2)|0);
       $893 = HEAP32[$892>>2]|0;
       $894 = (($889) + ($893<<2)|0);
       $895 = $JinvM;
       $896 = $j1;
       $897 = $ofs;
       $898 = (($897) + ($896<<2)|0);
       $899 = HEAP32[$898>>2]|0;
       $900 = $899<<4;
       $901 = (($895) + ($900<<2)|0);
       $902 = $jb1;
       $903 = $902<<3;
       $904 = $j1;
       $905 = $info;
       $906 = (($905) + ($904<<3)|0);
       $907 = HEAP32[$906>>2]|0;
       $908 = Math_imul($903, $907)|0;
       $909 = (($901) + ($908<<2)|0);
       $910 = $J;
       $911 = $j2;
       $912 = $ofs;
       $913 = (($912) + ($911<<2)|0);
       $914 = HEAP32[$913>>2]|0;
       $915 = $914<<4;
       $916 = (($910) + ($915<<2)|0);
       $917 = $jb2;
       $918 = $917<<3;
       $919 = $j2;
       $920 = $info;
       $921 = (($920) + ($919<<3)|0);
       $922 = HEAP32[$921>>2]|0;
       $923 = Math_imul($918, $922)|0;
       $924 = (($916) + ($923<<2)|0);
       $925 = $j1;
       $926 = $info;
       $927 = (($926) + ($925<<3)|0);
       $928 = HEAP32[$927>>2]|0;
       $929 = $j2;
       $930 = $info;
       $931 = (($930) + ($929<<3)|0);
       $932 = HEAP32[$931>>2]|0;
       $933 = $mskip;
       __ZL16MultiplyAdd2_p8rPfS_S_iii($894,$909,$924,$928,$932,$933);
      }
      $934 = $n2;
      $935 = ((($934)) + 8|0);
      $936 = HEAP32[$935>>2]|0;
      $n2 = $936;
     }
     $937 = ((($808)) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $n1 = $938;
    }
    $939 = $i;
    $940 = (($939) + 1)|0;
    $i = $940;
   }
   $i = 0;
   while(1) {
    $941 = $i;
    $942 = $4;
    $943 = ($941|0)<($942|0);
    if (!($943)) {
     break;
    }
    $944 = $A;
    $945 = $i;
    $946 = $ofs;
    $947 = (($946) + ($945<<2)|0);
    $948 = HEAP32[$947>>2]|0;
    $949 = $mskip;
    $950 = (($949) + 1)|0;
    $951 = Math_imul($948, $950)|0;
    $952 = (($944) + ($951<<2)|0);
    $953 = $JinvM;
    $954 = $i;
    $955 = $ofs;
    $956 = (($955) + ($954<<2)|0);
    $957 = HEAP32[$956>>2]|0;
    $958 = $957<<4;
    $959 = (($953) + ($958<<2)|0);
    $960 = $J;
    $961 = $i;
    $962 = $ofs;
    $963 = (($962) + ($961<<2)|0);
    $964 = HEAP32[$963>>2]|0;
    $965 = $964<<4;
    $966 = (($960) + ($965<<2)|0);
    $967 = $i;
    $968 = $info;
    $969 = (($968) + ($967<<3)|0);
    $970 = HEAP32[$969>>2]|0;
    $971 = $i;
    $972 = $info;
    $973 = (($972) + ($971<<3)|0);
    $974 = HEAP32[$973>>2]|0;
    $975 = $mskip;
    __ZL13Multiply2_p8rPfS_S_iii($952,$959,$966,$970,$974,$975);
    $976 = $i;
    $977 = $joint;
    $978 = (($977) + ($976<<2)|0);
    $979 = HEAP32[$978>>2]|0;
    $980 = ((($979)) + 28|0);
    $981 = ((($980)) + 12|0);
    $982 = ((($981)) + 4|0);
    $983 = HEAP32[$982>>2]|0;
    $984 = ($983|0)!=(0|0);
    if ($984) {
     $985 = $A;
     $986 = $i;
     $987 = $ofs;
     $988 = (($987) + ($986<<2)|0);
     $989 = HEAP32[$988>>2]|0;
     $990 = $mskip;
     $991 = (($990) + 1)|0;
     $992 = Math_imul($989, $991)|0;
     $993 = (($985) + ($992<<2)|0);
     $994 = $JinvM;
     $995 = $i;
     $996 = $ofs;
     $997 = (($996) + ($995<<2)|0);
     $998 = HEAP32[$997>>2]|0;
     $999 = $998<<4;
     $1000 = (($994) + ($999<<2)|0);
     $1001 = $i;
     $1002 = $info;
     $1003 = (($1002) + ($1001<<3)|0);
     $1004 = HEAP32[$1003>>2]|0;
     $1005 = $1004<<3;
     $1006 = (($1000) + ($1005<<2)|0);
     $1007 = $J;
     $1008 = $i;
     $1009 = $ofs;
     $1010 = (($1009) + ($1008<<2)|0);
     $1011 = HEAP32[$1010>>2]|0;
     $1012 = $1011<<4;
     $1013 = (($1007) + ($1012<<2)|0);
     $1014 = $i;
     $1015 = $info;
     $1016 = (($1015) + ($1014<<3)|0);
     $1017 = HEAP32[$1016>>2]|0;
     $1018 = $1017<<3;
     $1019 = (($1013) + ($1018<<2)|0);
     $1020 = $i;
     $1021 = $info;
     $1022 = (($1021) + ($1020<<3)|0);
     $1023 = HEAP32[$1022>>2]|0;
     $1024 = $i;
     $1025 = $info;
     $1026 = (($1025) + ($1024<<3)|0);
     $1027 = HEAP32[$1026>>2]|0;
     $1028 = $mskip;
     __ZL16MultiplyAdd2_p8rPfS_S_iii($993,$1006,$1019,$1023,$1027,$1028);
    }
    $1029 = $i;
    $1030 = (($1029) + 1)|0;
    $i = $1030;
   }
   $i = 0;
   while(1) {
    $1031 = $i;
    $1032 = $m;
    $1033 = ($1031|0)<($1032|0);
    if (!($1033)) {
     break;
    }
    $1034 = $i;
    $1035 = $cfm;
    $1036 = (($1035) + ($1034<<2)|0);
    $1037 = +HEAPF32[$1036>>2];
    $1038 = $stepsize1;
    $1039 = $1037 * $1038;
    $1040 = $i;
    $1041 = $mskip;
    $1042 = Math_imul($1040, $1041)|0;
    $1043 = $i;
    $1044 = (($1042) + ($1043))|0;
    $1045 = $A;
    $1046 = (($1045) + ($1044<<2)|0);
    $1047 = +HEAPF32[$1046>>2];
    $1048 = $1047 + $1039;
    HEAPF32[$1046>>2] = $1048;
    $1049 = $i;
    $1050 = (($1049) + 1)|0;
    $i = $1050;
   }
   $1051 = $2;
   $1052 = $1051<<3;
   $1053 = $1052<<2;
   $1054 = (($1053) + 15)|0;
   $$alloca_mul47 = $1054;
   $1055 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul47)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $1056 = $1055;
   $1057 = (($1056) - 1)|0;
   $1058 = $1057 | 15;
   $1059 = (($1058) + 1)|0;
   $1060 = $1059;
   $tmp12 = $1060;
   $1061 = $tmp12;
   $1062 = $2;
   $1063 = $1062<<3;
   _dSetZero($1061,$1063);
   $i = 0;
   while(1) {
    $1064 = $i;
    $1065 = $2;
    $1066 = ($1064|0)<($1065|0);
    if (!($1066)) {
     break;
    }
    $1067 = $i;
    $1068 = $1;
    $1069 = (($1068) + ($1067<<2)|0);
    $1070 = HEAP32[$1069>>2]|0;
    $1071 = ((($1070)) + 144|0);
    $1072 = +HEAPF32[$1071>>2];
    $body_invMass3 = $1072;
    $1073 = $invI;
    $1074 = $i;
    $1075 = ($1074*12)|0;
    $1076 = (($1073) + ($1075<<2)|0);
    $body_invI4 = $1076;
    $j = 0;
    while(1) {
     $1077 = $j;
     $1078 = ($1077|0)<(3);
     if (!($1078)) {
      break;
     }
     $1079 = $j;
     $1080 = $i;
     $1081 = $1;
     $1082 = (($1081) + ($1080<<2)|0);
     $1083 = HEAP32[$1082>>2]|0;
     $1084 = ((($1083)) + 260|0);
     $1085 = (($1084) + ($1079<<2)|0);
     $1086 = +HEAPF32[$1085>>2];
     $1087 = $body_invMass3;
     $1088 = $1086 * $1087;
     $1089 = $j;
     $1090 = $i;
     $1091 = $1;
     $1092 = (($1091) + ($1090<<2)|0);
     $1093 = HEAP32[$1092>>2]|0;
     $1094 = ((($1093)) + 228|0);
     $1095 = (($1094) + ($1089<<2)|0);
     $1096 = +HEAPF32[$1095>>2];
     $1097 = $stepsize1;
     $1098 = $1096 * $1097;
     $1099 = $1088 + $1098;
     $1100 = $i;
     $1101 = $1100<<3;
     $1102 = $j;
     $1103 = (($1101) + ($1102))|0;
     $1104 = $tmp12;
     $1105 = (($1104) + ($1103<<2)|0);
     HEAPF32[$1105>>2] = $1099;
     $1106 = $j;
     $1107 = (($1106) + 1)|0;
     $j = $1107;
    }
    $1108 = $tmp12;
    $1109 = $i;
    $1110 = $1109<<3;
    $1111 = (($1108) + ($1110<<2)|0);
    $1112 = ((($1111)) + 16|0);
    $1113 = $body_invI4;
    $1114 = $i;
    $1115 = $1;
    $1116 = (($1115) + ($1114<<2)|0);
    $1117 = HEAP32[$1116>>2]|0;
    $1118 = ((($1117)) + 276|0);
    _dMULTIPLY0_331($1112,$1113,$1118);
    $j = 0;
    while(1) {
     $1119 = $j;
     $1120 = ($1119|0)<(3);
     if (!($1120)) {
      break;
     }
     $1121 = $j;
     $1122 = $i;
     $1123 = $1;
     $1124 = (($1123) + ($1122<<2)|0);
     $1125 = HEAP32[$1124>>2]|0;
     $1126 = ((($1125)) + 244|0);
     $1127 = (($1126) + ($1121<<2)|0);
     $1128 = +HEAPF32[$1127>>2];
     $1129 = $stepsize1;
     $1130 = $1128 * $1129;
     $1131 = $i;
     $1132 = $1131<<3;
     $1133 = (($1132) + 4)|0;
     $1134 = $j;
     $1135 = (($1133) + ($1134))|0;
     $1136 = $tmp12;
     $1137 = (($1136) + ($1135<<2)|0);
     $1138 = +HEAPF32[$1137>>2];
     $1139 = $1138 + $1130;
     HEAPF32[$1137>>2] = $1139;
     $1140 = $j;
     $1141 = (($1140) + 1)|0;
     $j = $1141;
    }
    $1142 = $i;
    $1143 = (($1142) + 1)|0;
    $i = $1143;
   }
   $1144 = $m;
   $1145 = $1144<<2;
   $1146 = (($1145) + 15)|0;
   $$alloca_mul49 = $1146;
   $1147 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul49)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $1148 = $1147;
   $1149 = (($1148) - 1)|0;
   $1150 = $1149 | 15;
   $1151 = (($1150) + 1)|0;
   $1152 = $1151;
   $rhs = $1152;
   $1153 = $rhs;
   $1154 = $m;
   _dSetZero($1153,$1154);
   $i = 0;
   while(1) {
    $1155 = $i;
    $1156 = $4;
    $1157 = ($1155|0)<($1156|0);
    if (!($1157)) {
     break;
    }
    $1158 = $J;
    $1159 = $i;
    $1160 = $ofs;
    $1161 = (($1160) + ($1159<<2)|0);
    $1162 = HEAP32[$1161>>2]|0;
    $1163 = $1162<<4;
    $1164 = (($1158) + ($1163<<2)|0);
    $JJ = $1164;
    $1165 = $rhs;
    $1166 = $i;
    $1167 = $ofs;
    $1168 = (($1167) + ($1166<<2)|0);
    $1169 = HEAP32[$1168>>2]|0;
    $1170 = (($1165) + ($1169<<2)|0);
    $1171 = $JJ;
    $1172 = $tmp12;
    $1173 = $i;
    $1174 = $joint;
    $1175 = (($1174) + ($1173<<2)|0);
    $1176 = HEAP32[$1175>>2]|0;
    $1177 = ((($1176)) + 28|0);
    $1178 = ((($1177)) + 4|0);
    $1179 = HEAP32[$1178>>2]|0;
    $1180 = ((($1179)) + 16|0);
    $1181 = HEAP32[$1180>>2]|0;
    $1182 = $1181<<3;
    $1183 = (($1172) + ($1182<<2)|0);
    $1184 = $i;
    $1185 = $info;
    $1186 = (($1185) + ($1184<<3)|0);
    $1187 = HEAP32[$1186>>2]|0;
    __ZL13Multiply0_p81PfS_S_i($1170,$1171,$1183,$1187);
    $1188 = $i;
    $1189 = $joint;
    $1190 = (($1189) + ($1188<<2)|0);
    $1191 = HEAP32[$1190>>2]|0;
    $1192 = ((($1191)) + 28|0);
    $1193 = ((($1192)) + 12|0);
    $1194 = ((($1193)) + 4|0);
    $1195 = HEAP32[$1194>>2]|0;
    $1196 = ($1195|0)!=(0|0);
    if ($1196) {
     $1197 = $rhs;
     $1198 = $i;
     $1199 = $ofs;
     $1200 = (($1199) + ($1198<<2)|0);
     $1201 = HEAP32[$1200>>2]|0;
     $1202 = (($1197) + ($1201<<2)|0);
     $1203 = $JJ;
     $1204 = $i;
     $1205 = $info;
     $1206 = (($1205) + ($1204<<3)|0);
     $1207 = HEAP32[$1206>>2]|0;
     $1208 = $1207<<3;
     $1209 = (($1203) + ($1208<<2)|0);
     $1210 = $tmp12;
     $1211 = $i;
     $1212 = $joint;
     $1213 = (($1212) + ($1211<<2)|0);
     $1214 = HEAP32[$1213>>2]|0;
     $1215 = ((($1214)) + 28|0);
     $1216 = ((($1215)) + 12|0);
     $1217 = ((($1216)) + 4|0);
     $1218 = HEAP32[$1217>>2]|0;
     $1219 = ((($1218)) + 16|0);
     $1220 = HEAP32[$1219>>2]|0;
     $1221 = $1220<<3;
     $1222 = (($1210) + ($1221<<2)|0);
     $1223 = $i;
     $1224 = $info;
     $1225 = (($1224) + ($1223<<3)|0);
     $1226 = HEAP32[$1225>>2]|0;
     __ZL16MultiplyAdd0_p81PfS_S_i($1202,$1209,$1222,$1226);
    }
    $1227 = $i;
    $1228 = (($1227) + 1)|0;
    $i = $1228;
   }
   $i = 0;
   while(1) {
    $1229 = $i;
    $1230 = $m;
    $1231 = ($1229|0)<($1230|0);
    if (!($1231)) {
     break;
    }
    $1232 = $i;
    $1233 = $c;
    $1234 = (($1233) + ($1232<<2)|0);
    $1235 = +HEAPF32[$1234>>2];
    $1236 = $stepsize1;
    $1237 = $1235 * $1236;
    $1238 = $i;
    $1239 = $rhs;
    $1240 = (($1239) + ($1238<<2)|0);
    $1241 = +HEAPF32[$1240>>2];
    $1242 = $1237 - $1241;
    $1243 = $i;
    $1244 = $rhs;
    $1245 = (($1244) + ($1243<<2)|0);
    HEAPF32[$1245>>2] = $1242;
    $1246 = $i;
    $1247 = (($1246) + 1)|0;
    $i = $1247;
   }
   $1248 = $m;
   $1249 = $1248<<2;
   $1250 = (($1249) + 15)|0;
   $$alloca_mul51 = $1250;
   $1251 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul51)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $1252 = $1251;
   $1253 = (($1252) - 1)|0;
   $1254 = $1253 | 15;
   $1255 = (($1254) + 1)|0;
   $1256 = $1255;
   $lambda = $1256;
   $1257 = $m;
   $1258 = $1257<<2;
   $1259 = (($1258) + 15)|0;
   $$alloca_mul53 = $1259;
   $1260 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul53)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $1261 = $1260;
   $1262 = (($1261) - 1)|0;
   $1263 = $1262 | 15;
   $1264 = (($1263) + 1)|0;
   $1265 = $1264;
   $residual = $1265;
   $1266 = $m;
   $1267 = $A;
   $1268 = $lambda;
   $1269 = $rhs;
   $1270 = $residual;
   $1271 = $nub;
   $1272 = $lo;
   $1273 = $hi;
   $1274 = $findex;
   __Z9dSolveLCPiPfS_S_S_iS_S_Pi($1266,$1267,$1268,$1269,$1270,$1271,$1272,$1273,$1274);
   $i = 0;
   while(1) {
    $1275 = $i;
    $1276 = $4;
    $1277 = ($1275|0)<($1276|0);
    if (!($1277)) {
     break L50;
    }
    $1278 = $J;
    $1279 = $i;
    $1280 = $ofs;
    $1281 = (($1280) + ($1279<<2)|0);
    $1282 = HEAP32[$1281>>2]|0;
    $1283 = $1282<<4;
    $1284 = (($1278) + ($1283<<2)|0);
    $JJ5 = $1284;
    $1285 = $cforce;
    $1286 = $i;
    $1287 = $joint;
    $1288 = (($1287) + ($1286<<2)|0);
    $1289 = HEAP32[$1288>>2]|0;
    $1290 = ((($1289)) + 28|0);
    $1291 = ((($1290)) + 4|0);
    $1292 = HEAP32[$1291>>2]|0;
    $1293 = ((($1292)) + 16|0);
    $1294 = HEAP32[$1293>>2]|0;
    $1295 = $1294<<3;
    $1296 = (($1285) + ($1295<<2)|0);
    $1297 = $JJ5;
    $1298 = $lambda;
    $1299 = $i;
    $1300 = $ofs;
    $1301 = (($1300) + ($1299<<2)|0);
    $1302 = HEAP32[$1301>>2]|0;
    $1303 = (($1298) + ($1302<<2)|0);
    $1304 = $i;
    $1305 = $info;
    $1306 = (($1305) + ($1304<<3)|0);
    $1307 = HEAP32[$1306>>2]|0;
    __ZL16MultiplyAdd1_8q1PfS_S_i($1296,$1297,$1303,$1307);
    $1308 = $i;
    $1309 = $joint;
    $1310 = (($1309) + ($1308<<2)|0);
    $1311 = HEAP32[$1310>>2]|0;
    $1312 = ((($1311)) + 28|0);
    $1313 = ((($1312)) + 12|0);
    $1314 = ((($1313)) + 4|0);
    $1315 = HEAP32[$1314>>2]|0;
    $1316 = ($1315|0)!=(0|0);
    if ($1316) {
     $1317 = $cforce;
     $1318 = $i;
     $1319 = $joint;
     $1320 = (($1319) + ($1318<<2)|0);
     $1321 = HEAP32[$1320>>2]|0;
     $1322 = ((($1321)) + 28|0);
     $1323 = ((($1322)) + 12|0);
     $1324 = ((($1323)) + 4|0);
     $1325 = HEAP32[$1324>>2]|0;
     $1326 = ((($1325)) + 16|0);
     $1327 = HEAP32[$1326>>2]|0;
     $1328 = $1327<<3;
     $1329 = (($1317) + ($1328<<2)|0);
     $1330 = $JJ5;
     $1331 = $i;
     $1332 = $info;
     $1333 = (($1332) + ($1331<<3)|0);
     $1334 = HEAP32[$1333>>2]|0;
     $1335 = $1334<<3;
     $1336 = (($1330) + ($1335<<2)|0);
     $1337 = $lambda;
     $1338 = $i;
     $1339 = $ofs;
     $1340 = (($1339) + ($1338<<2)|0);
     $1341 = HEAP32[$1340>>2]|0;
     $1342 = (($1337) + ($1341<<2)|0);
     $1343 = $i;
     $1344 = $info;
     $1345 = (($1344) + ($1343<<3)|0);
     $1346 = HEAP32[$1345>>2]|0;
     __ZL16MultiplyAdd1_8q1PfS_S_i($1329,$1336,$1342,$1346);
    }
    $1347 = $i;
    $1348 = (($1347) + 1)|0;
    $i = $1348;
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $1349 = $i;
  $1350 = $2;
  $1351 = ($1349|0)<($1350|0);
  if (!($1351)) {
   break;
  }
  $j = 0;
  while(1) {
   $1352 = $j;
   $1353 = ($1352|0)<(3);
   if (!($1353)) {
    break;
   }
   $1354 = $j;
   $1355 = $i;
   $1356 = $1;
   $1357 = (($1356) + ($1355<<2)|0);
   $1358 = HEAP32[$1357>>2]|0;
   $1359 = ((($1358)) + 260|0);
   $1360 = (($1359) + ($1354<<2)|0);
   $1361 = +HEAPF32[$1360>>2];
   $1362 = $i;
   $1363 = $1362<<3;
   $1364 = $j;
   $1365 = (($1363) + ($1364))|0;
   $1366 = $cforce;
   $1367 = (($1366) + ($1365<<2)|0);
   $1368 = +HEAPF32[$1367>>2];
   $1369 = $1368 + $1361;
   HEAPF32[$1367>>2] = $1369;
   $1370 = $j;
   $1371 = (($1370) + 1)|0;
   $j = $1371;
  }
  $j = 0;
  while(1) {
   $1372 = $j;
   $1373 = ($1372|0)<(3);
   if (!($1373)) {
    break;
   }
   $1374 = $j;
   $1375 = $i;
   $1376 = $1;
   $1377 = (($1376) + ($1375<<2)|0);
   $1378 = HEAP32[$1377>>2]|0;
   $1379 = ((($1378)) + 276|0);
   $1380 = (($1379) + ($1374<<2)|0);
   $1381 = +HEAPF32[$1380>>2];
   $1382 = $i;
   $1383 = $1382<<3;
   $1384 = (($1383) + 4)|0;
   $1385 = $j;
   $1386 = (($1384) + ($1385))|0;
   $1387 = $cforce;
   $1388 = (($1387) + ($1386<<2)|0);
   $1389 = +HEAPF32[$1388>>2];
   $1390 = $1389 + $1381;
   HEAPF32[$1388>>2] = $1390;
   $1391 = $j;
   $1392 = (($1391) + 1)|0;
   $j = $1392;
  }
  $1393 = $i;
  $1394 = (($1393) + 1)|0;
  $i = $1394;
 }
 $i = 0;
 while(1) {
  $1395 = $i;
  $1396 = $2;
  $1397 = $1396<<3;
  $1398 = ($1395|0)<($1397|0);
  if (!($1398)) {
   break;
  }
  $1399 = $5;
  $1400 = $i;
  $1401 = $cforce;
  $1402 = (($1401) + ($1400<<2)|0);
  $1403 = +HEAPF32[$1402>>2];
  $1404 = $1403 * $1399;
  HEAPF32[$1402>>2] = $1404;
  $1405 = $i;
  $1406 = (($1405) + 1)|0;
  $i = $1406;
 }
 $i = 0;
 while(1) {
  $1407 = $i;
  $1408 = $2;
  $1409 = ($1407|0)<($1408|0);
  if (!($1409)) {
   break;
  }
  $1410 = $i;
  $1411 = $1;
  $1412 = (($1411) + ($1410<<2)|0);
  $1413 = HEAP32[$1412>>2]|0;
  $1414 = ((($1413)) + 144|0);
  $1415 = +HEAPF32[$1414>>2];
  $body_invMass6 = $1415;
  $1416 = $invI;
  $1417 = $i;
  $1418 = ($1417*12)|0;
  $1419 = (($1416) + ($1418<<2)|0);
  $body_invI7 = $1419;
  $j = 0;
  while(1) {
   $1420 = $j;
   $1421 = ($1420|0)<(3);
   if (!($1421)) {
    break;
   }
   $1422 = $body_invMass6;
   $1423 = $i;
   $1424 = $1423<<3;
   $1425 = $j;
   $1426 = (($1424) + ($1425))|0;
   $1427 = $cforce;
   $1428 = (($1427) + ($1426<<2)|0);
   $1429 = +HEAPF32[$1428>>2];
   $1430 = $1422 * $1429;
   $1431 = $j;
   $1432 = $i;
   $1433 = $1;
   $1434 = (($1433) + ($1432<<2)|0);
   $1435 = HEAP32[$1434>>2]|0;
   $1436 = ((($1435)) + 228|0);
   $1437 = (($1436) + ($1431<<2)|0);
   $1438 = +HEAPF32[$1437>>2];
   $1439 = $1438 + $1430;
   HEAPF32[$1437>>2] = $1439;
   $1440 = $j;
   $1441 = (($1440) + 1)|0;
   $j = $1441;
  }
  $1442 = $i;
  $1443 = $1;
  $1444 = (($1443) + ($1442<<2)|0);
  $1445 = HEAP32[$1444>>2]|0;
  $1446 = ((($1445)) + 244|0);
  $1447 = $body_invI7;
  $1448 = $cforce;
  $1449 = $i;
  $1450 = $1449<<3;
  $1451 = (($1448) + ($1450<<2)|0);
  $1452 = ((($1451)) + 16|0);
  _dMULTIPLYADD0_331($1446,$1447,$1452);
  $1453 = $i;
  $1454 = (($1453) + 1)|0;
  $i = $1454;
 }
 $i = 0;
 while(1) {
  $1455 = $i;
  $1456 = $2;
  $1457 = ($1455|0)<($1456|0);
  if (!($1457)) {
   break;
  }
  $1458 = $i;
  $1459 = $1;
  $1460 = (($1459) + ($1458<<2)|0);
  $1461 = HEAP32[$1460>>2]|0;
  $1462 = $5;
  __ZL17moveAndRotateBodyP6dxBodyf($1461,$1462);
  $1463 = $i;
  $1464 = (($1463) + 1)|0;
  $i = $1464;
 }
 $i = 0;
 while(1) {
  $1465 = $i;
  $1466 = $2;
  $1467 = ($1465|0)<($1466|0);
  if (!($1467)) {
   break;
  }
  $1468 = $i;
  $1469 = $1;
  $1470 = (($1469) + ($1468<<2)|0);
  $1471 = HEAP32[$1470>>2]|0;
  $1472 = ((($1471)) + 260|0);
  HEAPF32[$1472>>2] = 0.0;
  $1473 = $i;
  $1474 = $1;
  $1475 = (($1474) + ($1473<<2)|0);
  $1476 = HEAP32[$1475>>2]|0;
  $1477 = ((($1476)) + 260|0);
  $1478 = ((($1477)) + 4|0);
  HEAPF32[$1478>>2] = 0.0;
  $1479 = $i;
  $1480 = $1;
  $1481 = (($1480) + ($1479<<2)|0);
  $1482 = HEAP32[$1481>>2]|0;
  $1483 = ((($1482)) + 260|0);
  $1484 = ((($1483)) + 8|0);
  HEAPF32[$1484>>2] = 0.0;
  $1485 = $i;
  $1486 = $1;
  $1487 = (($1486) + ($1485<<2)|0);
  $1488 = HEAP32[$1487>>2]|0;
  $1489 = ((($1488)) + 260|0);
  $1490 = ((($1489)) + 12|0);
  HEAPF32[$1490>>2] = 0.0;
  $1491 = $i;
  $1492 = $1;
  $1493 = (($1492) + ($1491<<2)|0);
  $1494 = HEAP32[$1493>>2]|0;
  $1495 = ((($1494)) + 276|0);
  HEAPF32[$1495>>2] = 0.0;
  $1496 = $i;
  $1497 = $1;
  $1498 = (($1497) + ($1496<<2)|0);
  $1499 = HEAP32[$1498>>2]|0;
  $1500 = ((($1499)) + 276|0);
  $1501 = ((($1500)) + 4|0);
  HEAPF32[$1501>>2] = 0.0;
  $1502 = $i;
  $1503 = $1;
  $1504 = (($1503) + ($1502<<2)|0);
  $1505 = HEAP32[$1504>>2]|0;
  $1506 = ((($1505)) + 276|0);
  $1507 = ((($1506)) + 8|0);
  HEAPF32[$1507>>2] = 0.0;
  $1508 = $i;
  $1509 = $1;
  $1510 = (($1509) + ($1508<<2)|0);
  $1511 = HEAP32[$1510>>2]|0;
  $1512 = ((($1511)) + 276|0);
  $1513 = ((($1512)) + 12|0);
  HEAPF32[$1513>>2] = 0.0;
  $1514 = $i;
  $1515 = (($1514) + 1)|0;
  $i = $1515;
 }
 STACKTOP = sp;return;
}
function __Z19dInternalStepIslandP7dxWorldPKP6dxBodyiPKP7dxJointif($world,$body,$nb,$joint,$nj,$stepsize) {
 $world = $world|0;
 $body = $body|0;
 $nb = $nb|0;
 $joint = $joint|0;
 $nj = $nj|0;
 $stepsize = +$stepsize;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $world;
 $1 = $body;
 $2 = $nb;
 $3 = $joint;
 $4 = $nj;
 $5 = $stepsize;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 __Z22dInternalStepIsland_x2P7dxWorldPKP6dxBodyiPKP7dxJointif($6,$7,$8,$9,$10,$11);
 STACKTOP = sp;return;
}
function __ZL17moveAndRotateBodyP6dxBodyf($b,$h) {
 $b = $b|0;
 $h = +$h;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, $dq = 0, $dq4 = 0, $frv = 0, $irv = 0, $irv1 = 0, $j = 0, $k = 0.0, $q = 0, $q2 = 0, $s = 0.0, $s3 = 0.0, $theta = 0.0, $theta2 = 0.0, $wlen = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $irv = sp + 120|0;
 $q = sp + 104|0;
 $frv = sp + 88|0;
 $irv1 = sp + 72|0;
 $q2 = sp + 32|0;
 $dq = sp + 16|0;
 $dq4 = sp;
 $0 = $b;
 $1 = $h;
 $j = 0;
 while(1) {
  $2 = $j;
  $3 = ($2|0)<(3);
  if (!($3)) {
   break;
  }
  $4 = $1;
  $5 = $j;
  $6 = $0;
  $7 = ((($6)) + 228|0);
  $8 = (($7) + ($5<<2)|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $4 * $9;
  $11 = $j;
  $12 = $0;
  $13 = ((($12)) + 148|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $15 + $10;
  HEAPF32[$14>>2] = $16;
  $17 = $j;
  $18 = (($17) + 1)|0;
  $j = $18;
 }
 $19 = $0;
 $20 = ((($19)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 1;
 $23 = ($22|0)!=(0);
 $24 = $0;
 if (!($23)) {
  $198 = ((($24)) + 244|0);
  $199 = $0;
  $200 = ((($199)) + 164|0);
  _dWtoDQ($198,$200,$dq4);
  $j = 0;
  while(1) {
   $201 = $j;
   $202 = ($201|0)<(4);
   if (!($202)) {
    break;
   }
   $203 = $1;
   $204 = $j;
   $205 = (($dq4) + ($204<<2)|0);
   $206 = +HEAPF32[$205>>2];
   $207 = $203 * $206;
   $208 = $j;
   $209 = $0;
   $210 = ((($209)) + 164|0);
   $211 = (($210) + ($208<<2)|0);
   $212 = +HEAPF32[$211>>2];
   $213 = $212 + $207;
   HEAPF32[$211>>2] = $213;
   $214 = $j;
   $215 = (($214) + 1)|0;
   $j = $215;
  }
  $216 = $0;
  $217 = ((($216)) + 164|0);
  _dNormalize4($217);
  $218 = $0;
  $219 = ((($218)) + 164|0);
  $220 = $0;
  $221 = ((($220)) + 180|0);
  _dQtoR($219,$221);
  STACKTOP = sp;return;
 }
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 2;
 $28 = ($27|0)!=(0);
 $29 = $0;
 if ($28) {
  $30 = ((($29)) + 292|0);
  $31 = $0;
  $32 = ((($31)) + 244|0);
  $33 = (+_dDOT($30,$32));
  $k = $33;
  $34 = $0;
  $35 = ((($34)) + 292|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $k;
  $38 = $36 * $37;
  HEAPF32[$frv>>2] = $38;
  $39 = $0;
  $40 = ((($39)) + 292|0);
  $41 = ((($40)) + 4|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $k;
  $44 = $42 * $43;
  $45 = ((($frv)) + 4|0);
  HEAPF32[$45>>2] = $44;
  $46 = $0;
  $47 = ((($46)) + 292|0);
  $48 = ((($47)) + 8|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $k;
  $51 = $49 * $50;
  $52 = ((($frv)) + 8|0);
  HEAPF32[$52>>2] = $51;
  $53 = $0;
  $54 = ((($53)) + 244|0);
  $55 = +HEAPF32[$54>>2];
  $56 = +HEAPF32[$frv>>2];
  $57 = $55 - $56;
  HEAPF32[$irv1>>2] = $57;
  $58 = $0;
  $59 = ((($58)) + 244|0);
  $60 = ((($59)) + 4|0);
  $61 = +HEAPF32[$60>>2];
  $62 = ((($frv)) + 4|0);
  $63 = +HEAPF32[$62>>2];
  $64 = $61 - $63;
  $65 = ((($irv1)) + 4|0);
  HEAPF32[$65>>2] = $64;
  $66 = $0;
  $67 = ((($66)) + 244|0);
  $68 = ((($67)) + 8|0);
  $69 = +HEAPF32[$68>>2];
  $70 = ((($frv)) + 8|0);
  $71 = +HEAPF32[$70>>2];
  $72 = $69 - $71;
  $73 = ((($irv1)) + 8|0);
  HEAPF32[$73>>2] = $72;
  $74 = $1;
  $75 = $74 * 0.5;
  $1 = $75;
  $76 = $k;
  $77 = $1;
  $78 = $76 * $77;
  $theta = $78;
  $79 = $theta;
  $80 = $79;
  $81 = (+Math_cos((+$80)));
  $82 = $81;
  HEAPF32[$q>>2] = $82;
  $83 = $theta;
  $84 = (+__ZL4sincf($83));
  $85 = $1;
  $86 = $84 * $85;
  $s = $86;
  $87 = +HEAPF32[$frv>>2];
  $88 = $s;
  $89 = $87 * $88;
  $90 = ((($q)) + 4|0);
  HEAPF32[$90>>2] = $89;
  $91 = ((($frv)) + 4|0);
  $92 = +HEAPF32[$91>>2];
  $93 = $s;
  $94 = $92 * $93;
  $95 = ((($q)) + 8|0);
  HEAPF32[$95>>2] = $94;
  $96 = ((($frv)) + 8|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $s;
  $99 = $97 * $98;
  $100 = ((($q)) + 12|0);
  HEAPF32[$100>>2] = $99;
 } else {
  $101 = ((($29)) + 244|0);
  $102 = +HEAPF32[$101>>2];
  $103 = $0;
  $104 = ((($103)) + 244|0);
  $105 = +HEAPF32[$104>>2];
  $106 = $102 * $105;
  $107 = $0;
  $108 = ((($107)) + 244|0);
  $109 = ((($108)) + 4|0);
  $110 = +HEAPF32[$109>>2];
  $111 = $0;
  $112 = ((($111)) + 244|0);
  $113 = ((($112)) + 4|0);
  $114 = +HEAPF32[$113>>2];
  $115 = $110 * $114;
  $116 = $106 + $115;
  $117 = $0;
  $118 = ((($117)) + 244|0);
  $119 = ((($118)) + 8|0);
  $120 = +HEAPF32[$119>>2];
  $121 = $0;
  $122 = ((($121)) + 244|0);
  $123 = ((($122)) + 8|0);
  $124 = +HEAPF32[$123>>2];
  $125 = $120 * $124;
  $126 = $116 + $125;
  $127 = $126;
  $128 = (+Math_sqrt((+$127)));
  $129 = $128;
  $wlen = $129;
  $130 = $1;
  $131 = $130 * 0.5;
  $1 = $131;
  $132 = $wlen;
  $133 = $1;
  $134 = $132 * $133;
  $theta2 = $134;
  $135 = $theta2;
  $136 = $135;
  $137 = (+Math_cos((+$136)));
  $138 = $137;
  HEAPF32[$q>>2] = $138;
  $139 = $theta2;
  $140 = (+__ZL4sincf($139));
  $141 = $1;
  $142 = $140 * $141;
  $s3 = $142;
  $143 = $0;
  $144 = ((($143)) + 244|0);
  $145 = +HEAPF32[$144>>2];
  $146 = $s3;
  $147 = $145 * $146;
  $148 = ((($q)) + 4|0);
  HEAPF32[$148>>2] = $147;
  $149 = $0;
  $150 = ((($149)) + 244|0);
  $151 = ((($150)) + 4|0);
  $152 = +HEAPF32[$151>>2];
  $153 = $s3;
  $154 = $152 * $153;
  $155 = ((($q)) + 8|0);
  HEAPF32[$155>>2] = $154;
  $156 = $0;
  $157 = ((($156)) + 244|0);
  $158 = ((($157)) + 8|0);
  $159 = +HEAPF32[$158>>2];
  $160 = $s3;
  $161 = $159 * $160;
  $162 = ((($q)) + 12|0);
  HEAPF32[$162>>2] = $161;
 }
 $163 = $0;
 $164 = ((($163)) + 164|0);
 _dQMultiply0($q2,$q,$164);
 $j = 0;
 while(1) {
  $165 = $j;
  $166 = ($165|0)<(4);
  if (!($166)) {
   break;
  }
  $167 = $j;
  $168 = (($q2) + ($167<<2)|0);
  $169 = +HEAPF32[$168>>2];
  $170 = $j;
  $171 = $0;
  $172 = ((($171)) + 164|0);
  $173 = (($172) + ($170<<2)|0);
  HEAPF32[$173>>2] = $169;
  $174 = $j;
  $175 = (($174) + 1)|0;
  $j = $175;
 }
 $176 = $0;
 $177 = ((($176)) + 24|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = $178 & 2;
 $180 = ($179|0)!=(0);
 if (!($180)) {
  $216 = $0;
  $217 = ((($216)) + 164|0);
  _dNormalize4($217);
  $218 = $0;
  $219 = ((($218)) + 164|0);
  $220 = $0;
  $221 = ((($220)) + 180|0);
  _dQtoR($219,$221);
  STACKTOP = sp;return;
 }
 $181 = $0;
 $182 = ((($181)) + 164|0);
 _dWtoDQ($irv,$182,$dq);
 $j = 0;
 while(1) {
  $183 = $j;
  $184 = ($183|0)<(4);
  if (!($184)) {
   break;
  }
  $185 = $1;
  $186 = $j;
  $187 = (($dq) + ($186<<2)|0);
  $188 = +HEAPF32[$187>>2];
  $189 = $185 * $188;
  $190 = $j;
  $191 = $0;
  $192 = ((($191)) + 164|0);
  $193 = (($192) + ($190<<2)|0);
  $194 = +HEAPF32[$193>>2];
  $195 = $194 + $189;
  HEAPF32[$193>>2] = $195;
  $196 = $j;
  $197 = (($196) + 1)|0;
  $j = $197;
 }
 $216 = $0;
 $217 = ((($216)) + 164|0);
 _dNormalize4($217);
 $218 = $0;
 $219 = ((($218)) + 164|0);
 $220 = $0;
 $221 = ((($220)) + 180|0);
 _dQtoR($219,$221);
 STACKTOP = sp;return;
}
function _dMULTIPLY0_133($A,$B,$C) {
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $A;
 $1 = $B;
 $2 = $C;
 $3 = $1;
 $4 = $2;
 $5 = (+_dDOT14($3,$4));
 $6 = $0;
 HEAPF32[$6>>2] = $5;
 $7 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = (+_dDOT14($7,$9));
 $11 = $0;
 $12 = ((($11)) + 4|0);
 HEAPF32[$12>>2] = $10;
 $13 = $1;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = (+_dDOT14($13,$15));
 $17 = $0;
 $18 = ((($17)) + 8|0);
 HEAPF32[$18>>2] = $16;
 STACKTOP = sp;return;
}
function __ZL16MultiplyAdd2_p8rPfS_S_iii($A,$B,$C,$p,$r,$Askip) {
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 $p = $p|0;
 $r = $r|0;
 $Askip = $Askip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $bb = 0, $cc = 0, $i = 0, $j = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $sum = 0.0, $vararg_buffer = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $A;
 $1 = $B;
 $2 = $C;
 $3 = $p;
 $4 = $r;
 $5 = $Askip;
 $6 = $3;
 $7 = ($6|0)>(0);
 $8 = $4;
 $9 = ($8|0)>(0);
 $or$cond = $7 & $9;
 $10 = $0;
 $11 = ($10|0)!=(0|0);
 $or$cond3 = $or$cond & $11;
 $12 = $1;
 $13 = ($12|0)!=(0|0);
 $or$cond5 = $or$cond3 & $13;
 $14 = $2;
 $15 = ($14|0)!=(0|0);
 $or$cond7 = $or$cond5 & $15;
 if (!($or$cond7)) {
  HEAP32[$vararg_buffer>>2] = 4188;
  $vararg_ptr8 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = 3802;
  _dDebug(1,4116,$vararg_buffer);
 }
 $16 = $1;
 $bb = $16;
 $17 = $3;
 $i = $17;
 while(1) {
  $18 = $i;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $2;
  $cc = $20;
  $21 = $4;
  $j = $21;
  while(1) {
   $22 = $j;
   $23 = ($22|0)!=(0);
   if (!($23)) {
    break;
   }
   $24 = $bb;
   $25 = +HEAPF32[$24>>2];
   $26 = $cc;
   $27 = +HEAPF32[$26>>2];
   $28 = $25 * $27;
   $sum = $28;
   $29 = $bb;
   $30 = ((($29)) + 4|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $cc;
   $33 = ((($32)) + 4|0);
   $34 = +HEAPF32[$33>>2];
   $35 = $31 * $34;
   $36 = $sum;
   $37 = $36 + $35;
   $sum = $37;
   $38 = $bb;
   $39 = ((($38)) + 8|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $cc;
   $42 = ((($41)) + 8|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $40 * $43;
   $45 = $sum;
   $46 = $45 + $44;
   $sum = $46;
   $47 = $bb;
   $48 = ((($47)) + 16|0);
   $49 = +HEAPF32[$48>>2];
   $50 = $cc;
   $51 = ((($50)) + 16|0);
   $52 = +HEAPF32[$51>>2];
   $53 = $49 * $52;
   $54 = $sum;
   $55 = $54 + $53;
   $sum = $55;
   $56 = $bb;
   $57 = ((($56)) + 20|0);
   $58 = +HEAPF32[$57>>2];
   $59 = $cc;
   $60 = ((($59)) + 20|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $58 * $61;
   $63 = $sum;
   $64 = $63 + $62;
   $sum = $64;
   $65 = $bb;
   $66 = ((($65)) + 24|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $cc;
   $69 = ((($68)) + 24|0);
   $70 = +HEAPF32[$69>>2];
   $71 = $67 * $70;
   $72 = $sum;
   $73 = $72 + $71;
   $sum = $73;
   $74 = $sum;
   $75 = $0;
   $76 = ((($75)) + 4|0);
   $0 = $76;
   $77 = +HEAPF32[$75>>2];
   $78 = $77 + $74;
   HEAPF32[$75>>2] = $78;
   $79 = $cc;
   $80 = ((($79)) + 32|0);
   $cc = $80;
   $81 = $j;
   $82 = (($81) + -1)|0;
   $j = $82;
  }
  $83 = $5;
  $84 = $4;
  $85 = (($83) - ($84))|0;
  $86 = $0;
  $87 = (($86) + ($85<<2)|0);
  $0 = $87;
  $88 = $bb;
  $89 = ((($88)) + 32|0);
  $bb = $89;
  $90 = $i;
  $91 = (($90) + -1)|0;
  $i = $91;
 }
 STACKTOP = sp;return;
}
function __ZL13Multiply2_p8rPfS_S_iii($A,$B,$C,$p,$r,$Askip) {
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 $p = $p|0;
 $r = $r|0;
 $Askip = $Askip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $bb = 0, $cc = 0, $i = 0, $j = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $sum = 0.0, $vararg_buffer = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $A;
 $1 = $B;
 $2 = $C;
 $3 = $p;
 $4 = $r;
 $5 = $Askip;
 $6 = $3;
 $7 = ($6|0)>(0);
 $8 = $4;
 $9 = ($8|0)>(0);
 $or$cond = $7 & $9;
 $10 = $0;
 $11 = ($10|0)!=(0|0);
 $or$cond3 = $or$cond & $11;
 $12 = $1;
 $13 = ($12|0)!=(0|0);
 $or$cond5 = $or$cond3 & $13;
 $14 = $2;
 $15 = ($14|0)!=(0|0);
 $or$cond7 = $or$cond5 & $15;
 if (!($or$cond7)) {
  HEAP32[$vararg_buffer>>2] = 4174;
  $vararg_ptr8 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = 3802;
  _dDebug(1,4116,$vararg_buffer);
 }
 $16 = $1;
 $bb = $16;
 $17 = $3;
 $i = $17;
 while(1) {
  $18 = $i;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $2;
  $cc = $20;
  $21 = $4;
  $j = $21;
  while(1) {
   $22 = $j;
   $23 = ($22|0)!=(0);
   if (!($23)) {
    break;
   }
   $24 = $bb;
   $25 = +HEAPF32[$24>>2];
   $26 = $cc;
   $27 = +HEAPF32[$26>>2];
   $28 = $25 * $27;
   $sum = $28;
   $29 = $bb;
   $30 = ((($29)) + 4|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $cc;
   $33 = ((($32)) + 4|0);
   $34 = +HEAPF32[$33>>2];
   $35 = $31 * $34;
   $36 = $sum;
   $37 = $36 + $35;
   $sum = $37;
   $38 = $bb;
   $39 = ((($38)) + 8|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $cc;
   $42 = ((($41)) + 8|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $40 * $43;
   $45 = $sum;
   $46 = $45 + $44;
   $sum = $46;
   $47 = $bb;
   $48 = ((($47)) + 16|0);
   $49 = +HEAPF32[$48>>2];
   $50 = $cc;
   $51 = ((($50)) + 16|0);
   $52 = +HEAPF32[$51>>2];
   $53 = $49 * $52;
   $54 = $sum;
   $55 = $54 + $53;
   $sum = $55;
   $56 = $bb;
   $57 = ((($56)) + 20|0);
   $58 = +HEAPF32[$57>>2];
   $59 = $cc;
   $60 = ((($59)) + 20|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $58 * $61;
   $63 = $sum;
   $64 = $63 + $62;
   $sum = $64;
   $65 = $bb;
   $66 = ((($65)) + 24|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $cc;
   $69 = ((($68)) + 24|0);
   $70 = +HEAPF32[$69>>2];
   $71 = $67 * $70;
   $72 = $sum;
   $73 = $72 + $71;
   $sum = $73;
   $74 = $sum;
   $75 = $0;
   $76 = ((($75)) + 4|0);
   $0 = $76;
   HEAPF32[$75>>2] = $74;
   $77 = $cc;
   $78 = ((($77)) + 32|0);
   $cc = $78;
   $79 = $j;
   $80 = (($79) + -1)|0;
   $j = $80;
  }
  $81 = $5;
  $82 = $4;
  $83 = (($81) - ($82))|0;
  $84 = $0;
  $85 = (($84) + ($83<<2)|0);
  $0 = $85;
  $86 = $bb;
  $87 = ((($86)) + 32|0);
  $bb = $87;
  $88 = $i;
  $89 = (($88) + -1)|0;
  $i = $89;
 }
 STACKTOP = sp;return;
}
function __ZL13Multiply0_p81PfS_S_i($A,$B,$C,$p) {
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $sum = 0.0, $vararg_buffer = 0, $vararg_ptr6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $A;
 $1 = $B;
 $2 = $C;
 $3 = $p;
 $4 = $3;
 $5 = ($4|0)>(0);
 $6 = $0;
 $7 = ($6|0)!=(0|0);
 $or$cond = $5 & $7;
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 $or$cond3 = $or$cond & $9;
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 $or$cond5 = $or$cond3 & $11;
 if (!($or$cond5)) {
  HEAP32[$vararg_buffer>>2] = 4102;
  $vararg_ptr6 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 3802;
  _dDebug(1,4034,$vararg_buffer);
 }
 $12 = $3;
 $i = $12;
 while(1) {
  $13 = $i;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   break;
  }
  $15 = $1;
  $16 = +HEAPF32[$15>>2];
  $17 = $2;
  $18 = +HEAPF32[$17>>2];
  $19 = $16 * $18;
  $sum = $19;
  $20 = $1;
  $21 = ((($20)) + 4|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $2;
  $24 = ((($23)) + 4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $22 * $25;
  $27 = $sum;
  $28 = $27 + $26;
  $sum = $28;
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $2;
  $33 = ((($32)) + 8|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $31 * $34;
  $36 = $sum;
  $37 = $36 + $35;
  $sum = $37;
  $38 = $1;
  $39 = ((($38)) + 16|0);
  $40 = +HEAPF32[$39>>2];
  $41 = $2;
  $42 = ((($41)) + 16|0);
  $43 = +HEAPF32[$42>>2];
  $44 = $40 * $43;
  $45 = $sum;
  $46 = $45 + $44;
  $sum = $46;
  $47 = $1;
  $48 = ((($47)) + 20|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $2;
  $51 = ((($50)) + 20|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $49 * $52;
  $54 = $sum;
  $55 = $54 + $53;
  $sum = $55;
  $56 = $1;
  $57 = ((($56)) + 24|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $2;
  $60 = ((($59)) + 24|0);
  $61 = +HEAPF32[$60>>2];
  $62 = $58 * $61;
  $63 = $sum;
  $64 = $63 + $62;
  $sum = $64;
  $65 = $sum;
  $66 = $0;
  $67 = ((($66)) + 4|0);
  $0 = $67;
  HEAPF32[$66>>2] = $65;
  $68 = $1;
  $69 = ((($68)) + 32|0);
  $1 = $69;
  $70 = $i;
  $71 = (($70) + -1)|0;
  $i = $71;
 }
 STACKTOP = sp;return;
}
function __ZL16MultiplyAdd0_p81PfS_S_i($A,$B,$C,$p) {
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $i = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $sum = 0.0, $vararg_buffer = 0;
 var $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $A;
 $1 = $B;
 $2 = $C;
 $3 = $p;
 $4 = $3;
 $5 = ($4|0)>(0);
 $6 = $0;
 $7 = ($6|0)!=(0|0);
 $or$cond = $5 & $7;
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 $or$cond3 = $or$cond & $9;
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 $or$cond5 = $or$cond3 & $11;
 if (!($or$cond5)) {
  HEAP32[$vararg_buffer>>2] = 4085;
  $vararg_ptr6 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 3802;
  _dDebug(1,4034,$vararg_buffer);
 }
 $12 = $3;
 $i = $12;
 while(1) {
  $13 = $i;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   break;
  }
  $15 = $1;
  $16 = +HEAPF32[$15>>2];
  $17 = $2;
  $18 = +HEAPF32[$17>>2];
  $19 = $16 * $18;
  $sum = $19;
  $20 = $1;
  $21 = ((($20)) + 4|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $2;
  $24 = ((($23)) + 4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $22 * $25;
  $27 = $sum;
  $28 = $27 + $26;
  $sum = $28;
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $2;
  $33 = ((($32)) + 8|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $31 * $34;
  $36 = $sum;
  $37 = $36 + $35;
  $sum = $37;
  $38 = $1;
  $39 = ((($38)) + 16|0);
  $40 = +HEAPF32[$39>>2];
  $41 = $2;
  $42 = ((($41)) + 16|0);
  $43 = +HEAPF32[$42>>2];
  $44 = $40 * $43;
  $45 = $sum;
  $46 = $45 + $44;
  $sum = $46;
  $47 = $1;
  $48 = ((($47)) + 20|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $2;
  $51 = ((($50)) + 20|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $49 * $52;
  $54 = $sum;
  $55 = $54 + $53;
  $sum = $55;
  $56 = $1;
  $57 = ((($56)) + 24|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $2;
  $60 = ((($59)) + 24|0);
  $61 = +HEAPF32[$60>>2];
  $62 = $58 * $61;
  $63 = $sum;
  $64 = $63 + $62;
  $sum = $64;
  $65 = $sum;
  $66 = $0;
  $67 = ((($66)) + 4|0);
  $0 = $67;
  $68 = +HEAPF32[$66>>2];
  $69 = $68 + $65;
  HEAPF32[$66>>2] = $69;
  $70 = $1;
  $71 = ((($70)) + 32|0);
  $1 = $71;
  $72 = $i;
  $73 = (($72) + -1)|0;
  $i = $73;
 }
 STACKTOP = sp;return;
}
function __ZL16MultiplyAdd1_8q1PfS_S_i($A,$B,$C,$q) {
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0;
 var $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0;
 var $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $k = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $sum = 0.0, $vararg_buffer = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $A;
 $1 = $B;
 $2 = $C;
 $3 = $q;
 $4 = $3;
 $5 = ($4|0)>(0);
 $6 = $0;
 $7 = ($6|0)!=(0|0);
 $or$cond = $5 & $7;
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 $or$cond3 = $or$cond & $9;
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 $or$cond5 = $or$cond3 & $11;
 if (!($or$cond5)) {
  HEAP32[$vararg_buffer>>2] = 4017;
  $vararg_ptr6 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 3802;
  _dDebug(1,3966,$vararg_buffer);
 }
 $sum = 0.0;
 $k = 0;
 while(1) {
  $12 = $k;
  $13 = $3;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $k;
  $16 = $15<<3;
  $17 = $1;
  $18 = (($17) + ($16<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $k;
  $21 = $2;
  $22 = (($21) + ($20<<2)|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $19 * $23;
  $25 = $sum;
  $26 = $25 + $24;
  $sum = $26;
  $27 = $k;
  $28 = (($27) + 1)|0;
  $k = $28;
 }
 $29 = $sum;
 $30 = $0;
 $31 = +HEAPF32[$30>>2];
 $32 = $31 + $29;
 HEAPF32[$30>>2] = $32;
 $sum = 0.0;
 $k = 0;
 while(1) {
  $33 = $k;
  $34 = $3;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = $k;
  $37 = $36<<3;
  $38 = (1 + ($37))|0;
  $39 = $1;
  $40 = (($39) + ($38<<2)|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $k;
  $43 = $2;
  $44 = (($43) + ($42<<2)|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $41 * $45;
  $47 = $sum;
  $48 = $47 + $46;
  $sum = $48;
  $49 = $k;
  $50 = (($49) + 1)|0;
  $k = $50;
 }
 $51 = $sum;
 $52 = $0;
 $53 = ((($52)) + 4|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $54 + $51;
 HEAPF32[$53>>2] = $55;
 $sum = 0.0;
 $k = 0;
 while(1) {
  $56 = $k;
  $57 = $3;
  $58 = ($56|0)<($57|0);
  if (!($58)) {
   break;
  }
  $59 = $k;
  $60 = $59<<3;
  $61 = (2 + ($60))|0;
  $62 = $1;
  $63 = (($62) + ($61<<2)|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $k;
  $66 = $2;
  $67 = (($66) + ($65<<2)|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $64 * $68;
  $70 = $sum;
  $71 = $70 + $69;
  $sum = $71;
  $72 = $k;
  $73 = (($72) + 1)|0;
  $k = $73;
 }
 $74 = $sum;
 $75 = $0;
 $76 = ((($75)) + 8|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $77 + $74;
 HEAPF32[$76>>2] = $78;
 $sum = 0.0;
 $k = 0;
 while(1) {
  $79 = $k;
  $80 = $3;
  $81 = ($79|0)<($80|0);
  if (!($81)) {
   break;
  }
  $82 = $k;
  $83 = $82<<3;
  $84 = (4 + ($83))|0;
  $85 = $1;
  $86 = (($85) + ($84<<2)|0);
  $87 = +HEAPF32[$86>>2];
  $88 = $k;
  $89 = $2;
  $90 = (($89) + ($88<<2)|0);
  $91 = +HEAPF32[$90>>2];
  $92 = $87 * $91;
  $93 = $sum;
  $94 = $93 + $92;
  $sum = $94;
  $95 = $k;
  $96 = (($95) + 1)|0;
  $k = $96;
 }
 $97 = $sum;
 $98 = $0;
 $99 = ((($98)) + 16|0);
 $100 = +HEAPF32[$99>>2];
 $101 = $100 + $97;
 HEAPF32[$99>>2] = $101;
 $sum = 0.0;
 $k = 0;
 while(1) {
  $102 = $k;
  $103 = $3;
  $104 = ($102|0)<($103|0);
  if (!($104)) {
   break;
  }
  $105 = $k;
  $106 = $105<<3;
  $107 = (5 + ($106))|0;
  $108 = $1;
  $109 = (($108) + ($107<<2)|0);
  $110 = +HEAPF32[$109>>2];
  $111 = $k;
  $112 = $2;
  $113 = (($112) + ($111<<2)|0);
  $114 = +HEAPF32[$113>>2];
  $115 = $110 * $114;
  $116 = $sum;
  $117 = $116 + $115;
  $sum = $117;
  $118 = $k;
  $119 = (($118) + 1)|0;
  $k = $119;
 }
 $120 = $sum;
 $121 = $0;
 $122 = ((($121)) + 20|0);
 $123 = +HEAPF32[$122>>2];
 $124 = $123 + $120;
 HEAPF32[$122>>2] = $124;
 $sum = 0.0;
 $k = 0;
 while(1) {
  $125 = $k;
  $126 = $3;
  $127 = ($125|0)<($126|0);
  if (!($127)) {
   break;
  }
  $128 = $k;
  $129 = $128<<3;
  $130 = (6 + ($129))|0;
  $131 = $1;
  $132 = (($131) + ($130<<2)|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $k;
  $135 = $2;
  $136 = (($135) + ($134<<2)|0);
  $137 = +HEAPF32[$136>>2];
  $138 = $133 * $137;
  $139 = $sum;
  $140 = $139 + $138;
  $sum = $140;
  $141 = $k;
  $142 = (($141) + 1)|0;
  $k = $142;
 }
 $143 = $sum;
 $144 = $0;
 $145 = ((($144)) + 24|0);
 $146 = +HEAPF32[$145>>2];
 $147 = $146 + $143;
 HEAPF32[$145>>2] = $147;
 STACKTOP = sp;return;
}
function _dMULTIPLYADD0_331($A,$B,$C) {
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $A;
 $1 = $B;
 $2 = $C;
 $3 = $1;
 $4 = $2;
 $5 = (+_dDOT($3,$4));
 $6 = $0;
 $7 = +HEAPF32[$6>>2];
 $8 = $7 + $5;
 HEAPF32[$6>>2] = $8;
 $9 = $1;
 $10 = ((($9)) + 16|0);
 $11 = $2;
 $12 = (+_dDOT($10,$11));
 $13 = $0;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 + $12;
 HEAPF32[$14>>2] = $16;
 $17 = $1;
 $18 = ((($17)) + 32|0);
 $19 = $2;
 $20 = (+_dDOT($18,$19));
 $21 = $0;
 $22 = ((($21)) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $23 + $20;
 HEAPF32[$22>>2] = $24;
 STACKTOP = sp;return;
}
function __ZL4sincf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x;
 $2 = $1;
 $3 = $2;
 $4 = (+Math_abs((+$3)));
 $5 = $4;
 $6 = $5;
 $7 = $6 < 1.0E-4;
 $8 = $1;
 if ($7) {
  $9 = $1;
  $10 = $8 * $9;
  $11 = $10 * 0.1666666716337204;
  $12 = 1.0 - $11;
  $0 = $12;
  $18 = $0;
  STACKTOP = sp;return (+$18);
 } else {
  $13 = $8;
  $14 = (+Math_sin((+$13)));
  $15 = $14;
  $16 = $1;
  $17 = $15 / $16;
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return (+$18);
 }
 return +(0.0);
}
function __ZN4dLCPC2EiiPfS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PiS1_S1_S1_PS0_($this,$_n,$_nub,$_Adata,$_x,$_b,$_w,$_lo,$_hi,$_L,$_d,$_Dell,$_ell,$_tmp,$_state,$_findex,$_p,$_C,$Arows) {
 $this = $this|0;
 $_n = $_n|0;
 $_nub = $_nub|0;
 $_Adata = $_Adata|0;
 $_x = $_x|0;
 $_b = $_b|0;
 $_w = $_w|0;
 $_lo = $_lo|0;
 $_hi = $_hi|0;
 $_L = $_L|0;
 $_d = $_d|0;
 $_Dell = $_Dell|0;
 $_ell = $_ell|0;
 $_tmp = $_tmp|0;
 $_state = $_state|0;
 $_findex = $_findex|0;
 $_p = $_p|0;
 $_C = $_C|0;
 $Arows = $Arows|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k = 0, $num_at_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $_nub;
 $3 = $_Adata;
 $4 = $_x;
 $5 = $_b;
 $6 = $_w;
 $7 = $_lo;
 $8 = $_hi;
 $9 = $_L;
 $10 = $_d;
 $11 = $_Dell;
 $12 = $_ell;
 $13 = $_tmp;
 $14 = $_state;
 $15 = $_findex;
 $16 = $_p;
 $17 = $_C;
 $18 = $Arows;
 $19 = $0;
 $20 = $1;
 HEAP32[$19>>2] = $20;
 $21 = $2;
 $22 = ((($19)) + 8|0);
 HEAP32[$22>>2] = $21;
 $23 = $3;
 $24 = ((($19)) + 16|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($19)) + 12|0);
 HEAP32[$25>>2] = 0;
 $26 = $4;
 $27 = ((($19)) + 20|0);
 HEAP32[$27>>2] = $26;
 $28 = $5;
 $29 = ((($19)) + 24|0);
 HEAP32[$29>>2] = $28;
 $30 = $6;
 $31 = ((($19)) + 28|0);
 HEAP32[$31>>2] = $30;
 $32 = $7;
 $33 = ((($19)) + 32|0);
 HEAP32[$33>>2] = $32;
 $34 = $8;
 $35 = ((($19)) + 36|0);
 HEAP32[$35>>2] = $34;
 $36 = $9;
 $37 = ((($19)) + 40|0);
 HEAP32[$37>>2] = $36;
 $38 = $10;
 $39 = ((($19)) + 44|0);
 HEAP32[$39>>2] = $38;
 $40 = $11;
 $41 = ((($19)) + 48|0);
 HEAP32[$41>>2] = $40;
 $42 = $12;
 $43 = ((($19)) + 52|0);
 HEAP32[$43>>2] = $42;
 $44 = $13;
 $45 = ((($19)) + 56|0);
 HEAP32[$45>>2] = $44;
 $46 = $14;
 $47 = ((($19)) + 60|0);
 HEAP32[$47>>2] = $46;
 $48 = $15;
 $49 = ((($19)) + 64|0);
 HEAP32[$49>>2] = $48;
 $50 = $16;
 $51 = ((($19)) + 68|0);
 HEAP32[$51>>2] = $50;
 $52 = $17;
 $53 = ((($19)) + 72|0);
 HEAP32[$53>>2] = $52;
 $54 = HEAP32[$19>>2]|0;
 $55 = ($54|0)>(1);
 $56 = HEAP32[$19>>2]|0;
 if ($55) {
  $57 = (($56) - 1)|0;
  $58 = $57 | 3;
  $59 = (($58) + 1)|0;
  $61 = $59;
 } else {
  $61 = $56;
 }
 $60 = ((($19)) + 4|0);
 HEAP32[$60>>2] = $61;
 $62 = ((($19)) + 20|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$19>>2]|0;
 _dSetZero($63,$64);
 $65 = $18;
 $66 = ((($19)) + 12|0);
 HEAP32[$66>>2] = $65;
 $k = 0;
 while(1) {
  $67 = $k;
  $68 = HEAP32[$19>>2]|0;
  $69 = ($67|0)<($68|0);
  if (!($69)) {
   break;
  }
  $70 = ((($19)) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $k;
  $73 = ((($19)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = Math_imul($72, $74)|0;
  $76 = (($71) + ($75<<2)|0);
  $77 = $k;
  $78 = ((($19)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + ($77<<2)|0);
  HEAP32[$80>>2] = $76;
  $81 = $k;
  $82 = (($81) + 1)|0;
  $k = $82;
 }
 $83 = ((($19)) + 76|0);
 HEAP32[$83>>2] = 0;
 $84 = ((($19)) + 80|0);
 HEAP32[$84>>2] = 0;
 $k = 0;
 while(1) {
  $85 = $k;
  $86 = HEAP32[$19>>2]|0;
  $87 = ($85|0)<($86|0);
  if (!($87)) {
   break;
  }
  $88 = $k;
  $89 = $k;
  $90 = ((($19)) + 68|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + ($89<<2)|0);
  HEAP32[$92>>2] = $88;
  $93 = $k;
  $94 = (($93) + 1)|0;
  $k = $94;
 }
 $95 = ((($19)) + 8|0);
 $96 = HEAP32[$95>>2]|0;
 $k = $96;
 while(1) {
  $97 = $k;
  $98 = HEAP32[$19>>2]|0;
  $99 = ($97|0)<($98|0);
  if (!($99)) {
   break;
  }
  $100 = $k;
  $101 = ((($19)) + 32|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + ($100<<2)|0);
  $104 = +HEAPF32[$103>>2];
  $105 = +HEAPF32[180>>2];
  $106 = -$105;
  $107 = $104 == $106;
  if ($107) {
   $108 = $k;
   $109 = ((($19)) + 36|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + ($108<<2)|0);
   $112 = +HEAPF32[$111>>2];
   $113 = +HEAPF32[180>>2];
   $114 = $112 == $113;
   if ($114) {
    $115 = ((($19)) + 12|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($19)) + 20|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ((($19)) + 24|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ((($19)) + 28|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ((($19)) + 32|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($19)) + 36|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($19)) + 68|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ((($19)) + 60|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ((($19)) + 64|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = HEAP32[$19>>2]|0;
    $134 = ((($19)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $k;
    $137 = ((($19)) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    __ZL11swapProblemPPfS_S_S_S_S_PiS1_S1_iiiii($116,$118,$120,$122,$124,$126,$128,$130,$132,$133,$135,$136,$138,0);
    $139 = ((($19)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($140) + 1)|0;
    HEAP32[$139>>2] = $141;
   }
  }
  $142 = $k;
  $143 = (($142) + 1)|0;
  $k = $143;
 }
 $144 = ((($19)) + 8|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)>(0);
 if ($146) {
  $k = 0;
  while(1) {
   $147 = $k;
   $148 = ((($19)) + 8|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ($147|0)<($149|0);
   $151 = ((($19)) + 40|0);
   $152 = HEAP32[$151>>2]|0;
   if (!($150)) {
    break;
   }
   $153 = $k;
   $154 = ((($19)) + 4|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = Math_imul($153, $155)|0;
   $157 = (($152) + ($156<<2)|0);
   $158 = $k;
   $159 = ((($19)) + 12|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + ($158<<2)|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = $k;
   $164 = (($163) + 1)|0;
   $165 = $164<<2;
   _memcpy(($157|0),($162|0),($165|0))|0;
   $166 = $k;
   $167 = (($166) + 1)|0;
   $k = $167;
  }
  $168 = ((($19)) + 44|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ((($19)) + 8|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ((($19)) + 4|0);
  $173 = HEAP32[$172>>2]|0;
  _dFactorLDLT($152,$169,$171,$173);
  $174 = ((($19)) + 20|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ((($19)) + 24|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ((($19)) + 8|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $179<<2;
  _memcpy(($175|0),($177|0),($180|0))|0;
  $181 = ((($19)) + 40|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = ((($19)) + 44|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = ((($19)) + 20|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ((($19)) + 8|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ((($19)) + 4|0);
  $190 = HEAP32[$189>>2]|0;
  _dSolveLDLT($182,$184,$186,$188,$190);
  $191 = ((($19)) + 28|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = ((($19)) + 8|0);
  $194 = HEAP32[$193>>2]|0;
  _dSetZero($192,$194);
  $k = 0;
  while(1) {
   $195 = $k;
   $196 = ((($19)) + 8|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = ($195|0)<($197|0);
   if (!($198)) {
    break;
   }
   $199 = $k;
   $200 = $k;
   $201 = ((($19)) + 72|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (($202) + ($200<<2)|0);
   HEAP32[$203>>2] = $199;
   $204 = $k;
   $205 = (($204) + 1)|0;
   $k = $205;
  }
  $206 = ((($19)) + 8|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ((($19)) + 76|0);
  HEAP32[$208>>2] = $207;
 }
 $209 = ((($19)) + 64|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = ($210|0)!=(0|0);
 if (!($211)) {
  STACKTOP = sp;return;
 }
 $num_at_end = 0;
 $212 = HEAP32[$19>>2]|0;
 $213 = (($212) - 1)|0;
 $k = $213;
 while(1) {
  $214 = $k;
  $215 = ((($19)) + 8|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ($214|0)>=($216|0);
  if (!($217)) {
   break;
  }
  $218 = $k;
  $219 = ((($19)) + 64|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = (($220) + ($218<<2)|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ($222|0)>=(0);
  if ($223) {
   $224 = ((($19)) + 12|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = ((($19)) + 20|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = ((($19)) + 24|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = ((($19)) + 28|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = ((($19)) + 32|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = ((($19)) + 36|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = ((($19)) + 68|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = ((($19)) + 60|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = ((($19)) + 64|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[$19>>2]|0;
   $243 = $k;
   $244 = HEAP32[$19>>2]|0;
   $245 = (($244) - 1)|0;
   $246 = $num_at_end;
   $247 = (($245) - ($246))|0;
   $248 = ((($19)) + 4|0);
   $249 = HEAP32[$248>>2]|0;
   __ZL11swapProblemPPfS_S_S_S_S_PiS1_S1_iiiii($225,$227,$229,$231,$233,$235,$237,$239,$241,$242,$243,$247,$249,1);
   $250 = $num_at_end;
   $251 = (($250) + 1)|0;
   $num_at_end = $251;
  }
  $252 = $k;
  $253 = (($252) + -1)|0;
  $k = $253;
 }
 STACKTOP = sp;return;
}
function __ZN4dLCP15transfer_i_to_CEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $j = 0;
  while(1) {
   $6 = $j;
   $7 = ((($2)) + 76|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6|0)<($8|0);
   if (!($9)) {
    break;
   }
   $10 = $j;
   $11 = ((($2)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($10<<2)|0);
   $14 = +HEAPF32[$13>>2];
   $15 = ((($2)) + 76|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($2)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = Math_imul($16, $18)|0;
   $20 = $j;
   $21 = (($19) + ($20))|0;
   $22 = ((($2)) + 40|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($21<<2)|0);
   HEAPF32[$24>>2] = $14;
   $25 = $j;
   $26 = (($25) + 1)|0;
   $j = $26;
  }
  $27 = $1;
  $28 = $1;
  $29 = ((($2)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($28<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($27<<2)|0);
  $34 = +HEAPF32[$33>>2];
  $35 = ((($2)) + 52|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($2)) + 48|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($2)) + 76|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (+_dDot($36,$38,$40));
  $42 = $34 - $41;
  $43 = 1.0 / $42;
  $44 = ((($2)) + 76|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($2)) + 44|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($45<<2)|0);
  HEAPF32[$48>>2] = $43;
 } else {
  $49 = $1;
  $50 = $1;
  $51 = ((($2)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($50<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($49<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = 1.0 / $56;
  $58 = ((($2)) + 44|0);
  $59 = HEAP32[$58>>2]|0;
  HEAPF32[$59>>2] = $57;
 }
 $60 = ((($2)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($2)) + 20|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($2)) + 24|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($2)) + 28|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($2)) + 32|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($2)) + 36|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($2)) + 68|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($2)) + 60|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($2)) + 64|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = HEAP32[$2>>2]|0;
 $79 = ((($2)) + 76|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $1;
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 __ZL11swapProblemPPfS_S_S_S_S_PiS1_S1_iiiii($61,$63,$65,$67,$69,$71,$73,$75,$77,$78,$80,$81,$83,1);
 $84 = ((($2)) + 76|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($2)) + 76|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($2)) + 72|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + ($87<<2)|0);
 HEAP32[$90>>2] = $85;
 $91 = ((($2)) + 76|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + 1)|0;
 HEAP32[$91>>2] = $93;
 STACKTOP = sp;return;
}
function __ZN4dLCP22transfer_i_from_N_to_CEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aptr = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 $6 = $1;
 if ($5) {
  $7 = ((($2)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($6<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $aptr = $10;
  $j = 0;
  while(1) {
   $11 = $j;
   $12 = ((($2)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = $j;
   $16 = $aptr;
   $17 = (($16) + ($15<<2)|0);
   $18 = +HEAPF32[$17>>2];
   $19 = $j;
   $20 = ((($2)) + 48|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($19<<2)|0);
   HEAPF32[$22>>2] = $18;
   $23 = $j;
   $24 = (($23) + 1)|0;
   $j = $24;
  }
  $25 = ((($2)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $j = $26;
  while(1) {
   $27 = $j;
   $28 = ((($2)) + 76|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($27|0)<($29|0);
   if (!($30)) {
    break;
   }
   $31 = $j;
   $32 = ((($2)) + 72|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($31<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $aptr;
   $37 = (($36) + ($35<<2)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = $j;
   $40 = ((($2)) + 48|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($39<<2)|0);
   HEAPF32[$42>>2] = $38;
   $43 = $j;
   $44 = (($43) + 1)|0;
   $j = $44;
  }
  $45 = ((($2)) + 40|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($2)) + 48|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($2)) + 76|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($2)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  _dSolveL1($46,$48,$50,$52);
  $j = 0;
  while(1) {
   $53 = $j;
   $54 = ((($2)) + 76|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($53|0)<($55|0);
   if (!($56)) {
    break;
   }
   $57 = $j;
   $58 = ((($2)) + 48|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + ($57<<2)|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $j;
   $63 = ((($2)) + 44|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + ($62<<2)|0);
   $66 = +HEAPF32[$65>>2];
   $67 = $61 * $66;
   $68 = $j;
   $69 = ((($2)) + 52|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + ($68<<2)|0);
   HEAPF32[$71>>2] = $67;
   $72 = $j;
   $73 = (($72) + 1)|0;
   $j = $73;
  }
  $j = 0;
  while(1) {
   $74 = $j;
   $75 = ((($2)) + 76|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74|0)<($76|0);
   if (!($77)) {
    break;
   }
   $78 = $j;
   $79 = ((($2)) + 52|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + ($78<<2)|0);
   $82 = +HEAPF32[$81>>2];
   $83 = ((($2)) + 76|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($2)) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = Math_imul($84, $86)|0;
   $88 = $j;
   $89 = (($87) + ($88))|0;
   $90 = ((($2)) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + ($89<<2)|0);
   HEAPF32[$92>>2] = $82;
   $93 = $j;
   $94 = (($93) + 1)|0;
   $j = $94;
  }
  $95 = $1;
  $96 = $1;
  $97 = ((($2)) + 12|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($96<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + ($95<<2)|0);
  $102 = +HEAPF32[$101>>2];
  $103 = ((($2)) + 52|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($2)) + 48|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ((($2)) + 76|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (+_dDot($104,$106,$108));
  $110 = $102 - $109;
  $111 = 1.0 / $110;
  $112 = ((($2)) + 76|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ((($2)) + 44|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + ($113<<2)|0);
  HEAPF32[$116>>2] = $111;
 } else {
  $117 = $1;
  $118 = ((($2)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + ($117<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($121) + ($6<<2)|0);
  $123 = +HEAPF32[$122>>2];
  $124 = 1.0 / $123;
  $125 = ((($2)) + 44|0);
  $126 = HEAP32[$125>>2]|0;
  HEAPF32[$126>>2] = $124;
 }
 $127 = ((($2)) + 12|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ((($2)) + 20|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ((($2)) + 24|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ((($2)) + 28|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ((($2)) + 32|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ((($2)) + 36|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = ((($2)) + 68|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ((($2)) + 60|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ((($2)) + 64|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = HEAP32[$2>>2]|0;
 $146 = ((($2)) + 76|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = $1;
 $149 = ((($2)) + 4|0);
 $150 = HEAP32[$149>>2]|0;
 __ZL11swapProblemPPfS_S_S_S_S_PiS1_S1_iiiii($128,$130,$132,$134,$136,$138,$140,$142,$144,$145,$147,$148,$150,1);
 $151 = ((($2)) + 76|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ((($2)) + 76|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ((($2)) + 72|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = (($156) + ($154<<2)|0);
 HEAP32[$157>>2] = $152;
 $158 = ((($2)) + 80|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($159) + -1)|0;
 HEAP32[$158>>2] = $160;
 $161 = ((($2)) + 76|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (($162) + 1)|0;
 HEAP32[$161>>2] = $163;
 STACKTOP = sp;return;
}
function __ZN4dLCP22transfer_i_from_C_to_NEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $j = 0;
 while(1) {
  $3 = $j;
  $4 = ((($2)) + 76|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $j;
  $8 = ((($2)) + 72|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($7<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = ($11|0)==($12|0);
  if ($13) {
   label = 4;
   break;
  }
  $76 = $j;
  $77 = (($76) + 1)|0;
  $j = $77;
 }
 if ((label|0) == 4) {
  $14 = ((($2)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($2)) + 72|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($2)) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($2)) + 44|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$2>>2]|0;
  $23 = ((($2)) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $j;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  _dLDLTRemove($15,$17,$19,$21,$22,$24,$25,$27);
  $k = 0;
  while(1) {
   $28 = $k;
   $29 = ((($2)) + 76|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($28|0)<($30|0);
   if (!($31)) {
    break;
   }
   $32 = $k;
   $33 = ((($2)) + 72|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($32<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($2)) + 76|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) - 1)|0;
   $40 = ($36|0)==($39|0);
   if ($40) {
    label = 7;
    break;
   }
   $70 = $k;
   $71 = (($70) + 1)|0;
   $k = $71;
  }
  if ((label|0) == 7) {
   $41 = $j;
   $42 = ((($2)) + 72|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($41<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $k;
   $47 = ((($2)) + 72|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($46<<2)|0);
   HEAP32[$49>>2] = $45;
   $50 = $j;
   $51 = ((($2)) + 76|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) - 1)|0;
   $54 = ($50|0)<($53|0);
   if ($54) {
    $55 = ((($2)) + 72|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $j;
    $58 = (($56) + ($57<<2)|0);
    $59 = ((($2)) + 72|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $j;
    $62 = (($60) + ($61<<2)|0);
    $63 = ((($62)) + 4|0);
    $64 = ((($2)) + 76|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $j;
    $67 = (($65) - ($66))|0;
    $68 = (($67) - 1)|0;
    $69 = $68<<2;
    _memmove(($58|0),($63|0),($69|0))|0;
   }
  }
  $72 = $k;
  $73 = ((($2)) + 76|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72|0)<($74|0);
  if (!($75)) {
   HEAP32[$vararg_buffer>>2] = 4244;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 4267;
   _dDebug(1,4205,$vararg_buffer);
  }
 }
 $78 = $j;
 $79 = ((($2)) + 76|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($78|0)<($80|0);
 if (!($81)) {
  HEAP32[$vararg_buffer2>>2] = 4244;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 4267;
  _dDebug(1,4275,$vararg_buffer2);
 }
 $82 = ((($2)) + 12|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($2)) + 20|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($2)) + 24|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($2)) + 28|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ((($2)) + 32|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ((($2)) + 36|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($2)) + 68|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ((($2)) + 60|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($2)) + 64|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$2>>2]|0;
 $101 = $1;
 $102 = ((($2)) + 76|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($103) - 1)|0;
 $105 = ((($2)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 __ZL11swapProblemPPfS_S_S_S_S_PiS1_S1_iiiii($83,$85,$87,$89,$91,$93,$95,$97,$99,$100,$101,$104,$106,1);
 $107 = ((($2)) + 76|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + -1)|0;
 HEAP32[$107>>2] = $109;
 $110 = ((($2)) + 80|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = (($111) + 1)|0;
 HEAP32[$110>>2] = $112;
 STACKTOP = sp;return;
}
function __ZN4dLCP22pN_equals_ANC_times_qCEPfS0_($this,$p,$q) {
 $this = $this|0;
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $q;
 $3 = $0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ((($3)) + 80|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = ((($3)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + ($10))|0;
  $12 = ((($3)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($3)) + 76|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (+_dDot($15,$16,$18));
  $20 = $i;
  $21 = ((($3)) + 76|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22))|0;
  $24 = $1;
  $25 = (($24) + ($23<<2)|0);
  HEAPF32[$25>>2] = $19;
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 STACKTOP = sp;return;
}
function __ZN4dLCP17pN_plusequals_ANiEPfii($this,$p,$i,$sign) {
 $this = $this|0;
 $p = $p|0;
 $i = $i|0;
 $sign = $sign|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aptr = 0, $i1 = 0, $i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $i;
 $3 = $sign;
 $4 = $0;
 $5 = $2;
 $6 = ((($4)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($4)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + ($11<<2)|0);
 $aptr = $12;
 $13 = $3;
 $14 = ($13|0)>(0);
 if ($14) {
  $i1 = 0;
  while(1) {
   $15 = $i1;
   $16 = ((($4)) + 80|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15|0)<($17|0);
   if (!($18)) {
    break;
   }
   $19 = $i1;
   $20 = $aptr;
   $21 = (($20) + ($19<<2)|0);
   $22 = +HEAPF32[$21>>2];
   $23 = $i1;
   $24 = ((($4)) + 76|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($23) + ($25))|0;
   $27 = $1;
   $28 = (($27) + ($26<<2)|0);
   $29 = +HEAPF32[$28>>2];
   $30 = $29 + $22;
   HEAPF32[$28>>2] = $30;
   $31 = $i1;
   $32 = (($31) + 1)|0;
   $i1 = $32;
  }
  STACKTOP = sp;return;
 } else {
  $i2 = 0;
  while(1) {
   $33 = $i2;
   $34 = ((($4)) + 80|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)<($35|0);
   if (!($36)) {
    break;
   }
   $37 = $i2;
   $38 = $aptr;
   $39 = (($38) + ($37<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $i2;
   $42 = ((($4)) + 76|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) + ($43))|0;
   $45 = $1;
   $46 = (($45) + ($44<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $47 - $40;
   HEAPF32[$46>>2] = $48;
   $49 = $i2;
   $50 = (($49) + 1)|0;
   $i2 = $50;
  }
  STACKTOP = sp;return;
 }
}
function __ZN4dLCP6solve1EPfiii($this,$a,$i,$dir,$only_transfer) {
 $this = $this|0;
 $a = $a|0;
 $i = $i|0;
 $dir = $dir|0;
 $only_transfer = $only_transfer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $aptr = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $i;
 $3 = $dir;
 $4 = $only_transfer;
 $5 = $0;
 $6 = ((($5)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($5)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $aptr = $13;
 $j = 0;
 while(1) {
  $14 = $j;
  $15 = ((($5)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $j;
  $19 = $aptr;
  $20 = (($19) + ($18<<2)|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $j;
  $23 = ((($5)) + 48|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($22<<2)|0);
  HEAPF32[$25>>2] = $21;
  $26 = $j;
  $27 = (($26) + 1)|0;
  $j = $27;
 }
 $28 = ((($5)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $j = $29;
 while(1) {
  $30 = $j;
  $31 = ((($5)) + 76|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($30|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $j;
  $35 = ((($5)) + 72|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($34<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $aptr;
  $40 = (($39) + ($38<<2)|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $j;
  $43 = ((($5)) + 48|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($42<<2)|0);
  HEAPF32[$45>>2] = $41;
  $46 = $j;
  $47 = (($46) + 1)|0;
  $j = $47;
 }
 $48 = ((($5)) + 40|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($5)) + 48|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($5)) + 76|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($5)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 _dSolveL1($49,$51,$53,$55);
 $j = 0;
 while(1) {
  $56 = $j;
  $57 = ((($5)) + 76|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($56|0)<($58|0);
  if (!($59)) {
   break;
  }
  $60 = $j;
  $61 = ((($5)) + 48|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + ($60<<2)|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $j;
  $66 = ((($5)) + 44|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + ($65<<2)|0);
  $69 = +HEAPF32[$68>>2];
  $70 = $64 * $69;
  $71 = $j;
  $72 = ((($5)) + 52|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($71<<2)|0);
  HEAPF32[$74>>2] = $70;
  $75 = $j;
  $76 = (($75) + 1)|0;
  $j = $76;
 }
 $77 = $4;
 $78 = ($77|0)!=(0);
 if ($78) {
  STACKTOP = sp;return;
 }
 $j = 0;
 while(1) {
  $79 = $j;
  $80 = ((($5)) + 76|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($79|0)<($81|0);
  if (!($82)) {
   break;
  }
  $83 = $j;
  $84 = ((($5)) + 52|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + ($83<<2)|0);
  $87 = +HEAPF32[$86>>2];
  $88 = $j;
  $89 = ((($5)) + 56|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + ($88<<2)|0);
  HEAPF32[$91>>2] = $87;
  $92 = $j;
  $93 = (($92) + 1)|0;
  $j = $93;
 }
 $94 = ((($5)) + 40|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ((($5)) + 56|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($5)) + 76|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ((($5)) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 _dSolveL1T($95,$97,$99,$101);
 $102 = $3;
 $103 = ($102|0)>(0);
 $j = 0;
 if ($103) {
  while(1) {
   $104 = $j;
   $105 = ((($5)) + 76|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($104|0)<($106|0);
   if (!($107)) {
    break;
   }
   $108 = $j;
   $109 = ((($5)) + 56|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + ($108<<2)|0);
   $112 = +HEAPF32[$111>>2];
   $113 = -$112;
   $114 = $j;
   $115 = ((($5)) + 72|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + ($114<<2)|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $1;
   $120 = (($119) + ($118<<2)|0);
   HEAPF32[$120>>2] = $113;
   $121 = $j;
   $122 = (($121) + 1)|0;
   $j = $122;
  }
  STACKTOP = sp;return;
 } else {
  while(1) {
   $123 = $j;
   $124 = ((($5)) + 76|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)<($125|0);
   if (!($126)) {
    break;
   }
   $127 = $j;
   $128 = ((($5)) + 56|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) + ($127<<2)|0);
   $131 = +HEAPF32[$130>>2];
   $132 = $j;
   $133 = ((($5)) + 72|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + ($132<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $1;
   $138 = (($137) + ($136<<2)|0);
   HEAPF32[$138>>2] = $131;
   $139 = $j;
   $140 = (($139) + 1)|0;
   $j = $140;
  }
  STACKTOP = sp;return;
 }
}
function __ZN4dLCP9unpermuteEv($this) {
 $this = $this|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2<<2;
 $4 = (($3) + 15)|0;
 $$alloca_mul = $4;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $6 = $5;
 $7 = (($6) - 1)|0;
 $8 = $7 | 15;
 $9 = (($8) + 1)|0;
 $10 = $9;
 $tmp = $10;
 $11 = $tmp;
 $12 = ((($1)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$1>>2]|0;
 $15 = $14<<2;
 _memcpy(($11|0),($13|0),($15|0))|0;
 $j = 0;
 while(1) {
  $16 = $j;
  $17 = HEAP32[$1>>2]|0;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $j;
  $20 = $tmp;
  $21 = (($20) + ($19<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $j;
  $24 = ((($1)) + 68|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($23<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($1)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($27<<2)|0);
  HEAPF32[$30>>2] = $22;
  $31 = $j;
  $32 = (($31) + 1)|0;
  $j = $32;
 }
 $33 = $tmp;
 $34 = ((($1)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$1>>2]|0;
 $37 = $36<<2;
 _memcpy(($33|0),($35|0),($37|0))|0;
 $j = 0;
 while(1) {
  $38 = $j;
  $39 = HEAP32[$1>>2]|0;
  $40 = ($38|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = $j;
  $42 = $tmp;
  $43 = (($42) + ($41<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $j;
  $46 = ((($1)) + 68|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($45<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($1)) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($49<<2)|0);
  HEAPF32[$52>>2] = $44;
  $53 = $j;
  $54 = (($53) + 1)|0;
  $j = $54;
 }
 STACKTOP = sp;return;
}
function __Z9dSolveLCPiPfS_S_S_iS_S_Pi($n,$A,$x,$b,$w,$nub,$lo,$hi,$findex) {
 $n = $n|0;
 $A = $A|0;
 $x = $x|0;
 $b = $b|0;
 $w = $w|0;
 $nub = $nub|0;
 $lo = $lo|0;
 $hi = $hi|0;
 $findex = $findex|0;
 var $$alloca_mul = 0, $$alloca_mul32 = 0, $$alloca_mul34 = 0, $$alloca_mul36 = 0, $$alloca_mul38 = 0, $$alloca_mul40 = 0, $$alloca_mul42 = 0, $$alloca_mul44 = 0, $$alloca_mul46 = 0, $$alloca_mul48 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0;
 var $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0;
 var $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0;
 var $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0.0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0, $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0.0, $528 = 0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0.0, $537 = 0, $538 = 0.0, $539 = 0;
 var $54 = 0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0.0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Arows = 0, $C = 0;
 var $Dell = 0, $L = 0, $cmd = 0, $d = 0, $delta_w = 0, $delta_x = 0, $dir = 0, $dirf = 0.0, $ell = 0, $hit_first_friction_index = 0, $i = 0, $k = 0, $lcp = 0, $nskip = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, $or$cond9 = 0, $p = 0, $s = 0.0, $s2 = 0.0, $s21 = 0.0, $s22 = 0.0, $s23 = 0.0, $s24 = 0.0, $si = 0, $state = 0, $vararg_buffer = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_ptr19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer20 = sp + 16|0;
 $vararg_buffer16 = sp + 8|0;
 $vararg_buffer = sp;
 $lcp = sp + 56|0;
 $0 = $n;
 $1 = $A;
 $2 = $x;
 $3 = $b;
 $4 = $w;
 $5 = $nub;
 $6 = $lo;
 $7 = $hi;
 $8 = $findex;
 $9 = $0;
 $10 = ($9|0)>(0);
 $11 = $1;
 $12 = ($11|0)!=(0|0);
 $or$cond = $10 & $12;
 $13 = $2;
 $14 = ($13|0)!=(0|0);
 $or$cond3 = $or$cond & $14;
 $15 = $3;
 $16 = ($15|0)!=(0|0);
 $or$cond5 = $or$cond3 & $16;
 $17 = $4;
 $18 = ($17|0)!=(0|0);
 $or$cond7 = $or$cond5 & $18;
 $19 = $6;
 $20 = ($19|0)!=(0|0);
 $or$cond9 = $or$cond7 & $20;
 $21 = $7;
 $22 = ($21|0)!=(0|0);
 $or$cond11 = $or$cond9 & $22;
 $23 = $5;
 $24 = ($23|0)>=(0);
 $or$cond13 = $or$cond11 & $24;
 if ($or$cond13) {
  $25 = $5;
  $26 = $0;
  $27 = ($25|0)<=($26|0);
  if (!($27)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 4350;
  _dDebug(2,6111,$vararg_buffer);
 }
 $hit_first_friction_index = 0;
 $28 = $0;
 $29 = ($28|0)>(1);
 $30 = $0;
 if ($29) {
  $31 = (($30) - 1)|0;
  $32 = $31 | 3;
  $33 = (($32) + 1)|0;
  $34 = $33;
 } else {
  $34 = $30;
 }
 $nskip = $34;
 $35 = $5;
 $36 = $0;
 $37 = ($35|0)>=($36|0);
 if ($37) {
  $38 = $1;
  $39 = $4;
  $40 = $0;
  $41 = $nskip;
  _dFactorLDLT($38,$39,$40,$41);
  $42 = $1;
  $43 = $4;
  $44 = $3;
  $45 = $0;
  $46 = $nskip;
  _dSolveLDLT($42,$43,$44,$45,$46);
  $47 = $2;
  $48 = $3;
  $49 = $0;
  $50 = $49<<2;
  _memcpy(($47|0),($48|0),($50|0))|0;
  $51 = $4;
  $52 = $0;
  _dSetZero($51,$52);
  STACKTOP = sp;return;
 }
 $k = 0;
 while(1) {
  $53 = $k;
  $54 = $0;
  $55 = ($53|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = $k;
  $57 = $6;
  $58 = (($57) + ($56<<2)|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $59 <= 0.0;
  if ($60) {
   $61 = $k;
   $62 = $7;
   $63 = (($62) + ($61<<2)|0);
   $64 = +HEAPF32[$63>>2];
   $65 = $64 >= 0.0;
   if (!($65)) {
    label = 12;
   }
  } else {
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   HEAP32[$vararg_buffer16>>2] = 4350;
   $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
   HEAP32[$vararg_ptr19>>2] = 4267;
   _dDebug(1,4360,$vararg_buffer16);
  }
  $66 = $k;
  $67 = (($66) + 1)|0;
  $k = $67;
 }
 $68 = $0;
 $69 = $nskip;
 $70 = Math_imul($68, $69)|0;
 $71 = $70<<2;
 $72 = (($71) + 15)|0;
 $$alloca_mul = $72;
 $73 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $74 = $73;
 $75 = (($74) - 1)|0;
 $76 = $75 | 15;
 $77 = (($76) + 1)|0;
 $78 = $77;
 $L = $78;
 $79 = $0;
 $80 = $79<<2;
 $81 = (($80) + 15)|0;
 $$alloca_mul32 = $81;
 $82 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul32)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $83 = $82;
 $84 = (($83) - 1)|0;
 $85 = $84 | 15;
 $86 = (($85) + 1)|0;
 $87 = $86;
 $d = $87;
 $88 = $0;
 $89 = $88<<2;
 $90 = (($89) + 15)|0;
 $$alloca_mul34 = $90;
 $91 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul34)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $92 = $91;
 $93 = (($92) - 1)|0;
 $94 = $93 | 15;
 $95 = (($94) + 1)|0;
 $96 = $95;
 $delta_x = $96;
 $97 = $0;
 $98 = $97<<2;
 $99 = (($98) + 15)|0;
 $$alloca_mul36 = $99;
 $100 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul36)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $101 = $100;
 $102 = (($101) - 1)|0;
 $103 = $102 | 15;
 $104 = (($103) + 1)|0;
 $105 = $104;
 $delta_w = $105;
 $106 = $0;
 $107 = $106<<2;
 $108 = (($107) + 15)|0;
 $$alloca_mul38 = $108;
 $109 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul38)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $110 = $109;
 $111 = (($110) - 1)|0;
 $112 = $111 | 15;
 $113 = (($112) + 1)|0;
 $114 = $113;
 $Dell = $114;
 $115 = $0;
 $116 = $115<<2;
 $117 = (($116) + 15)|0;
 $$alloca_mul40 = $117;
 $118 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul40)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $119 = $118;
 $120 = (($119) - 1)|0;
 $121 = $120 | 15;
 $122 = (($121) + 1)|0;
 $123 = $122;
 $ell = $123;
 $124 = $0;
 $125 = $124<<2;
 $126 = (($125) + 15)|0;
 $$alloca_mul42 = $126;
 $127 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul42)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $128 = $127;
 $129 = (($128) - 1)|0;
 $130 = $129 | 15;
 $131 = (($130) + 1)|0;
 $132 = $131;
 $Arows = $132;
 $133 = $0;
 $134 = $133<<2;
 $135 = (($134) + 15)|0;
 $$alloca_mul44 = $135;
 $136 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul44)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $137 = $136;
 $138 = (($137) - 1)|0;
 $139 = $138 | 15;
 $140 = (($139) + 1)|0;
 $141 = $140;
 $p = $141;
 $142 = $0;
 $143 = $142<<2;
 $144 = (($143) + 15)|0;
 $$alloca_mul46 = $144;
 $145 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul46)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $146 = $145;
 $147 = (($146) - 1)|0;
 $148 = $147 | 15;
 $149 = (($148) + 1)|0;
 $150 = $149;
 $C = $150;
 $151 = $0;
 $152 = $151<<2;
 $153 = (($152) + 15)|0;
 $$alloca_mul48 = $153;
 $154 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul48)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $155 = $154;
 $156 = (($155) - 1)|0;
 $157 = $156 | 15;
 $158 = (($157) + 1)|0;
 $159 = $158;
 $state = $159;
 $160 = $0;
 $161 = $5;
 $162 = $1;
 $163 = $2;
 $164 = $3;
 $165 = $4;
 $166 = $6;
 $167 = $7;
 $168 = $L;
 $169 = $d;
 $170 = $Dell;
 $171 = $ell;
 $172 = $delta_w;
 $173 = $state;
 $174 = $8;
 $175 = $p;
 $176 = $C;
 $177 = $Arows;
 __ZN4dLCPC2EiiPfS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PiS1_S1_S1_PS0_($lcp,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171,$172,$173,$174,$175,$176,$177);
 $178 = (__ZN4dLCP6getNubEv($lcp)|0);
 $5 = $178;
 $179 = $5;
 $i = $179;
 L22: while(1) {
  $180 = $i;
  $181 = $0;
  $182 = ($180|0)<($181|0);
  if (!($182)) {
   break;
  }
  $183 = $hit_first_friction_index;
  $184 = ($183|0)==(0);
  $185 = $8;
  $186 = ($185|0)!=(0|0);
  $or$cond15 = $184 & $186;
  if ($or$cond15) {
   $187 = $i;
   $188 = $8;
   $189 = (($188) + ($187<<2)|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = ($190|0)>=(0);
   if ($191) {
    $k = 0;
    while(1) {
     $192 = $k;
     $193 = $0;
     $194 = ($192|0)<($193|0);
     if (!($194)) {
      break;
     }
     $195 = $k;
     $196 = $2;
     $197 = (($196) + ($195<<2)|0);
     $198 = +HEAPF32[$197>>2];
     $199 = $k;
     $200 = $p;
     $201 = (($200) + ($199<<2)|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = $delta_w;
     $204 = (($203) + ($202<<2)|0);
     HEAPF32[$204>>2] = $198;
     $205 = $k;
     $206 = (($205) + 1)|0;
     $k = $206;
    }
    $207 = $i;
    $k = $207;
    while(1) {
     $208 = $k;
     $209 = $0;
     $210 = ($208|0)<($209|0);
     if (!($210)) {
      break;
     }
     $211 = $k;
     $212 = $7;
     $213 = (($212) + ($211<<2)|0);
     $214 = +HEAPF32[$213>>2];
     $215 = $k;
     $216 = $8;
     $217 = (($216) + ($215<<2)|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = $delta_w;
     $220 = (($219) + ($218<<2)|0);
     $221 = +HEAPF32[$220>>2];
     $222 = $214 * $221;
     $223 = $222;
     $224 = (+Math_abs((+$223)));
     $225 = $224;
     $226 = $k;
     $227 = $7;
     $228 = (($227) + ($226<<2)|0);
     HEAPF32[$228>>2] = $225;
     $229 = $k;
     $230 = $7;
     $231 = (($230) + ($229<<2)|0);
     $232 = +HEAPF32[$231>>2];
     $233 = -$232;
     $234 = $k;
     $235 = $6;
     $236 = (($235) + ($234<<2)|0);
     HEAPF32[$236>>2] = $233;
     $237 = $k;
     $238 = (($237) + 1)|0;
     $k = $238;
    }
    $hit_first_friction_index = 1;
   }
  }
  $239 = $i;
  $240 = $2;
  $241 = (+__ZN4dLCP12AiC_times_qCEiPf($lcp,$239,$240));
  $242 = $i;
  $243 = $2;
  $244 = (+__ZN4dLCP12AiN_times_qNEiPf($lcp,$242,$243));
  $245 = $241 + $244;
  $246 = $i;
  $247 = $3;
  $248 = (($247) + ($246<<2)|0);
  $249 = +HEAPF32[$248>>2];
  $250 = $245 - $249;
  $251 = $i;
  $252 = $4;
  $253 = (($252) + ($251<<2)|0);
  HEAPF32[$253>>2] = $250;
  $254 = $i;
  $255 = $6;
  $256 = (($255) + ($254<<2)|0);
  $257 = +HEAPF32[$256>>2];
  $258 = $257 == 0.0;
  if ($258) {
   $259 = $i;
   $260 = $4;
   $261 = (($260) + ($259<<2)|0);
   $262 = +HEAPF32[$261>>2];
   $263 = $262 >= 0.0;
   if ($263) {
    $264 = $i;
    __ZN4dLCP15transfer_i_to_NEi($lcp,$264);
    $265 = $i;
    $266 = $state;
    $267 = (($266) + ($265<<2)|0);
    HEAP32[$267>>2] = 0;
   } else {
    label = 28;
   }
  } else {
   label = 28;
  }
  L40: do {
   if ((label|0) == 28) {
    label = 0;
    $268 = $i;
    $269 = $7;
    $270 = (($269) + ($268<<2)|0);
    $271 = +HEAPF32[$270>>2];
    $272 = $271 == 0.0;
    if ($272) {
     $273 = $i;
     $274 = $4;
     $275 = (($274) + ($273<<2)|0);
     $276 = +HEAPF32[$275>>2];
     $277 = $276 <= 0.0;
     if ($277) {
      $278 = $i;
      __ZN4dLCP15transfer_i_to_NEi($lcp,$278);
      $279 = $i;
      $280 = $state;
      $281 = (($280) + ($279<<2)|0);
      HEAP32[$281>>2] = 1;
      break;
     }
    }
    $282 = $i;
    $283 = $4;
    $284 = (($283) + ($282<<2)|0);
    $285 = +HEAPF32[$284>>2];
    $286 = $285 == 0.0;
    if ($286) {
     $287 = $delta_x;
     $288 = $i;
     __ZN4dLCP6solve1EPfiii($lcp,$287,$288,0,1);
     $289 = $i;
     __ZN4dLCP15transfer_i_to_CEi($lcp,$289);
     break;
    }
    while(1) {
     $290 = $i;
     $291 = $4;
     $292 = (($291) + ($290<<2)|0);
     $293 = +HEAPF32[$292>>2];
     $294 = $293 <= 0.0;
     if ($294) {
      $dir = 1;
      $dirf = 1.0;
     } else {
      $dir = -1;
      $dirf = -1.0;
     }
     $295 = $delta_x;
     $296 = $i;
     $297 = $dir;
     __ZN4dLCP6solve1EPfiii($lcp,$295,$296,$297,0);
     $298 = $delta_w;
     $299 = $delta_x;
     __ZN4dLCP22pN_equals_ANC_times_qCEPfS0_($lcp,$298,$299);
     $300 = $delta_w;
     $301 = $i;
     $302 = $dir;
     __ZN4dLCP17pN_plusequals_ANiEPfii($lcp,$300,$301,$302);
     $303 = $i;
     $304 = $delta_x;
     $305 = (+__ZN4dLCP12AiC_times_qCEiPf($lcp,$303,$304));
     $306 = $i;
     $307 = (+__ZN4dLCP3AiiEi($lcp,$306));
     $308 = $dirf;
     $309 = $307 * $308;
     $310 = $305 + $309;
     $311 = $i;
     $312 = $delta_w;
     $313 = (($312) + ($311<<2)|0);
     HEAPF32[$313>>2] = $310;
     $cmd = 1;
     $si = 0;
     $314 = $i;
     $315 = $4;
     $316 = (($315) + ($314<<2)|0);
     $317 = +HEAPF32[$316>>2];
     $318 = -$317;
     $319 = $i;
     $320 = $delta_w;
     $321 = (($320) + ($319<<2)|0);
     $322 = +HEAPF32[$321>>2];
     $323 = $318 / $322;
     $s = $323;
     $324 = $dir;
     $325 = ($324|0)>(0);
     $326 = $i;
     if ($325) {
      $327 = $7;
      $328 = (($327) + ($326<<2)|0);
      $329 = +HEAPF32[$328>>2];
      $330 = +HEAPF32[180>>2];
      $331 = $329 < $330;
      if ($331) {
       $332 = $i;
       $333 = $7;
       $334 = (($333) + ($332<<2)|0);
       $335 = +HEAPF32[$334>>2];
       $336 = $i;
       $337 = $2;
       $338 = (($337) + ($336<<2)|0);
       $339 = +HEAPF32[$338>>2];
       $340 = $335 - $339;
       $341 = $dirf;
       $342 = $340 / $341;
       $s2 = $342;
       $343 = $s2;
       $344 = $s;
       $345 = $343 < $344;
       if ($345) {
        $346 = $s2;
        $s = $346;
        $cmd = 3;
       }
      }
     } else {
      $347 = $6;
      $348 = (($347) + ($326<<2)|0);
      $349 = +HEAPF32[$348>>2];
      $350 = +HEAPF32[180>>2];
      $351 = -$350;
      $352 = $349 > $351;
      if ($352) {
       $353 = $i;
       $354 = $6;
       $355 = (($354) + ($353<<2)|0);
       $356 = +HEAPF32[$355>>2];
       $357 = $i;
       $358 = $2;
       $359 = (($358) + ($357<<2)|0);
       $360 = +HEAPF32[$359>>2];
       $361 = $356 - $360;
       $362 = $dirf;
       $363 = $361 / $362;
       $s21 = $363;
       $364 = $s21;
       $365 = $s;
       $366 = $364 < $365;
       if ($366) {
        $367 = $s21;
        $s = $367;
        $cmd = 2;
       }
      }
     }
     $k = 0;
     while(1) {
      $368 = $k;
      $369 = (__ZN4dLCP4numNEv($lcp)|0);
      $370 = ($368|0)<($369|0);
      if (!($370)) {
       break;
      }
      $371 = $k;
      $372 = (__ZN4dLCP6indexNEi($lcp,$371)|0);
      $373 = $state;
      $374 = (($373) + ($372<<2)|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = ($375|0)==(0);
      if ($376) {
       $377 = $k;
       $378 = (__ZN4dLCP6indexNEi($lcp,$377)|0);
       $379 = $delta_w;
       $380 = (($379) + ($378<<2)|0);
       $381 = +HEAPF32[$380>>2];
       $382 = $381 < 0.0;
       if ($382) {
        label = 49;
       } else {
        label = 47;
       }
      } else {
       label = 47;
      }
      if ((label|0) == 47) {
       label = 0;
       $383 = $k;
       $384 = (__ZN4dLCP6indexNEi($lcp,$383)|0);
       $385 = $state;
       $386 = (($385) + ($384<<2)|0);
       $387 = HEAP32[$386>>2]|0;
       $388 = ($387|0)!=(0);
       if ($388) {
        $389 = $k;
        $390 = (__ZN4dLCP6indexNEi($lcp,$389)|0);
        $391 = $delta_w;
        $392 = (($391) + ($390<<2)|0);
        $393 = +HEAPF32[$392>>2];
        $394 = $393 > 0.0;
        if ($394) {
         label = 49;
        }
       }
      }
      do {
       if ((label|0) == 49) {
        label = 0;
        $395 = $k;
        $396 = (__ZN4dLCP6indexNEi($lcp,$395)|0);
        $397 = $6;
        $398 = (($397) + ($396<<2)|0);
        $399 = +HEAPF32[$398>>2];
        $400 = $399 == 0.0;
        if ($400) {
         $401 = $k;
         $402 = (__ZN4dLCP6indexNEi($lcp,$401)|0);
         $403 = $7;
         $404 = (($403) + ($402<<2)|0);
         $405 = +HEAPF32[$404>>2];
         $406 = $405 == 0.0;
         if ($406) {
          break;
         }
        }
        $407 = $k;
        $408 = (__ZN4dLCP6indexNEi($lcp,$407)|0);
        $409 = $4;
        $410 = (($409) + ($408<<2)|0);
        $411 = +HEAPF32[$410>>2];
        $412 = -$411;
        $413 = $k;
        $414 = (__ZN4dLCP6indexNEi($lcp,$413)|0);
        $415 = $delta_w;
        $416 = (($415) + ($414<<2)|0);
        $417 = +HEAPF32[$416>>2];
        $418 = $412 / $417;
        $s22 = $418;
        $419 = $s22;
        $420 = $s;
        $421 = $419 < $420;
        if ($421) {
         $422 = $s22;
         $s = $422;
         $cmd = 4;
         $423 = $k;
         $424 = (__ZN4dLCP6indexNEi($lcp,$423)|0);
         $si = $424;
        }
       }
      } while(0);
      $425 = $k;
      $426 = (($425) + 1)|0;
      $k = $426;
     }
     $427 = $5;
     $k = $427;
     while(1) {
      $428 = $k;
      $429 = (__ZN4dLCP4numCEv($lcp)|0);
      $430 = ($428|0)<($429|0);
      if (!($430)) {
       break;
      }
      $431 = $k;
      $432 = (__ZN4dLCP6indexCEi($lcp,$431)|0);
      $433 = $delta_x;
      $434 = (($433) + ($432<<2)|0);
      $435 = +HEAPF32[$434>>2];
      $436 = $435 < 0.0;
      if ($436) {
       $437 = $k;
       $438 = (__ZN4dLCP6indexCEi($lcp,$437)|0);
       $439 = $6;
       $440 = (($439) + ($438<<2)|0);
       $441 = +HEAPF32[$440>>2];
       $442 = +HEAPF32[180>>2];
       $443 = -$442;
       $444 = $441 > $443;
       if ($444) {
        $445 = $k;
        $446 = (__ZN4dLCP6indexCEi($lcp,$445)|0);
        $447 = $6;
        $448 = (($447) + ($446<<2)|0);
        $449 = +HEAPF32[$448>>2];
        $450 = $k;
        $451 = (__ZN4dLCP6indexCEi($lcp,$450)|0);
        $452 = $2;
        $453 = (($452) + ($451<<2)|0);
        $454 = +HEAPF32[$453>>2];
        $455 = $449 - $454;
        $456 = $k;
        $457 = (__ZN4dLCP6indexCEi($lcp,$456)|0);
        $458 = $delta_x;
        $459 = (($458) + ($457<<2)|0);
        $460 = +HEAPF32[$459>>2];
        $461 = $455 / $460;
        $s23 = $461;
        $462 = $s23;
        $463 = $s;
        $464 = $462 < $463;
        if ($464) {
         $465 = $s23;
         $s = $465;
         $cmd = 5;
         $466 = $k;
         $467 = (__ZN4dLCP6indexCEi($lcp,$466)|0);
         $si = $467;
        }
       }
      }
      $468 = $k;
      $469 = (__ZN4dLCP6indexCEi($lcp,$468)|0);
      $470 = $delta_x;
      $471 = (($470) + ($469<<2)|0);
      $472 = +HEAPF32[$471>>2];
      $473 = $472 > 0.0;
      if ($473) {
       $474 = $k;
       $475 = (__ZN4dLCP6indexCEi($lcp,$474)|0);
       $476 = $7;
       $477 = (($476) + ($475<<2)|0);
       $478 = +HEAPF32[$477>>2];
       $479 = +HEAPF32[180>>2];
       $480 = $478 < $479;
       if ($480) {
        $481 = $k;
        $482 = (__ZN4dLCP6indexCEi($lcp,$481)|0);
        $483 = $7;
        $484 = (($483) + ($482<<2)|0);
        $485 = +HEAPF32[$484>>2];
        $486 = $k;
        $487 = (__ZN4dLCP6indexCEi($lcp,$486)|0);
        $488 = $2;
        $489 = (($488) + ($487<<2)|0);
        $490 = +HEAPF32[$489>>2];
        $491 = $485 - $490;
        $492 = $k;
        $493 = (__ZN4dLCP6indexCEi($lcp,$492)|0);
        $494 = $delta_x;
        $495 = (($494) + ($493<<2)|0);
        $496 = +HEAPF32[$495>>2];
        $497 = $491 / $496;
        $s24 = $497;
        $498 = $s24;
        $499 = $s;
        $500 = $498 < $499;
        if ($500) {
         $501 = $s24;
         $s = $501;
         $cmd = 6;
         $502 = $k;
         $503 = (__ZN4dLCP6indexCEi($lcp,$502)|0);
         $si = $503;
        }
       }
      }
      $504 = $k;
      $505 = (($504) + 1)|0;
      $k = $505;
     }
     $506 = $s;
     $507 = $506 <= 0.0;
     if ($507) {
      label = 66;
      break L22;
     }
     $526 = $2;
     $527 = $s;
     $528 = $delta_x;
     __ZN4dLCP24pC_plusequals_s_times_qCEPffS0_($lcp,$526,$527,$528);
     $529 = $s;
     $530 = $dirf;
     $531 = $529 * $530;
     $532 = $i;
     $533 = $2;
     $534 = (($533) + ($532<<2)|0);
     $535 = +HEAPF32[$534>>2];
     $536 = $535 + $531;
     HEAPF32[$534>>2] = $536;
     $537 = $4;
     $538 = $s;
     $539 = $delta_w;
     __ZN4dLCP24pN_plusequals_s_times_qNEPffS0_($lcp,$537,$538,$539);
     $540 = $s;
     $541 = $i;
     $542 = $delta_w;
     $543 = (($542) + ($541<<2)|0);
     $544 = +HEAPF32[$543>>2];
     $545 = $540 * $544;
     $546 = $i;
     $547 = $4;
     $548 = (($547) + ($546<<2)|0);
     $549 = +HEAPF32[$548>>2];
     $550 = $549 + $545;
     HEAPF32[$548>>2] = $550;
     $551 = $cmd;
     switch ($551|0) {
     case 1:  {
      $552 = $i;
      $553 = $4;
      $554 = (($553) + ($552<<2)|0);
      HEAPF32[$554>>2] = 0.0;
      $555 = $i;
      __ZN4dLCP15transfer_i_to_CEi($lcp,$555);
      break;
     }
     case 2:  {
      $556 = $i;
      $557 = $6;
      $558 = (($557) + ($556<<2)|0);
      $559 = +HEAPF32[$558>>2];
      $560 = $i;
      $561 = $2;
      $562 = (($561) + ($560<<2)|0);
      HEAPF32[$562>>2] = $559;
      $563 = $i;
      $564 = $state;
      $565 = (($564) + ($563<<2)|0);
      HEAP32[$565>>2] = 0;
      $566 = $i;
      __ZN4dLCP15transfer_i_to_NEi($lcp,$566);
      break;
     }
     case 3:  {
      $567 = $i;
      $568 = $7;
      $569 = (($568) + ($567<<2)|0);
      $570 = +HEAPF32[$569>>2];
      $571 = $i;
      $572 = $2;
      $573 = (($572) + ($571<<2)|0);
      HEAPF32[$573>>2] = $570;
      $574 = $i;
      $575 = $state;
      $576 = (($575) + ($574<<2)|0);
      HEAP32[$576>>2] = 1;
      $577 = $i;
      __ZN4dLCP15transfer_i_to_NEi($lcp,$577);
      break;
     }
     case 4:  {
      $578 = $si;
      $579 = $4;
      $580 = (($579) + ($578<<2)|0);
      HEAPF32[$580>>2] = 0.0;
      $581 = $si;
      __ZN4dLCP22transfer_i_from_N_to_CEi($lcp,$581);
      break;
     }
     case 5:  {
      $582 = $si;
      $583 = $6;
      $584 = (($583) + ($582<<2)|0);
      $585 = +HEAPF32[$584>>2];
      $586 = $si;
      $587 = $2;
      $588 = (($587) + ($586<<2)|0);
      HEAPF32[$588>>2] = $585;
      $589 = $si;
      $590 = $state;
      $591 = (($590) + ($589<<2)|0);
      HEAP32[$591>>2] = 0;
      $592 = $si;
      __ZN4dLCP22transfer_i_from_C_to_NEi($lcp,$592);
      break;
     }
     case 6:  {
      $593 = $si;
      $594 = $7;
      $595 = (($594) + ($593<<2)|0);
      $596 = +HEAPF32[$595>>2];
      $597 = $si;
      $598 = $2;
      $599 = (($598) + ($597<<2)|0);
      HEAPF32[$599>>2] = $596;
      $600 = $si;
      $601 = $state;
      $602 = (($601) + ($600<<2)|0);
      HEAP32[$602>>2] = 1;
      $603 = $si;
      __ZN4dLCP22transfer_i_from_C_to_NEi($lcp,$603);
      break;
     }
     default: {
     }
     }
     $604 = $cmd;
     $605 = ($604|0)<=(3);
     if ($605) {
      break L40;
     }
    }
   }
  } while(0);
  $606 = $i;
  $607 = (($606) + 1)|0;
  $i = $607;
 }
 if ((label|0) == 66) {
  $508 = $s;
  $509 = $508;
  HEAPF64[$vararg_buffer20>>3] = $509;
  _dMessage(3,4314,$vararg_buffer20);
  $510 = $i;
  $511 = $0;
  $512 = (($511) - 1)|0;
  $513 = ($510|0)<($512|0);
  if ($513) {
   $514 = $2;
   $515 = $i;
   $516 = (($514) + ($515<<2)|0);
   $517 = $0;
   $518 = $i;
   $519 = (($517) - ($518))|0;
   _dSetZero($516,$519);
   $520 = $4;
   $521 = $i;
   $522 = (($520) + ($521<<2)|0);
   $523 = $0;
   $524 = $i;
   $525 = (($523) - ($524))|0;
   _dSetZero($522,$525);
  }
 }
 __ZN4dLCP9unpermuteEv($lcp);
 STACKTOP = sp;return;
}
function __ZL11swapProblemPPfS_S_S_S_S_PiS1_S1_iiiii($A,$x,$b,$w,$lo,$hi,$p,$state,$findex,$n,$i1,$i2,$nskip,$do_fast_row_swaps) {
 $A = $A|0;
 $x = $x|0;
 $b = $b|0;
 $w = $w|0;
 $lo = $lo|0;
 $hi = $hi|0;
 $p = $p|0;
 $state = $state|0;
 $findex = $findex|0;
 $n = $n|0;
 $i1 = $i1|0;
 $i2 = $i2|0;
 $nskip = $nskip|0;
 $do_fast_row_swaps = $do_fast_row_swaps|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $tmp = 0.0, $tmpi = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $A;
 $1 = $x;
 $2 = $b;
 $3 = $w;
 $4 = $lo;
 $5 = $hi;
 $6 = $p;
 $7 = $state;
 $8 = $findex;
 $9 = $n;
 $10 = $i1;
 $11 = $i2;
 $12 = $nskip;
 $13 = $do_fast_row_swaps;
 $14 = $9;
 $15 = ($14|0)>(0);
 $16 = $10;
 $17 = ($16|0)>=(0);
 $or$cond = $15 & $17;
 $18 = $11;
 $19 = ($18|0)>=(0);
 $or$cond3 = $or$cond & $19;
 if ($or$cond3) {
  $20 = $10;
  $21 = $9;
  $22 = ($20|0)<($21|0);
  if ($22) {
   $23 = $11;
   $24 = $9;
   $25 = ($23|0)<($24|0);
   if ($25) {
    $26 = $12;
    $27 = $9;
    $28 = ($26|0)>=($27|0);
    if ($28) {
     $29 = $10;
     $30 = $11;
     $31 = ($29|0)<=($30|0);
     if (!($31)) {
      label = 6;
     }
    } else {
     label = 6;
    }
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  HEAP32[$vararg_buffer>>2] = 4520;
  $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 4267;
  _dDebug(1,4417,$vararg_buffer);
 }
 $32 = $10;
 $33 = $11;
 $34 = ($32|0)==($33|0);
 if ($34) {
  STACKTOP = sp;return;
 }
 $35 = $0;
 $36 = $9;
 $37 = $10;
 $38 = $11;
 $39 = $12;
 $40 = $13;
 __ZL15swapRowsAndColsPPfiiiii($35,$36,$37,$38,$39,$40);
 $41 = $10;
 $42 = $1;
 $43 = (($42) + ($41<<2)|0);
 $44 = +HEAPF32[$43>>2];
 $tmp = $44;
 $45 = $11;
 $46 = $1;
 $47 = (($46) + ($45<<2)|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $10;
 $50 = $1;
 $51 = (($50) + ($49<<2)|0);
 HEAPF32[$51>>2] = $48;
 $52 = $tmp;
 $53 = $11;
 $54 = $1;
 $55 = (($54) + ($53<<2)|0);
 HEAPF32[$55>>2] = $52;
 $56 = $10;
 $57 = $2;
 $58 = (($57) + ($56<<2)|0);
 $59 = +HEAPF32[$58>>2];
 $tmp = $59;
 $60 = $11;
 $61 = $2;
 $62 = (($61) + ($60<<2)|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $10;
 $65 = $2;
 $66 = (($65) + ($64<<2)|0);
 HEAPF32[$66>>2] = $63;
 $67 = $tmp;
 $68 = $11;
 $69 = $2;
 $70 = (($69) + ($68<<2)|0);
 HEAPF32[$70>>2] = $67;
 $71 = $10;
 $72 = $3;
 $73 = (($72) + ($71<<2)|0);
 $74 = +HEAPF32[$73>>2];
 $tmp = $74;
 $75 = $11;
 $76 = $3;
 $77 = (($76) + ($75<<2)|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $10;
 $80 = $3;
 $81 = (($80) + ($79<<2)|0);
 HEAPF32[$81>>2] = $78;
 $82 = $tmp;
 $83 = $11;
 $84 = $3;
 $85 = (($84) + ($83<<2)|0);
 HEAPF32[$85>>2] = $82;
 $86 = $10;
 $87 = $4;
 $88 = (($87) + ($86<<2)|0);
 $89 = +HEAPF32[$88>>2];
 $tmp = $89;
 $90 = $11;
 $91 = $4;
 $92 = (($91) + ($90<<2)|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $10;
 $95 = $4;
 $96 = (($95) + ($94<<2)|0);
 HEAPF32[$96>>2] = $93;
 $97 = $tmp;
 $98 = $11;
 $99 = $4;
 $100 = (($99) + ($98<<2)|0);
 HEAPF32[$100>>2] = $97;
 $101 = $10;
 $102 = $5;
 $103 = (($102) + ($101<<2)|0);
 $104 = +HEAPF32[$103>>2];
 $tmp = $104;
 $105 = $11;
 $106 = $5;
 $107 = (($106) + ($105<<2)|0);
 $108 = +HEAPF32[$107>>2];
 $109 = $10;
 $110 = $5;
 $111 = (($110) + ($109<<2)|0);
 HEAPF32[$111>>2] = $108;
 $112 = $tmp;
 $113 = $11;
 $114 = $5;
 $115 = (($114) + ($113<<2)|0);
 HEAPF32[$115>>2] = $112;
 $116 = $10;
 $117 = $6;
 $118 = (($117) + ($116<<2)|0);
 $119 = HEAP32[$118>>2]|0;
 $tmpi = $119;
 $120 = $11;
 $121 = $6;
 $122 = (($121) + ($120<<2)|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $10;
 $125 = $6;
 $126 = (($125) + ($124<<2)|0);
 HEAP32[$126>>2] = $123;
 $127 = $tmpi;
 $128 = $11;
 $129 = $6;
 $130 = (($129) + ($128<<2)|0);
 HEAP32[$130>>2] = $127;
 $131 = $10;
 $132 = $7;
 $133 = (($132) + ($131<<2)|0);
 $134 = HEAP32[$133>>2]|0;
 $tmpi = $134;
 $135 = $11;
 $136 = $7;
 $137 = (($136) + ($135<<2)|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = $10;
 $140 = $7;
 $141 = (($140) + ($139<<2)|0);
 HEAP32[$141>>2] = $138;
 $142 = $tmpi;
 $143 = $11;
 $144 = $7;
 $145 = (($144) + ($143<<2)|0);
 HEAP32[$145>>2] = $142;
 $146 = $8;
 $147 = ($146|0)!=(0|0);
 if (!($147)) {
  STACKTOP = sp;return;
 }
 $148 = $10;
 $149 = $8;
 $150 = (($149) + ($148<<2)|0);
 $151 = HEAP32[$150>>2]|0;
 $tmpi = $151;
 $152 = $11;
 $153 = $8;
 $154 = (($153) + ($152<<2)|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = $10;
 $157 = $8;
 $158 = (($157) + ($156<<2)|0);
 HEAP32[$158>>2] = $155;
 $159 = $tmpi;
 $160 = $11;
 $161 = $8;
 $162 = (($161) + ($160<<2)|0);
 HEAP32[$162>>2] = $159;
 STACKTOP = sp;return;
}
function __ZN4dLCP6getNubEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN4dLCP12AiC_times_qCEiPf($this,$i,$q) {
 $this = $this|0;
 $i = $i|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $q;
 $3 = $0;
 $4 = $1;
 $5 = ((($3)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($3)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+_dDot($8,$9,$11));
 STACKTOP = sp;return (+$12);
}
function __ZN4dLCP15transfer_i_to_NEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = ((($2)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN4dLCP3AiiEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($3<<2)|0);
 $10 = +HEAPF32[$9>>2];
 STACKTOP = sp;return (+$10);
}
function __ZN4dLCP4numNEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN4dLCP6indexNEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN4dLCP4numCEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN4dLCP6indexCEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN4dLCP24pC_plusequals_s_times_qCEPffS0_($this,$p,$s,$q) {
 $this = $this|0;
 $p = $p|0;
 $s = +$s;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $s;
 $3 = $q;
 $4 = $0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ((($4)) + 76|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = $i;
  $11 = $3;
  $12 = (($11) + ($10<<2)|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9 * $13;
  $15 = $i;
  $16 = $1;
  $17 = (($16) + ($15<<2)|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $18 + $14;
  HEAPF32[$17>>2] = $19;
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 STACKTOP = sp;return;
}
function __ZN4dLCP24pN_plusequals_s_times_qNEPffS0_($this,$p,$s,$q) {
 $this = $this|0;
 $p = $p|0;
 $s = +$s;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $s;
 $3 = $q;
 $4 = $0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ((($4)) + 80|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = $i;
  $11 = ((($4)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + ($12))|0;
  $14 = $3;
  $15 = (($14) + ($13<<2)|0);
  $16 = +HEAPF32[$15>>2];
  $17 = $9 * $16;
  $18 = $i;
  $19 = ((($4)) + 76|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + ($20))|0;
  $22 = $1;
  $23 = (($22) + ($21<<2)|0);
  $24 = +HEAPF32[$23>>2];
  $25 = $24 + $17;
  HEAPF32[$23>>2] = $25;
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 STACKTOP = sp;return;
}
function __ZN4dLCP12AiN_times_qNEiPf($this,$i,$q) {
 $this = $this|0;
 $i = $i|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $q;
 $3 = $0;
 $4 = $1;
 $5 = ((($3)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($3)) + 76|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + ($10<<2)|0);
 $12 = $2;
 $13 = ((($3)) + 76|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + ($14<<2)|0);
 $16 = ((($3)) + 80|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (+_dDot($11,$15,$17));
 STACKTOP = sp;return (+$18);
}
function __ZL15swapRowsAndColsPPfiiiii($A,$n,$i1,$i2,$nskip,$do_fast_row_swaps) {
 $A = $A|0;
 $n = $n|0;
 $i1 = $i1|0;
 $i2 = $i2|0;
 $nskip = $nskip|0;
 $do_fast_row_swaps = $do_fast_row_swaps|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $i = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $tmp = 0.0, $tmpp = 0, $tmprow = 0, $vararg_buffer = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $A;
 $1 = $n;
 $2 = $i1;
 $3 = $i2;
 $4 = $nskip;
 $5 = $do_fast_row_swaps;
 $6 = $0;
 $7 = ($6|0)!=(0|0);
 $8 = $1;
 $9 = ($8|0)>(0);
 $or$cond = $7 & $9;
 $10 = $2;
 $11 = ($10|0)>=(0);
 $or$cond3 = $or$cond & $11;
 $12 = $3;
 $13 = ($12|0)>=(0);
 $or$cond5 = $or$cond3 & $13;
 if ($or$cond5) {
  $14 = $2;
  $15 = $1;
  $16 = ($14|0)<($15|0);
  if ($16) {
   $17 = $3;
   $18 = $1;
   $19 = ($17|0)<($18|0);
   if ($19) {
    $20 = $4;
    $21 = $1;
    $22 = ($20|0)>=($21|0);
    if ($22) {
     $23 = $2;
     $24 = $3;
     $25 = ($23|0)<($24|0);
     if (!($25)) {
      label = 6;
     }
    } else {
     label = 6;
    }
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  HEAP32[$vararg_buffer>>2] = 4642;
  $vararg_ptr6 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 4267;
  _dDebug(1,4532,$vararg_buffer);
 }
 $26 = $2;
 $27 = (($26) + 1)|0;
 $i = $27;
 while(1) {
  $28 = $i;
  $29 = $3;
  $30 = ($28|0)<($29|0);
  $31 = $2;
  if (!($30)) {
   break;
  }
  $32 = $i;
  $33 = $0;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($31<<2)|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $i;
  $39 = $2;
  $40 = $0;
  $41 = (($40) + ($39<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($38<<2)|0);
  HEAPF32[$43>>2] = $37;
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = (($31) + 1)|0;
 $i = $46;
 while(1) {
  $47 = $i;
  $48 = $3;
  $49 = ($47|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = $i;
  $51 = $3;
  $52 = $0;
  $53 = (($52) + ($51<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($50<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $2;
  $58 = $i;
  $59 = $0;
  $60 = (($59) + ($58<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($57<<2)|0);
  HEAPF32[$62>>2] = $56;
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 $65 = $2;
 $66 = $2;
 $67 = $0;
 $68 = (($67) + ($66<<2)|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + ($65<<2)|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $3;
 $73 = $2;
 $74 = $0;
 $75 = (($74) + ($73<<2)|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) + ($72<<2)|0);
 HEAPF32[$77>>2] = $71;
 $78 = $2;
 $79 = $3;
 $80 = $0;
 $81 = (($80) + ($79<<2)|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + ($78<<2)|0);
 $84 = +HEAPF32[$83>>2];
 $85 = $2;
 $86 = $2;
 $87 = $0;
 $88 = (($87) + ($86<<2)|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + ($85<<2)|0);
 HEAPF32[$90>>2] = $84;
 $91 = $3;
 $92 = $3;
 $93 = $0;
 $94 = (($93) + ($92<<2)|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + ($91<<2)|0);
 $97 = +HEAPF32[$96>>2];
 $98 = $2;
 $99 = $3;
 $100 = $0;
 $101 = (($100) + ($99<<2)|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + ($98<<2)|0);
 HEAPF32[$103>>2] = $97;
 $104 = $5;
 $105 = ($104|0)!=(0);
 if ($105) {
  $106 = $2;
  $107 = $0;
  $108 = (($107) + ($106<<2)|0);
  $109 = HEAP32[$108>>2]|0;
  $tmpp = $109;
  $110 = $3;
  $111 = $0;
  $112 = (($111) + ($110<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $2;
  $115 = $0;
  $116 = (($115) + ($114<<2)|0);
  HEAP32[$116>>2] = $113;
  $117 = $tmpp;
  $118 = $3;
  $119 = $0;
  $120 = (($119) + ($118<<2)|0);
  HEAP32[$120>>2] = $117;
 } else {
  $121 = $1;
  $122 = $121<<2;
  $123 = (($122) + 15)|0;
  $$alloca_mul = $123;
  $124 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
  $125 = $124;
  $126 = (($125) - 1)|0;
  $127 = $126 | 15;
  $128 = (($127) + 1)|0;
  $129 = $128;
  $tmprow = $129;
  $130 = $tmprow;
  $131 = $2;
  $132 = $0;
  $133 = (($132) + ($131<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $1;
  $136 = $135<<2;
  _memcpy(($130|0),($134|0),($136|0))|0;
  $137 = $2;
  $138 = $0;
  $139 = (($138) + ($137<<2)|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $3;
  $142 = $0;
  $143 = (($142) + ($141<<2)|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $1;
  $146 = $145<<2;
  _memcpy(($140|0),($144|0),($146|0))|0;
  $147 = $3;
  $148 = $0;
  $149 = (($148) + ($147<<2)|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $tmprow;
  $152 = $1;
  $153 = $152<<2;
  _memcpy(($150|0),($151|0),($153|0))|0;
 }
 $154 = $3;
 $155 = (($154) + 1)|0;
 $i = $155;
 while(1) {
  $156 = $i;
  $157 = $1;
  $158 = ($156|0)<($157|0);
  if (!($158)) {
   break;
  }
  $159 = $2;
  $160 = $i;
  $161 = $0;
  $162 = (($161) + ($160<<2)|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + ($159<<2)|0);
  $165 = +HEAPF32[$164>>2];
  $tmp = $165;
  $166 = $3;
  $167 = $i;
  $168 = $0;
  $169 = (($168) + ($167<<2)|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + ($166<<2)|0);
  $172 = +HEAPF32[$171>>2];
  $173 = $2;
  $174 = $i;
  $175 = $0;
  $176 = (($175) + ($174<<2)|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($177) + ($173<<2)|0);
  HEAPF32[$178>>2] = $172;
  $179 = $tmp;
  $180 = $3;
  $181 = $i;
  $182 = $0;
  $183 = (($182) + ($181<<2)|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + ($180<<2)|0);
  HEAPF32[$185>>2] = $179;
  $186 = $i;
  $187 = (($186) + 1)|0;
  $i = $187;
 }
 STACKTOP = sp;return;
}
function __ZN17dxJointLimitMotor4initEP7dxWorld($this,$world) {
 $this = $this|0;
 $world = $world|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $world;
 $2 = $0;
 HEAPF32[$2>>2] = 0.0;
 $3 = ((($2)) + 4|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = +HEAPF32[180>>2];
 $5 = -$4;
 $6 = ((($2)) + 8|0);
 HEAPF32[$6>>2] = $5;
 $7 = +HEAPF32[180>>2];
 $8 = ((($2)) + 12|0);
 HEAPF32[$8>>2] = $7;
 $9 = ((($2)) + 16|0);
 HEAPF32[$9>>2] = 1.0;
 $10 = $1;
 $11 = ((($10)) + 32|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($2)) + 20|0);
 HEAPF32[$13>>2] = $12;
 $14 = $1;
 $15 = ((($14)) + 36|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($2)) + 24|0);
 HEAPF32[$17>>2] = $16;
 $18 = ((($2)) + 28|0);
 HEAPF32[$18>>2] = 0.0;
 $19 = ((($2)) + 32|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($2)) + 36|0);
 HEAPF32[$20>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN17dxJointLimitMotor3setEif($this,$num,$value) {
 $this = $this|0;
 $num = $num|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $num;
 $2 = $value;
 $3 = $0;
 $4 = $1;
 switch ($4|0) {
 case 0:  {
  $5 = $2;
  $6 = ((($3)) + 12|0);
  $7 = +HEAPF32[$6>>2];
  $8 = $5 <= $7;
  if ($8) {
   $9 = $2;
   $10 = ((($3)) + 8|0);
   HEAPF32[$10>>2] = $9;
  }
  break;
 }
 case 1:  {
  $11 = $2;
  $12 = ((($3)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $11 >= $13;
  if ($14) {
   $15 = $2;
   $16 = ((($3)) + 12|0);
   HEAPF32[$16>>2] = $15;
  }
  break;
 }
 case 2:  {
  $17 = $2;
  HEAPF32[$3>>2] = $17;
  break;
 }
 case 3:  {
  $18 = $2;
  $19 = $18 >= 0.0;
  if ($19) {
   $20 = $2;
   $21 = ((($3)) + 4|0);
   HEAPF32[$21>>2] = $20;
  }
  break;
 }
 case 4:  {
  $22 = $2;
  $23 = $22 >= 0.0;
  $24 = $2;
  $25 = $24 <= 1.0;
  $or$cond = $23 & $25;
  if ($or$cond) {
   $26 = $2;
   $27 = ((($3)) + 16|0);
   HEAPF32[$27>>2] = $26;
  }
  break;
 }
 case 5:  {
  $28 = $2;
  $29 = ((($3)) + 28|0);
  HEAPF32[$29>>2] = $28;
  break;
 }
 case 6:  {
  $30 = $2;
  $31 = ((($3)) + 20|0);
  HEAPF32[$31>>2] = $30;
  break;
 }
 case 7:  {
  $32 = $2;
  $33 = ((($3)) + 24|0);
  HEAPF32[$33>>2] = $32;
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __ZN17dxJointLimitMotor3getEi($this,$num) {
 $this = $this|0;
 $num = $num|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $num;
 $3 = $1;
 $4 = $2;
 switch ($4|0) {
 case 0:  {
  $5 = ((($3)) + 8|0);
  $6 = +HEAPF32[$5>>2];
  $0 = $6;
  break;
 }
 case 1:  {
  $7 = ((($3)) + 12|0);
  $8 = +HEAPF32[$7>>2];
  $0 = $8;
  break;
 }
 case 2:  {
  $9 = +HEAPF32[$3>>2];
  $0 = $9;
  break;
 }
 case 3:  {
  $10 = ((($3)) + 4|0);
  $11 = +HEAPF32[$10>>2];
  $0 = $11;
  break;
 }
 case 4:  {
  $12 = ((($3)) + 16|0);
  $13 = +HEAPF32[$12>>2];
  $0 = $13;
  break;
 }
 case 5:  {
  $14 = ((($3)) + 28|0);
  $15 = +HEAPF32[$14>>2];
  $0 = $15;
  break;
 }
 case 6:  {
  $16 = ((($3)) + 20|0);
  $17 = +HEAPF32[$16>>2];
  $0 = $17;
  break;
 }
 case 7:  {
  $18 = ((($3)) + 24|0);
  $19 = +HEAPF32[$18>>2];
  $0 = $19;
  break;
 }
 default: {
  $0 = 0.0;
 }
 }
 $20 = $0;
 STACKTOP = sp;return (+$20);
}
function __ZN17dxJointLimitMotor19testRotationalLimitEf($this,$angle) {
 $this = $this|0;
 $angle = +$angle;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $3 = 0, $4 = 0.0;
 var $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $angle;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 <= $6;
 if ($7) {
  $8 = ((($3)) + 32|0);
  HEAP32[$8>>2] = 1;
  $9 = $2;
  $10 = ((($3)) + 8|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $9 - $11;
  $13 = ((($3)) + 36|0);
  HEAPF32[$13>>2] = $12;
  $0 = 1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $14 = $2;
 $15 = ((($3)) + 12|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $14 >= $16;
 $18 = ((($3)) + 32|0);
 if ($17) {
  HEAP32[$18>>2] = 2;
  $19 = $2;
  $20 = ((($3)) + 12|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $19 - $21;
  $23 = ((($3)) + 36|0);
  HEAPF32[$23>>2] = $22;
  $0 = 1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 } else {
  HEAP32[$18>>2] = 0;
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZN17dxJointLimitMotor8addLimotEP7dxJointPNS0_5Info2EiPfi($this,$joint,$info,$row,$ax1,$rotational) {
 $this = $this|0;
 $joint = $joint|0;
 $info = $info|0;
 $row = $row|0;
 $ax1 = $ax1|0;
 $rotational = $rotational|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0.0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0.0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0, $368 = 0.0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $J1 = 0, $J2 = 0, $fm = 0.0, $k = 0.0, $newc = 0.0;
 var $newc1 = 0.0, $powered = 0, $srow = 0, $vel = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $joint;
 $3 = $info;
 $4 = $row;
 $5 = $ax1;
 $6 = $rotational;
 $7 = $1;
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($8, $11)|0;
 $srow = $12;
 $13 = ((($7)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $14 > 0.0;
 $16 = $15&1;
 $powered = $16;
 $17 = $powered;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $19 = ((($7)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $0 = 0;
   $374 = $0;
   STACKTOP = sp;return ($374|0);
  }
 }
 $22 = $6;
 $23 = ($22|0)!=(0);
 $24 = $3;
 if ($23) {
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $29 = $26;
 } else {
  $27 = ((($24)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28;
 }
 $J1 = $29;
 $30 = $6;
 $31 = ($30|0)!=(0);
 $32 = $3;
 if ($31) {
  $33 = ((($32)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $37 = $34;
 } else {
  $35 = ((($32)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36;
 }
 $J2 = $37;
 $38 = $5;
 $39 = +HEAPF32[$38>>2];
 $40 = $srow;
 $41 = (($40) + 0)|0;
 $42 = $J1;
 $43 = (($42) + ($41<<2)|0);
 HEAPF32[$43>>2] = $39;
 $44 = $5;
 $45 = ((($44)) + 4|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $srow;
 $48 = (($47) + 1)|0;
 $49 = $J1;
 $50 = (($49) + ($48<<2)|0);
 HEAPF32[$50>>2] = $46;
 $51 = $5;
 $52 = ((($51)) + 8|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $srow;
 $55 = (($54) + 2)|0;
 $56 = $J1;
 $57 = (($56) + ($55<<2)|0);
 HEAPF32[$57>>2] = $53;
 $58 = $2;
 $59 = ((($58)) + 28|0);
 $60 = ((($59)) + 12|0);
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = $5;
  $65 = +HEAPF32[$64>>2];
  $66 = -$65;
  $67 = $srow;
  $68 = (($67) + 0)|0;
  $69 = $J2;
  $70 = (($69) + ($68<<2)|0);
  HEAPF32[$70>>2] = $66;
  $71 = $5;
  $72 = ((($71)) + 4|0);
  $73 = +HEAPF32[$72>>2];
  $74 = -$73;
  $75 = $srow;
  $76 = (($75) + 1)|0;
  $77 = $J2;
  $78 = (($77) + ($76<<2)|0);
  HEAPF32[$78>>2] = $74;
  $79 = $5;
  $80 = ((($79)) + 8|0);
  $81 = +HEAPF32[$80>>2];
  $82 = -$81;
  $83 = $srow;
  $84 = (($83) + 2)|0;
  $85 = $J2;
  $86 = (($85) + ($84<<2)|0);
  HEAPF32[$86>>2] = $82;
 }
 $87 = ((($7)) + 32|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)!=(0);
 if ($89) {
  $90 = ((($7)) + 8|0);
  $91 = +HEAPF32[$90>>2];
  $92 = ((($7)) + 12|0);
  $93 = +HEAPF32[$92>>2];
  $94 = $91 == $93;
  if ($94) {
   $powered = 0;
  }
 }
 $95 = $powered;
 $96 = ($95|0)!=(0);
 do {
  if ($96) {
   $97 = ((($7)) + 32|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)!=(0);
   if (!($99)) {
    $100 = +HEAPF32[$7>>2];
    $101 = $4;
    $102 = $3;
    $103 = ((($102)) + 28|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + ($101<<2)|0);
    HEAPF32[$105>>2] = $100;
    $106 = ((($7)) + 4|0);
    $107 = +HEAPF32[$106>>2];
    $108 = -$107;
    $109 = $4;
    $110 = $3;
    $111 = ((($110)) + 36|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + ($109<<2)|0);
    HEAPF32[$113>>2] = $108;
    $114 = ((($7)) + 4|0);
    $115 = +HEAPF32[$114>>2];
    $116 = $4;
    $117 = $3;
    $118 = ((($117)) + 40|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($119) + ($116<<2)|0);
    HEAPF32[$120>>2] = $115;
    break;
   }
   $121 = ((($7)) + 4|0);
   $122 = +HEAPF32[$121>>2];
   $fm = $122;
   $123 = +HEAPF32[$7>>2];
   $124 = $123 > 0.0;
   if ($124) {
    $125 = $fm;
    $126 = -$125;
    $fm = $126;
   }
   $127 = ((($7)) + 32|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($128|0)==(1);
   if ($129) {
    $130 = +HEAPF32[$7>>2];
    $131 = $130 > 0.0;
    if ($131) {
     label = 23;
    } else {
     label = 21;
    }
   } else {
    label = 21;
   }
   if ((label|0) == 21) {
    $132 = ((($7)) + 32|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($133|0)==(2);
    if ($134) {
     $135 = +HEAPF32[$7>>2];
     $136 = $135 < 0.0;
     if ($136) {
      label = 23;
     }
    }
   }
   if ((label|0) == 23) {
    $137 = ((($7)) + 16|0);
    $138 = +HEAPF32[$137>>2];
    $139 = $fm;
    $140 = $139 * $138;
    $fm = $140;
   }
   $141 = $6;
   $142 = ($141|0)!=(0);
   $143 = $2;
   $144 = ((($143)) + 28|0);
   $145 = ((($144)) + 4|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $fm;
   $148 = -$147;
   $149 = $5;
   $150 = +HEAPF32[$149>>2];
   $151 = $148 * $150;
   $152 = $fm;
   $153 = -$152;
   $154 = $5;
   $155 = ((($154)) + 4|0);
   $156 = +HEAPF32[$155>>2];
   $157 = $153 * $156;
   $158 = $fm;
   $159 = -$158;
   $160 = $5;
   $161 = ((($160)) + 8|0);
   $162 = +HEAPF32[$161>>2];
   $163 = $159 * $162;
   if ($142) {
    _dBodyAddTorque($146,$151,$157,$163);
    $164 = $2;
    $165 = ((($164)) + 28|0);
    $166 = ((($165)) + 12|0);
    $167 = ((($166)) + 4|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = ($168|0)!=(0|0);
    if (!($169)) {
     break;
    }
    $170 = $2;
    $171 = ((($170)) + 28|0);
    $172 = ((($171)) + 12|0);
    $173 = ((($172)) + 4|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = $fm;
    $176 = $5;
    $177 = +HEAPF32[$176>>2];
    $178 = $175 * $177;
    $179 = $fm;
    $180 = $5;
    $181 = ((($180)) + 4|0);
    $182 = +HEAPF32[$181>>2];
    $183 = $179 * $182;
    $184 = $fm;
    $185 = $5;
    $186 = ((($185)) + 8|0);
    $187 = +HEAPF32[$186>>2];
    $188 = $184 * $187;
    _dBodyAddTorque($174,$178,$183,$188);
    break;
   } else {
    _dBodyAddForce($146,$151,$157,$163);
    $189 = $2;
    $190 = ((($189)) + 28|0);
    $191 = ((($190)) + 12|0);
    $192 = ((($191)) + 4|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = ($193|0)!=(0|0);
    if (!($194)) {
     break;
    }
    $195 = $2;
    $196 = ((($195)) + 28|0);
    $197 = ((($196)) + 12|0);
    $198 = ((($197)) + 4|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = $fm;
    $201 = $5;
    $202 = +HEAPF32[$201>>2];
    $203 = $200 * $202;
    $204 = $fm;
    $205 = $5;
    $206 = ((($205)) + 4|0);
    $207 = +HEAPF32[$206>>2];
    $208 = $204 * $207;
    $209 = $fm;
    $210 = $5;
    $211 = ((($210)) + 8|0);
    $212 = +HEAPF32[$211>>2];
    $213 = $209 * $212;
    _dBodyAddForce($199,$203,$208,$213);
    break;
   }
  }
 } while(0);
 $214 = ((($7)) + 32|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = ($215|0)!=(0);
 do {
  if ($216) {
   $217 = $3;
   $218 = +HEAPF32[$217>>2];
   $219 = ((($7)) + 20|0);
   $220 = +HEAPF32[$219>>2];
   $221 = $218 * $220;
   $k = $221;
   $222 = $k;
   $223 = -$222;
   $224 = ((($7)) + 36|0);
   $225 = +HEAPF32[$224>>2];
   $226 = $223 * $225;
   $227 = $4;
   $228 = $3;
   $229 = ((($228)) + 28|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($230) + ($227<<2)|0);
   HEAPF32[$231>>2] = $226;
   $232 = ((($7)) + 8|0);
   $233 = +HEAPF32[$232>>2];
   $234 = ((($7)) + 12|0);
   $235 = +HEAPF32[$234>>2];
   $236 = $233 == $235;
   if ($236) {
    $237 = +HEAPF32[180>>2];
    $238 = -$237;
    $239 = $4;
    $240 = $3;
    $241 = ((($240)) + 36|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = (($242) + ($239<<2)|0);
    HEAPF32[$243>>2] = $238;
    $244 = +HEAPF32[180>>2];
    $245 = $4;
    $246 = $3;
    $247 = ((($246)) + 40|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = (($248) + ($245<<2)|0);
    HEAPF32[$249>>2] = $244;
    break;
   }
   $250 = ((($7)) + 32|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = ($251|0)==(1);
   if ($252) {
    $253 = $4;
    $254 = $3;
    $255 = ((($254)) + 36|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = (($256) + ($253<<2)|0);
    HEAPF32[$257>>2] = 0.0;
    $258 = +HEAPF32[180>>2];
    $259 = $4;
    $260 = $3;
    $261 = ((($260)) + 40|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = (($262) + ($259<<2)|0);
    HEAPF32[$263>>2] = $258;
   } else {
    $264 = +HEAPF32[180>>2];
    $265 = -$264;
    $266 = $4;
    $267 = $3;
    $268 = ((($267)) + 36|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = (($269) + ($266<<2)|0);
    HEAPF32[$270>>2] = $265;
    $271 = $4;
    $272 = $3;
    $273 = ((($272)) + 40|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = (($274) + ($271<<2)|0);
    HEAPF32[$275>>2] = 0.0;
   }
   $276 = ((($7)) + 24|0);
   $277 = +HEAPF32[$276>>2];
   $278 = $4;
   $279 = $3;
   $280 = ((($279)) + 32|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = (($281) + ($278<<2)|0);
   HEAPF32[$282>>2] = $277;
   $283 = ((($7)) + 28|0);
   $284 = +HEAPF32[$283>>2];
   $285 = $284 > 0.0;
   if ($285) {
    $286 = $6;
    $287 = ($286|0)!=(0);
    $288 = $2;
    $289 = ((($288)) + 28|0);
    $290 = ((($289)) + 4|0);
    $291 = HEAP32[$290>>2]|0;
    if ($287) {
     $292 = ((($291)) + 244|0);
     $293 = $5;
     $294 = (+_dDOT($292,$293));
     $vel = $294;
     $295 = $2;
     $296 = ((($295)) + 28|0);
     $297 = ((($296)) + 12|0);
     $298 = ((($297)) + 4|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = ($299|0)!=(0|0);
     if ($300) {
      $301 = $2;
      $302 = ((($301)) + 28|0);
      $303 = ((($302)) + 12|0);
      $304 = ((($303)) + 4|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = ((($305)) + 244|0);
      $307 = $5;
      $308 = (+_dDOT($306,$307));
      $309 = $vel;
      $310 = $309 - $308;
      $vel = $310;
     }
    } else {
     $311 = ((($291)) + 228|0);
     $312 = $5;
     $313 = (+_dDOT($311,$312));
     $vel = $313;
     $314 = $2;
     $315 = ((($314)) + 28|0);
     $316 = ((($315)) + 12|0);
     $317 = ((($316)) + 4|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = ($318|0)!=(0|0);
     if ($319) {
      $320 = $2;
      $321 = ((($320)) + 28|0);
      $322 = ((($321)) + 12|0);
      $323 = ((($322)) + 4|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = ((($324)) + 228|0);
      $326 = $5;
      $327 = (+_dDOT($325,$326));
      $328 = $vel;
      $329 = $328 - $327;
      $vel = $329;
     }
    }
    $330 = ((($7)) + 32|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = ($331|0)==(1);
    $333 = $vel;
    if ($332) {
     $334 = $333 < 0.0;
     if (!($334)) {
      break;
     }
     $335 = ((($7)) + 28|0);
     $336 = +HEAPF32[$335>>2];
     $337 = -$336;
     $338 = $vel;
     $339 = $337 * $338;
     $newc = $339;
     $340 = $newc;
     $341 = $4;
     $342 = $3;
     $343 = ((($342)) + 28|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = (($344) + ($341<<2)|0);
     $346 = +HEAPF32[$345>>2];
     $347 = $340 > $346;
     if (!($347)) {
      break;
     }
     $348 = $newc;
     $349 = $4;
     $350 = $3;
     $351 = ((($350)) + 28|0);
     $352 = HEAP32[$351>>2]|0;
     $353 = (($352) + ($349<<2)|0);
     HEAPF32[$353>>2] = $348;
     break;
    } else {
     $354 = $333 > 0.0;
     if (!($354)) {
      break;
     }
     $355 = ((($7)) + 28|0);
     $356 = +HEAPF32[$355>>2];
     $357 = -$356;
     $358 = $vel;
     $359 = $357 * $358;
     $newc1 = $359;
     $360 = $newc1;
     $361 = $4;
     $362 = $3;
     $363 = ((($362)) + 28|0);
     $364 = HEAP32[$363>>2]|0;
     $365 = (($364) + ($361<<2)|0);
     $366 = +HEAPF32[$365>>2];
     $367 = $360 < $366;
     if (!($367)) {
      break;
     }
     $368 = $newc1;
     $369 = $4;
     $370 = $3;
     $371 = ((($370)) + 28|0);
     $372 = HEAP32[$371>>2]|0;
     $373 = (($372) + ($369<<2)|0);
     HEAPF32[$373>>2] = $368;
     break;
    }
   }
  }
 } while(0);
 $0 = 1;
 $374 = $0;
 STACKTOP = sp;return ($374|0);
}
function _dJointSetBallAnchor($joint,$x,$y,$z) {
 $joint = $joint|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 4685;
  _dDebug(2,4658,$vararg_buffer);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(184|0);
 if (!($9)) {
  HEAP32[$vararg_buffer1>>2] = 4685;
  _dDebug(2,4705,$vararg_buffer1);
 }
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $0;
 $15 = ((($14)) + 52|0);
 $16 = $0;
 $17 = ((($16)) + 68|0);
 __ZL10setAnchorsP7dxJointfffPfS1_($10,$11,$12,$13,$15,$17);
 STACKTOP = sp;return;
}
function _dJointGetBallAnchor($joint,$result) {
 $joint = $joint|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $result;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 4733;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer1>>2] = 4733;
  _dDebug(2,4753,$vararg_buffer1);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(184|0);
 if (!($9)) {
  HEAP32[$vararg_buffer4>>2] = 4733;
  _dDebug(2,4705,$vararg_buffer4);
 }
 $10 = $0;
 $11 = $1;
 $12 = $0;
 $13 = ((($12)) + 52|0);
 __ZL9getAnchorP7dxJointPfS1_($10,$11,$13);
 STACKTOP = sp;return;
}
function _dJointSetHingeAnchor($joint,$x,$y,$z) {
 $joint = $joint|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 4781;
  _dDebug(2,4658,$vararg_buffer);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(204|0);
 if (!($9)) {
  HEAP32[$vararg_buffer1>>2] = 4781;
  _dDebug(2,4802,$vararg_buffer1);
 }
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $0;
 $15 = ((($14)) + 52|0);
 $16 = $0;
 $17 = ((($16)) + 68|0);
 __ZL10setAnchorsP7dxJointfffPfS1_($10,$11,$12,$13,$15,$17);
 $18 = $0;
 __ZL35hingeComputeInitialRelativeRotationP12dxJointHinge($18);
 STACKTOP = sp;return;
}
function _dJointSetHingeAxis($joint,$x,$y,$z) {
 $joint = $joint|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 4831;
  _dDebug(2,4658,$vararg_buffer);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(204|0);
 if (!($9)) {
  HEAP32[$vararg_buffer1>>2] = 4831;
  _dDebug(2,4802,$vararg_buffer1);
 }
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $0;
 $15 = ((($14)) + 84|0);
 $16 = $0;
 $17 = ((($16)) + 100|0);
 __ZL7setAxesP7dxJointfffPfS1_($10,$11,$12,$13,$15,$17);
 $18 = $0;
 __ZL35hingeComputeInitialRelativeRotationP12dxJointHinge($18);
 STACKTOP = sp;return;
}
function _dJointGetHingeAnchor($joint,$result) {
 $joint = $joint|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $result;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 4850;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer1>>2] = 4850;
  _dDebug(2,4753,$vararg_buffer1);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(204|0);
 if (!($9)) {
  HEAP32[$vararg_buffer4>>2] = 4850;
  _dDebug(2,4802,$vararg_buffer4);
 }
 $10 = $0;
 $11 = $1;
 $12 = $0;
 $13 = ((($12)) + 52|0);
 __ZL9getAnchorP7dxJointPfS1_($10,$11,$13);
 STACKTOP = sp;return;
}
function _dJointGetHingeAxis($joint,$result) {
 $joint = $joint|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $result;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 4871;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer1>>2] = 4871;
  _dDebug(2,4753,$vararg_buffer1);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(204|0);
 if (!($9)) {
  HEAP32[$vararg_buffer4>>2] = 4871;
  _dDebug(2,4802,$vararg_buffer4);
 }
 $10 = $0;
 $11 = $1;
 $12 = $0;
 $13 = ((($12)) + 84|0);
 __ZL7getAxisP7dxJointPfS1_($10,$11,$13);
 STACKTOP = sp;return;
}
function _dJointSetHingeParam($joint,$parameter,$value) {
 $joint = $joint|0;
 $parameter = $parameter|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $parameter;
 $2 = $value;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  HEAP32[$vararg_buffer>>2] = 4890;
  _dDebug(2,4658,$vararg_buffer);
 }
 $5 = $0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(204|0);
 if (!($8)) {
  HEAP32[$vararg_buffer1>>2] = 4890;
  _dDebug(2,4802,$vararg_buffer1);
 }
 $9 = $0;
 $10 = ((($9)) + 132|0);
 $11 = $1;
 $12 = $2;
 __ZN17dxJointLimitMotor3setEif($10,$11,$12);
 STACKTOP = sp;return;
}
function _dJointGetHingeParam($joint,$parameter) {
 $joint = $joint|0;
 $parameter = $parameter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $parameter;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 4910;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(204|0);
 if (!($7)) {
  HEAP32[$vararg_buffer1>>2] = 4910;
  _dDebug(2,4802,$vararg_buffer1);
 }
 $8 = $0;
 $9 = ((($8)) + 132|0);
 $10 = $1;
 $11 = (+__ZN17dxJointLimitMotor3getEi($9,$10));
 STACKTOP = sp;return (+$11);
}
function _dJointGetHingeAngle($joint) {
 $joint = $joint|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $joint;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 4930;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(204|0);
 if (!($7)) {
  HEAP32[$vararg_buffer1>>2] = 4930;
  _dDebug(2,4802,$vararg_buffer1);
 }
 $8 = $1;
 $9 = ((($8)) + 28|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 28|0);
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = ((($17)) + 28|0);
  $19 = ((($18)) + 12|0);
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  $23 = ((($22)) + 84|0);
  $24 = $1;
  $25 = ((($24)) + 116|0);
  $26 = (+__ZL13getHingeAngleP6dxBodyS0_PfS1_($16,$21,$23,$25));
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return (+$27);
 } else {
  $0 = 0.0;
  $27 = $0;
  STACKTOP = sp;return (+$27);
 }
 return +(0.0);
}
function _dJointGetHingeAngleRate($joint) {
 $joint = $joint|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $axis = 0, $rate = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $axis = sp + 16|0;
 $1 = $joint;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 4950;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(204|0);
 if (!($7)) {
  HEAP32[$vararg_buffer1>>2] = 4950;
  _dDebug(2,4974,$vararg_buffer1);
 }
 $8 = $1;
 $9 = ((($8)) + 28|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $0 = 0.0;
  $42 = $0;
  STACKTOP = sp;return (+$42);
 }
 $13 = $1;
 $14 = ((($13)) + 28|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 180|0);
 $18 = $1;
 $19 = ((($18)) + 84|0);
 _dMULTIPLY0_331($axis,$17,$19);
 $20 = $1;
 $21 = ((($20)) + 28|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 244|0);
 $25 = (+_dDOT($axis,$24));
 $rate = $25;
 $26 = $1;
 $27 = ((($26)) + 28|0);
 $28 = ((($27)) + 12|0);
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $1;
  $33 = ((($32)) + 28|0);
  $34 = ((($33)) + 12|0);
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 244|0);
  $38 = (+_dDOT($axis,$37));
  $39 = $rate;
  $40 = $39 - $38;
  $rate = $40;
 }
 $41 = $rate;
 $0 = $41;
 $42 = $0;
 STACKTOP = sp;return (+$42);
}
function _dJointGetSliderPosition($joint) {
 $joint = $joint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $8 = 0, $9 = 0, $ax1 = 0, $i = 0, $i1 = 0;
 var $q = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ax1 = sp + 40|0;
 $q = sp + 24|0;
 $0 = $joint;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 5003;
  _dDebug(2,4658,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(224|0);
 if (!($6)) {
  HEAP32[$vararg_buffer1>>2] = 5003;
  _dDebug(2,5027,$vararg_buffer1);
 }
 $7 = $0;
 $8 = ((($7)) + 28|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 180|0);
 $12 = $0;
 $13 = ((($12)) + 52|0);
 _dMULTIPLY0_331($ax1,$11,$13);
 $14 = $0;
 $15 = ((($14)) + 28|0);
 $16 = ((($15)) + 12|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $0;
  $21 = ((($20)) + 28|0);
  $22 = ((($21)) + 12|0);
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 180|0);
  $26 = $0;
  $27 = ((($26)) + 84|0);
  _dMULTIPLY0_331($q,$25,$27);
  $i = 0;
  while(1) {
   $28 = $i;
   $29 = ($28|0)<(3);
   if (!($29)) {
    break;
   }
   $30 = $i;
   $31 = $0;
   $32 = ((($31)) + 28|0);
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 148|0);
   $36 = (($35) + ($30<<2)|0);
   $37 = +HEAPF32[$36>>2];
   $38 = $i;
   $39 = (($q) + ($38<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $37 - $40;
   $42 = $i;
   $43 = $0;
   $44 = ((($43)) + 28|0);
   $45 = ((($44)) + 12|0);
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 148|0);
   $49 = (($48) + ($42<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $41 - $50;
   $52 = $i;
   $53 = (($q) + ($52<<2)|0);
   HEAPF32[$53>>2] = $51;
   $54 = $i;
   $55 = (($54) + 1)|0;
   $i = $55;
  }
  $76 = (+_dDOT($ax1,$q));
  STACKTOP = sp;return (+$76);
 } else {
  $i1 = 0;
  while(1) {
   $56 = $i1;
   $57 = ($56|0)<(3);
   if (!($57)) {
    break;
   }
   $58 = $i1;
   $59 = $0;
   $60 = ((($59)) + 28|0);
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($62)) + 148|0);
   $64 = (($63) + ($58<<2)|0);
   $65 = +HEAPF32[$64>>2];
   $66 = $i1;
   $67 = $0;
   $68 = ((($67)) + 84|0);
   $69 = (($68) + ($66<<2)|0);
   $70 = +HEAPF32[$69>>2];
   $71 = $65 - $70;
   $72 = $i1;
   $73 = (($q) + ($72<<2)|0);
   HEAPF32[$73>>2] = $71;
   $74 = $i1;
   $75 = (($74) + 1)|0;
   $i1 = $75;
  }
  $76 = (+_dDOT($ax1,$q));
  STACKTOP = sp;return (+$76);
 }
 return +(0.0);
}
function _dJointGetSliderPositionRate($joint) {
 $joint = $joint|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ax1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ax1 = sp + 16|0;
 $1 = $joint;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 5057;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(224|0);
 if (!($7)) {
  HEAP32[$vararg_buffer1>>2] = 5057;
  _dDebug(2,5027,$vararg_buffer1);
 }
 $8 = $1;
 $9 = ((($8)) + 28|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 180|0);
 $13 = $1;
 $14 = ((($13)) + 52|0);
 _dMULTIPLY0_331($ax1,$12,$14);
 $15 = $1;
 $16 = ((($15)) + 28|0);
 $17 = ((($16)) + 12|0);
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 $21 = $1;
 $22 = ((($21)) + 28|0);
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 228|0);
 $26 = (+_dDOT($ax1,$25));
 if ($20) {
  $27 = $1;
  $28 = ((($27)) + 28|0);
  $29 = ((($28)) + 12|0);
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 228|0);
  $33 = (+_dDOT($ax1,$32));
  $34 = $26 - $33;
  $0 = $34;
  $35 = $0;
  STACKTOP = sp;return (+$35);
 } else {
  $0 = $26;
  $35 = $0;
  STACKTOP = sp;return (+$35);
 }
 return +(0.0);
}
function _dJointSetSliderAxis($joint,$x,$y,$z) {
 $joint = $joint|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $c = sp + 16|0;
 $0 = $joint;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 5085;
  _dDebug(2,4658,$vararg_buffer);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(224|0);
 if (!($9)) {
  HEAP32[$vararg_buffer1>>2] = 5085;
  _dDebug(2,5027,$vararg_buffer1);
 }
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $0;
 $15 = ((($14)) + 52|0);
 __ZL7setAxesP7dxJointfffPfS1_($10,$11,$12,$13,$15,0);
 $16 = $0;
 $17 = ((($16)) + 28|0);
 $18 = ((($17)) + 12|0);
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 $22 = $0;
 if ($21) {
  $23 = ((($22)) + 68|0);
  $24 = $0;
  $25 = ((($24)) + 28|0);
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 164|0);
  $29 = $0;
  $30 = ((($29)) + 28|0);
  $31 = ((($30)) + 12|0);
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 164|0);
  _dQMultiply1($23,$28,$34);
  $i = 0;
  while(1) {
   $35 = $i;
   $36 = ($35|0)<(3);
   if (!($36)) {
    break;
   }
   $37 = $i;
   $38 = $0;
   $39 = ((($38)) + 28|0);
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 148|0);
   $43 = (($42) + ($37<<2)|0);
   $44 = +HEAPF32[$43>>2];
   $45 = $i;
   $46 = $0;
   $47 = ((($46)) + 28|0);
   $48 = ((($47)) + 12|0);
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 148|0);
   $52 = (($51) + ($45<<2)|0);
   $53 = +HEAPF32[$52>>2];
   $54 = $44 - $53;
   $55 = $i;
   $56 = (($c) + ($55<<2)|0);
   HEAPF32[$56>>2] = $54;
   $57 = $i;
   $58 = (($57) + 1)|0;
   $i = $58;
  }
  $59 = $0;
  $60 = ((($59)) + 84|0);
  $61 = $0;
  $62 = ((($61)) + 28|0);
  $63 = ((($62)) + 12|0);
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($65)) + 180|0);
  _dMULTIPLY1_331($60,$66,$c);
  STACKTOP = sp;return;
 }
 $67 = ((($22)) + 28|0);
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 164|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $0;
 $73 = ((($72)) + 68|0);
 HEAPF32[$73>>2] = $71;
 $i = 1;
 while(1) {
  $74 = $i;
  $75 = ($74|0)<(4);
  if (!($75)) {
   break;
  }
  $76 = $i;
  $77 = $0;
  $78 = ((($77)) + 28|0);
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 164|0);
  $82 = (($81) + ($76<<2)|0);
  $83 = +HEAPF32[$82>>2];
  $84 = -$83;
  $85 = $i;
  $86 = $0;
  $87 = ((($86)) + 68|0);
  $88 = (($87) + ($85<<2)|0);
  HEAPF32[$88>>2] = $84;
  $89 = $i;
  $90 = (($89) + 1)|0;
  $i = $90;
 }
 $i = 0;
 while(1) {
  $91 = $i;
  $92 = ($91|0)<(3);
  if (!($92)) {
   break;
  }
  $93 = $i;
  $94 = $0;
  $95 = ((($94)) + 28|0);
  $96 = ((($95)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($97)) + 148|0);
  $99 = (($98) + ($93<<2)|0);
  $100 = +HEAPF32[$99>>2];
  $101 = $i;
  $102 = $0;
  $103 = ((($102)) + 84|0);
  $104 = (($103) + ($101<<2)|0);
  HEAPF32[$104>>2] = $100;
  $105 = $i;
  $106 = (($105) + 1)|0;
  $i = $106;
 }
 STACKTOP = sp;return;
}
function _dJointGetSliderAxis($joint,$result) {
 $joint = $joint|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $result;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 5105;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer1>>2] = 5105;
  _dDebug(2,4753,$vararg_buffer1);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(224|0);
 if (!($9)) {
  HEAP32[$vararg_buffer4>>2] = 5105;
  _dDebug(2,5027,$vararg_buffer4);
 }
 $10 = $0;
 $11 = $1;
 $12 = $0;
 $13 = ((($12)) + 52|0);
 __ZL7getAxisP7dxJointPfS1_($10,$11,$13);
 STACKTOP = sp;return;
}
function _dJointSetSliderParam($joint,$parameter,$value) {
 $joint = $joint|0;
 $parameter = $parameter|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $parameter;
 $2 = $value;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  HEAP32[$vararg_buffer>>2] = 5125;
  _dDebug(2,4658,$vararg_buffer);
 }
 $5 = $0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(224|0);
 if (!($8)) {
  HEAP32[$vararg_buffer1>>2] = 5125;
  _dDebug(2,5027,$vararg_buffer1);
 }
 $9 = $0;
 $10 = ((($9)) + 100|0);
 $11 = $1;
 $12 = $2;
 __ZN17dxJointLimitMotor3setEif($10,$11,$12);
 STACKTOP = sp;return;
}
function _dJointGetSliderParam($joint,$parameter) {
 $joint = $joint|0;
 $parameter = $parameter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $parameter;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 5146;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(224|0);
 if (!($7)) {
  HEAP32[$vararg_buffer1>>2] = 5146;
  _dDebug(2,5027,$vararg_buffer1);
 }
 $8 = $0;
 $9 = ((($8)) + 100|0);
 $10 = $1;
 $11 = (+__ZN17dxJointLimitMotor3getEi($9,$10));
 STACKTOP = sp;return (+$11);
}
function _dJointSetHinge2Anchor($joint,$x,$y,$z) {
 $joint = $joint|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 5167;
  _dDebug(2,4658,$vararg_buffer);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(264|0);
 if (!($9)) {
  HEAP32[$vararg_buffer1>>2] = 5167;
  _dDebug(2,5189,$vararg_buffer1);
 }
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $0;
 $15 = ((($14)) + 52|0);
 $16 = $0;
 $17 = ((($16)) + 68|0);
 __ZL10setAnchorsP7dxJointfffPfS1_($10,$11,$12,$13,$15,$17);
 $18 = $0;
 __ZL17makeHinge2V1andV2P13dxJointHinge2($18);
 STACKTOP = sp;return;
}
function _dJointSetHinge2Axis1($joint,$x,$y,$z) {
 $joint = $joint|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0;
 var $99 = 0, $ax = 0, $ax1 = 0, $ax2 = 0, $q = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $q = sp + 64|0;
 $ax = sp + 48|0;
 $ax1 = sp + 32|0;
 $ax2 = sp + 16|0;
 $0 = $joint;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 5219;
  _dDebug(2,4658,$vararg_buffer);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(264|0);
 if (!($9)) {
  HEAP32[$vararg_buffer1>>2] = 5219;
  _dDebug(2,5189,$vararg_buffer1);
 }
 $10 = $0;
 $11 = ((($10)) + 28|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $100 = $0;
  __ZL17makeHinge2V1andV2P13dxJointHinge2($100);
  STACKTOP = sp;return;
 }
 $15 = $1;
 HEAPF32[$q>>2] = $15;
 $16 = $2;
 $17 = ((($q)) + 4|0);
 HEAPF32[$17>>2] = $16;
 $18 = $3;
 $19 = ((($q)) + 8|0);
 HEAPF32[$19>>2] = $18;
 $20 = ((($q)) + 12|0);
 HEAPF32[$20>>2] = 0.0;
 _dNormalize3($q);
 $21 = $0;
 $22 = ((($21)) + 84|0);
 $23 = $0;
 $24 = ((($23)) + 28|0);
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 180|0);
 _dMULTIPLY1_331($22,$27,$q);
 $28 = $0;
 $29 = ((($28)) + 84|0);
 $30 = ((($29)) + 12|0);
 HEAPF32[$30>>2] = 0.0;
 $31 = $0;
 $32 = ((($31)) + 28|0);
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 180|0);
 $36 = $0;
 $37 = ((($36)) + 84|0);
 _dMULTIPLY0_331($ax1,$35,$37);
 $38 = $0;
 $39 = ((($38)) + 28|0);
 $40 = ((($39)) + 12|0);
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 180|0);
 $44 = $0;
 $45 = ((($44)) + 100|0);
 _dMULTIPLY0_331($ax2,$43,$45);
 $46 = ((($ax1)) + 4|0);
 $47 = +HEAPF32[$46>>2];
 $48 = ((($ax2)) + 8|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $47 * $49;
 $51 = ((($ax1)) + 8|0);
 $52 = +HEAPF32[$51>>2];
 $53 = ((($ax2)) + 4|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $52 * $54;
 $56 = $50 - $55;
 HEAPF32[$ax>>2] = $56;
 $57 = ((($ax1)) + 8|0);
 $58 = +HEAPF32[$57>>2];
 $59 = +HEAPF32[$ax2>>2];
 $60 = $58 * $59;
 $61 = +HEAPF32[$ax1>>2];
 $62 = ((($ax2)) + 8|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $61 * $63;
 $65 = $60 - $64;
 $66 = ((($ax)) + 4|0);
 HEAPF32[$66>>2] = $65;
 $67 = +HEAPF32[$ax1>>2];
 $68 = ((($ax2)) + 4|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $67 * $69;
 $71 = ((($ax1)) + 4|0);
 $72 = +HEAPF32[$71>>2];
 $73 = +HEAPF32[$ax2>>2];
 $74 = $72 * $73;
 $75 = $70 - $74;
 $76 = ((($ax)) + 8|0);
 HEAPF32[$76>>2] = $75;
 $77 = +HEAPF32[$ax>>2];
 $78 = +HEAPF32[$ax>>2];
 $79 = $77 * $78;
 $80 = ((($ax)) + 4|0);
 $81 = +HEAPF32[$80>>2];
 $82 = ((($ax)) + 4|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $81 * $83;
 $85 = $79 + $84;
 $86 = ((($ax)) + 8|0);
 $87 = +HEAPF32[$86>>2];
 $88 = ((($ax)) + 8|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $87 * $89;
 $91 = $85 + $90;
 $92 = $91;
 $93 = (+Math_sqrt((+$92)));
 $94 = $93;
 $95 = $0;
 $96 = ((($95)) + 120|0);
 HEAPF32[$96>>2] = $94;
 $97 = (+_dDOT($ax1,$ax2));
 $98 = $0;
 $99 = ((($98)) + 116|0);
 HEAPF32[$99>>2] = $97;
 $100 = $0;
 __ZL17makeHinge2V1andV2P13dxJointHinge2($100);
 STACKTOP = sp;return;
}
function _dJointSetHinge2Axis2($joint,$x,$y,$z) {
 $joint = $joint|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0, $98 = 0, $99 = 0.0, $ax = 0, $ax1 = 0, $ax2 = 0, $q = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $q = sp + 64|0;
 $ax = sp + 48|0;
 $ax1 = sp + 32|0;
 $ax2 = sp + 16|0;
 $0 = $joint;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 5240;
  _dDebug(2,4658,$vararg_buffer);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(264|0);
 if (!($9)) {
  HEAP32[$vararg_buffer1>>2] = 5240;
  _dDebug(2,5189,$vararg_buffer1);
 }
 $10 = $0;
 $11 = ((($10)) + 28|0);
 $12 = ((($11)) + 12|0);
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $102 = $0;
  __ZL17makeHinge2V1andV2P13dxJointHinge2($102);
  STACKTOP = sp;return;
 }
 $16 = $1;
 HEAPF32[$q>>2] = $16;
 $17 = $2;
 $18 = ((($q)) + 4|0);
 HEAPF32[$18>>2] = $17;
 $19 = $3;
 $20 = ((($q)) + 8|0);
 HEAPF32[$20>>2] = $19;
 $21 = ((($q)) + 12|0);
 HEAPF32[$21>>2] = 0.0;
 _dNormalize3($q);
 $22 = $0;
 $23 = ((($22)) + 100|0);
 $24 = $0;
 $25 = ((($24)) + 28|0);
 $26 = ((($25)) + 12|0);
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 180|0);
 _dMULTIPLY1_331($23,$29,$q);
 $30 = $0;
 $31 = ((($30)) + 84|0);
 $32 = ((($31)) + 12|0);
 HEAPF32[$32>>2] = 0.0;
 $33 = $0;
 $34 = ((($33)) + 28|0);
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 180|0);
 $38 = $0;
 $39 = ((($38)) + 84|0);
 _dMULTIPLY0_331($ax1,$37,$39);
 $40 = $0;
 $41 = ((($40)) + 28|0);
 $42 = ((($41)) + 12|0);
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 180|0);
 $46 = $0;
 $47 = ((($46)) + 100|0);
 _dMULTIPLY0_331($ax2,$45,$47);
 $48 = ((($ax1)) + 4|0);
 $49 = +HEAPF32[$48>>2];
 $50 = ((($ax2)) + 8|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $49 * $51;
 $53 = ((($ax1)) + 8|0);
 $54 = +HEAPF32[$53>>2];
 $55 = ((($ax2)) + 4|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $54 * $56;
 $58 = $52 - $57;
 HEAPF32[$ax>>2] = $58;
 $59 = ((($ax1)) + 8|0);
 $60 = +HEAPF32[$59>>2];
 $61 = +HEAPF32[$ax2>>2];
 $62 = $60 * $61;
 $63 = +HEAPF32[$ax1>>2];
 $64 = ((($ax2)) + 8|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $63 * $65;
 $67 = $62 - $66;
 $68 = ((($ax)) + 4|0);
 HEAPF32[$68>>2] = $67;
 $69 = +HEAPF32[$ax1>>2];
 $70 = ((($ax2)) + 4|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $69 * $71;
 $73 = ((($ax1)) + 4|0);
 $74 = +HEAPF32[$73>>2];
 $75 = +HEAPF32[$ax2>>2];
 $76 = $74 * $75;
 $77 = $72 - $76;
 $78 = ((($ax)) + 8|0);
 HEAPF32[$78>>2] = $77;
 $79 = +HEAPF32[$ax>>2];
 $80 = +HEAPF32[$ax>>2];
 $81 = $79 * $80;
 $82 = ((($ax)) + 4|0);
 $83 = +HEAPF32[$82>>2];
 $84 = ((($ax)) + 4|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $83 * $85;
 $87 = $81 + $86;
 $88 = ((($ax)) + 8|0);
 $89 = +HEAPF32[$88>>2];
 $90 = ((($ax)) + 8|0);
 $91 = +HEAPF32[$90>>2];
 $92 = $89 * $91;
 $93 = $87 + $92;
 $94 = $93;
 $95 = (+Math_sqrt((+$94)));
 $96 = $95;
 $97 = $0;
 $98 = ((($97)) + 120|0);
 HEAPF32[$98>>2] = $96;
 $99 = (+_dDOT($ax1,$ax2));
 $100 = $0;
 $101 = ((($100)) + 116|0);
 HEAPF32[$101>>2] = $99;
 $102 = $0;
 __ZL17makeHinge2V1andV2P13dxJointHinge2($102);
 STACKTOP = sp;return;
}
function _dJointSetHinge2Param($joint,$parameter,$value) {
 $joint = $joint|0;
 $parameter = $parameter|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $parameter;
 $2 = $value;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  HEAP32[$vararg_buffer>>2] = 5261;
  _dDebug(2,4658,$vararg_buffer);
 }
 $5 = $0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(264|0);
 if (!($8)) {
  HEAP32[$vararg_buffer1>>2] = 5261;
  _dDebug(2,5189,$vararg_buffer1);
 }
 $9 = $1;
 $10 = $9 & 65280;
 $11 = ($10|0)==(256);
 if ($11) {
  $12 = $0;
  $13 = ((($12)) + 196|0);
  $14 = $1;
  $15 = $14 & 255;
  $16 = $2;
  __ZN17dxJointLimitMotor3setEif($13,$15,$16);
  STACKTOP = sp;return;
 }
 $17 = $1;
 $18 = ($17|0)==(8);
 if ($18) {
  $19 = $2;
  $20 = $0;
  $21 = ((($20)) + 236|0);
  HEAPF32[$21>>2] = $19;
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = ($22|0)==(9);
 if ($23) {
  $24 = $2;
  $25 = $0;
  $26 = ((($25)) + 240|0);
  HEAPF32[$26>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $27 = $0;
  $28 = ((($27)) + 156|0);
  $29 = $1;
  $30 = $2;
  __ZN17dxJointLimitMotor3setEif($28,$29,$30);
  STACKTOP = sp;return;
 }
}
function _dJointGetHinge2Anchor($joint,$result) {
 $joint = $joint|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $result;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 5282;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer1>>2] = 5282;
  _dDebug(2,4753,$vararg_buffer1);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(264|0);
 if (!($9)) {
  HEAP32[$vararg_buffer4>>2] = 5282;
  _dDebug(2,5189,$vararg_buffer4);
 }
 $10 = $0;
 $11 = $1;
 $12 = $0;
 $13 = ((($12)) + 52|0);
 __ZL9getAnchorP7dxJointPfS1_($10,$11,$13);
 STACKTOP = sp;return;
}
function _dJointGetHinge2Axis1($joint,$result) {
 $joint = $joint|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $result;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 5304;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer1>>2] = 5304;
  _dDebug(2,4753,$vararg_buffer1);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(264|0);
 if (!($9)) {
  HEAP32[$vararg_buffer4>>2] = 5304;
  _dDebug(2,5189,$vararg_buffer4);
 }
 $10 = $0;
 $11 = ((($10)) + 28|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $1;
 $16 = $0;
 $17 = ((($16)) + 28|0);
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 180|0);
 $21 = $0;
 $22 = ((($21)) + 84|0);
 _dMULTIPLY0_331($15,$20,$22);
 STACKTOP = sp;return;
}
function _dJointGetHinge2Axis2($joint,$result) {
 $joint = $joint|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $result;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 5325;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer1>>2] = 5325;
  _dDebug(2,4753,$vararg_buffer1);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(264|0);
 if (!($9)) {
  HEAP32[$vararg_buffer4>>2] = 5325;
  _dDebug(2,5189,$vararg_buffer4);
 }
 $10 = $0;
 $11 = ((($10)) + 28|0);
 $12 = ((($11)) + 12|0);
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = $0;
 $18 = ((($17)) + 28|0);
 $19 = ((($18)) + 12|0);
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 180|0);
 $23 = $0;
 $24 = ((($23)) + 100|0);
 _dMULTIPLY0_331($16,$22,$24);
 STACKTOP = sp;return;
}
function _dJointGetHinge2Param($joint,$parameter) {
 $joint = $joint|0;
 $parameter = $parameter|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $joint;
 $2 = $parameter;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  HEAP32[$vararg_buffer>>2] = 5346;
  _dDebug(2,4658,$vararg_buffer);
 }
 $5 = $1;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(264|0);
 if (!($8)) {
  HEAP32[$vararg_buffer1>>2] = 5346;
  _dDebug(2,5189,$vararg_buffer1);
 }
 $9 = $2;
 $10 = $9 & 65280;
 $11 = ($10|0)==(256);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 196|0);
  $14 = $2;
  $15 = $14 & 255;
  $16 = (+__ZN17dxJointLimitMotor3getEi($13,$15));
  $0 = $16;
  $30 = $0;
  STACKTOP = sp;return (+$30);
 }
 $17 = $2;
 $18 = ($17|0)==(8);
 if ($18) {
  $19 = $1;
  $20 = ((($19)) + 236|0);
  $21 = +HEAPF32[$20>>2];
  $0 = $21;
  $30 = $0;
  STACKTOP = sp;return (+$30);
 }
 $22 = $2;
 $23 = ($22|0)==(9);
 $24 = $1;
 if ($23) {
  $25 = ((($24)) + 240|0);
  $26 = +HEAPF32[$25>>2];
  $0 = $26;
  $30 = $0;
  STACKTOP = sp;return (+$30);
 } else {
  $27 = ((($24)) + 156|0);
  $28 = $2;
  $29 = (+__ZN17dxJointLimitMotor3getEi($27,$28));
  $0 = $29;
  $30 = $0;
  STACKTOP = sp;return (+$30);
 }
 return +(0.0);
}
function _dJointGetHinge2Angle1($joint) {
 $joint = $joint|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $joint;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 5367;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(264|0);
 if (!($7)) {
  HEAP32[$vararg_buffer1>>2] = 5367;
  _dDebug(2,5189,$vararg_buffer1);
 }
 $8 = $1;
 $9 = ((($8)) + 28|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = (+__ZL18measureHinge2AngleP13dxJointHinge2($13));
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return (+$15);
 } else {
  $0 = 0.0;
  $15 = $0;
  STACKTOP = sp;return (+$15);
 }
 return +(0.0);
}
function _dJointGetHinge2Angle1Rate($joint) {
 $joint = $joint|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $axis = 0, $rate = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $axis = sp + 16|0;
 $1 = $joint;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 5389;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(264|0);
 if (!($7)) {
  HEAP32[$vararg_buffer1>>2] = 5389;
  _dDebug(2,5189,$vararg_buffer1);
 }
 $8 = $1;
 $9 = ((($8)) + 28|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $0 = 0.0;
  $42 = $0;
  STACKTOP = sp;return (+$42);
 }
 $13 = $1;
 $14 = ((($13)) + 28|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 180|0);
 $18 = $1;
 $19 = ((($18)) + 84|0);
 _dMULTIPLY0_331($axis,$17,$19);
 $20 = $1;
 $21 = ((($20)) + 28|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 244|0);
 $25 = (+_dDOT($axis,$24));
 $rate = $25;
 $26 = $1;
 $27 = ((($26)) + 28|0);
 $28 = ((($27)) + 12|0);
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $1;
  $33 = ((($32)) + 28|0);
  $34 = ((($33)) + 12|0);
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 244|0);
  $38 = (+_dDOT($axis,$37));
  $39 = $rate;
  $40 = $39 - $38;
  $rate = $40;
 }
 $41 = $rate;
 $0 = $41;
 $42 = $0;
 STACKTOP = sp;return (+$42);
}
function _dJointGetHinge2Angle2Rate($joint) {
 $joint = $joint|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $axis = 0, $rate = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $axis = sp + 16|0;
 $1 = $joint;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 5415;
  _dDebug(2,4658,$vararg_buffer);
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(264|0);
 if (!($7)) {
  HEAP32[$vararg_buffer1>>2] = 5415;
  _dDebug(2,5189,$vararg_buffer1);
 }
 $8 = $1;
 $9 = ((($8)) + 28|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 28|0);
  $15 = ((($14)) + 12|0);
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $1;
   $20 = ((($19)) + 28|0);
   $21 = ((($20)) + 12|0);
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 180|0);
   $25 = $1;
   $26 = ((($25)) + 100|0);
   _dMULTIPLY0_331($axis,$24,$26);
   $27 = $1;
   $28 = ((($27)) + 28|0);
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 244|0);
   $32 = (+_dDOT($axis,$31));
   $rate = $32;
   $33 = $1;
   $34 = ((($33)) + 28|0);
   $35 = ((($34)) + 12|0);
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $39 = $1;
    $40 = ((($39)) + 28|0);
    $41 = ((($40)) + 12|0);
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($43)) + 244|0);
    $45 = (+_dDOT($axis,$44));
    $46 = $rate;
    $47 = $46 - $45;
    $rate = $47;
   }
   $48 = $rate;
   $0 = $48;
   $49 = $0;
   STACKTOP = sp;return (+$49);
  }
 }
 $0 = 0.0;
 $49 = $0;
 STACKTOP = sp;return (+$49);
}
function _dJointSetAMotorNumAxes($joint,$num) {
 $joint = $joint|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $num;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)>=(0);
 $or$cond = $3 & $5;
 $6 = $1;
 $7 = ($6|0)<=(3);
 $or$cond3 = $or$cond & $7;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 5441;
  _dDebug(2,6111,$vararg_buffer);
 }
 $8 = $0;
 $9 = ((($8)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(1);
 if ($11) {
  $12 = $0;
  $13 = ((($12)) + 52|0);
  HEAP32[$13>>2] = 3;
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = ($14|0)<(0);
 if ($15) {
  $1 = 0;
 }
 $16 = $1;
 $17 = ($16|0)>(3);
 if ($17) {
  $1 = 3;
 }
 $18 = $1;
 $19 = $0;
 $20 = ((($19)) + 52|0);
 HEAP32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function _dJointSetAMotorAxis($joint,$anum,$rel,$x,$y,$z) {
 $joint = $joint|0;
 $anum = $anum|0;
 $rel = $rel|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $r = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $r = sp + 8|0;
 $0 = $joint;
 $1 = $anum;
 $2 = $rel;
 $3 = $x;
 $4 = $y;
 $5 = $z;
 $6 = $0;
 $7 = ($6|0)!=(0|0);
 $8 = $1;
 $9 = ($8|0)>=(0);
 $or$cond = $7 & $9;
 $10 = $1;
 $11 = ($10|0)<=(2);
 $or$cond3 = $or$cond & $11;
 $12 = $2;
 $13 = ($12|0)>=(0);
 $or$cond5 = $or$cond3 & $13;
 $14 = $2;
 $15 = ($14|0)<=(2);
 $or$cond7 = $or$cond5 & $15;
 if (!($or$cond7)) {
  HEAP32[$vararg_buffer>>2] = 5464;
  _dDebug(2,6111,$vararg_buffer);
 }
 $16 = $1;
 $17 = ($16|0)<(0);
 if ($17) {
  $1 = 0;
 }
 $18 = $1;
 $19 = ($18|0)>(2);
 if ($19) {
  $1 = 2;
 }
 $20 = $2;
 $21 = $1;
 $22 = $0;
 $23 = ((($22)) + 60|0);
 $24 = (($23) + ($21<<2)|0);
 HEAP32[$24>>2] = $20;
 $25 = $3;
 HEAPF32[$r>>2] = $25;
 $26 = $4;
 $27 = ((($r)) + 4|0);
 HEAPF32[$27>>2] = $26;
 $28 = $5;
 $29 = ((($r)) + 8|0);
 HEAPF32[$29>>2] = $28;
 $30 = ((($r)) + 12|0);
 HEAPF32[$30>>2] = 0.0;
 $31 = $2;
 $32 = ($31|0)>(0);
 do {
  if ($32) {
   $33 = $2;
   $34 = ($33|0)==(1);
   $35 = $1;
   $36 = $0;
   $37 = ((($36)) + 72|0);
   $38 = (($37) + ($35<<4)|0);
   $39 = $0;
   $40 = ((($39)) + 28|0);
   if ($34) {
    $41 = ((($40)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 180|0);
    _dMULTIPLY1_331($38,$43,$r);
    break;
   } else {
    $44 = ((($40)) + 12|0);
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 180|0);
    _dMULTIPLY1_331($38,$47,$r);
    break;
   }
  } else {
   $48 = +HEAPF32[$r>>2];
   $49 = $1;
   $50 = $0;
   $51 = ((($50)) + 72|0);
   $52 = (($51) + ($49<<4)|0);
   HEAPF32[$52>>2] = $48;
   $53 = ((($r)) + 4|0);
   $54 = +HEAPF32[$53>>2];
   $55 = $1;
   $56 = $0;
   $57 = ((($56)) + 72|0);
   $58 = (($57) + ($55<<4)|0);
   $59 = ((($58)) + 4|0);
   HEAPF32[$59>>2] = $54;
   $60 = ((($r)) + 8|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $1;
   $63 = $0;
   $64 = ((($63)) + 72|0);
   $65 = (($64) + ($62<<4)|0);
   $66 = ((($65)) + 8|0);
   HEAPF32[$66>>2] = $61;
  }
 } while(0);
 $67 = $1;
 $68 = $0;
 $69 = ((($68)) + 72|0);
 $70 = (($69) + ($67<<4)|0);
 _dNormalize3($70);
 $71 = $0;
 $72 = ((($71)) + 56|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(1);
 if (!($74)) {
  STACKTOP = sp;return;
 }
 $75 = $0;
 __ZL30amotorSetEulerReferenceVectorsP13dxJointAMotor($75);
 STACKTOP = sp;return;
}
function _dJointSetAMotorAngle($joint,$anum,$angle) {
 $joint = $joint|0;
 $anum = $anum|0;
 $angle = +$angle;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $anum;
 $2 = $angle;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 $6 = ($5|0)>=(0);
 $or$cond = $4 & $6;
 $7 = $1;
 $8 = ($7|0)<(3);
 $or$cond3 = $or$cond & $8;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 5484;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $0;
 $10 = ((($9)) + 56|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $1;
 $14 = ($13|0)<(0);
 if ($14) {
  $1 = 0;
 }
 $15 = $1;
 $16 = ($15|0)>(3);
 if ($16) {
  $1 = 3;
 }
 $17 = $2;
 $18 = $1;
 $19 = $0;
 $20 = ((($19)) + 240|0);
 $21 = (($20) + ($18<<2)|0);
 HEAPF32[$21>>2] = $17;
 STACKTOP = sp;return;
}
function _dJointSetAMotorParam($joint,$parameter,$value) {
 $joint = $joint|0;
 $parameter = $parameter|0;
 $value = +$value;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $anum = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $parameter;
 $2 = $value;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  HEAP32[$vararg_buffer>>2] = 5505;
  _dDebug(2,6111,$vararg_buffer);
 }
 $5 = $1;
 $6 = $5 >> 8;
 $anum = $6;
 $7 = $anum;
 $8 = ($7|0)<(0);
 $$ = $8 ? 0 : $6;
 $anum = $$;
 $9 = $anum;
 $10 = ($9|0)>(2);
 $$$ = $10 ? 2 : $$;
 $anum = $$$;
 $11 = $1;
 $12 = $11 & 255;
 $1 = $12;
 $13 = $anum;
 $14 = $0;
 $15 = ((($14)) + 120|0);
 $16 = (($15) + (($13*40)|0)|0);
 $17 = $1;
 $18 = $2;
 __ZN17dxJointLimitMotor3setEif($16,$17,$18);
 STACKTOP = sp;return;
}
function _dJointSetAMotorMode($joint,$mode) {
 $joint = $joint|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $mode;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 5526;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $1;
 $5 = $0;
 $6 = ((($5)) + 56|0);
 HEAP32[$6>>2] = $4;
 $7 = $0;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = ((($11)) + 52|0);
 HEAP32[$12>>2] = 3;
 $13 = $0;
 __ZL30amotorSetEulerReferenceVectorsP13dxJointAMotor($13);
 STACKTOP = sp;return;
}
function _dJointGetAMotorNumAxes($joint) {
 $joint = $joint|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 5546;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _dJointGetAMotorAxis($joint,$anum,$result) {
 $joint = $joint|0;
 $anum = $anum|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $anum;
 $2 = $result;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 $6 = ($5|0)>=(0);
 $or$cond = $4 & $6;
 $7 = $1;
 $8 = ($7|0)<(3);
 $or$cond3 = $or$cond & $8;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 5569;
  _dDebug(2,6111,$vararg_buffer);
 }
 $9 = $1;
 $10 = ($9|0)<(0);
 if ($10) {
  $1 = 0;
 }
 $11 = $1;
 $12 = ($11|0)>(2);
 if ($12) {
  $1 = 2;
 }
 $13 = $1;
 $14 = $0;
 $15 = ((($14)) + 60|0);
 $16 = (($15) + ($13<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)>(0);
 $19 = $1;
 $20 = $0;
 if (!($18)) {
  $43 = ((($20)) + 72|0);
  $44 = (($43) + ($19<<4)|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $2;
  HEAPF32[$46>>2] = $45;
  $47 = $1;
  $48 = $0;
  $49 = ((($48)) + 72|0);
  $50 = (($49) + ($47<<4)|0);
  $51 = ((($50)) + 4|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $2;
  $54 = ((($53)) + 4|0);
  HEAPF32[$54>>2] = $52;
  $55 = $1;
  $56 = $0;
  $57 = ((($56)) + 72|0);
  $58 = (($57) + ($55<<4)|0);
  $59 = ((($58)) + 8|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $2;
  $62 = ((($61)) + 8|0);
  HEAPF32[$62>>2] = $60;
  STACKTOP = sp;return;
 }
 $21 = ((($20)) + 60|0);
 $22 = (($21) + ($19<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = $2;
 $26 = $0;
 $27 = ((($26)) + 28|0);
 if ($24) {
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 180|0);
  $31 = $1;
  $32 = $0;
  $33 = ((($32)) + 72|0);
  $34 = (($33) + ($31<<4)|0);
  _dMULTIPLY0_331($25,$30,$34);
  STACKTOP = sp;return;
 } else {
  $35 = ((($27)) + 12|0);
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 180|0);
  $39 = $1;
  $40 = $0;
  $41 = ((($40)) + 72|0);
  $42 = (($41) + ($39<<4)|0);
  _dMULTIPLY0_331($25,$38,$42);
  STACKTOP = sp;return;
 }
}
function _dJointGetAMotorAxisRel($joint,$anum) {
 $joint = $joint|0;
 $anum = $anum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $anum;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)>=(0);
 $or$cond = $3 & $5;
 $6 = $1;
 $7 = ($6|0)<(3);
 $or$cond3 = $or$cond & $7;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 5589;
  _dDebug(2,6111,$vararg_buffer);
 }
 $8 = $1;
 $9 = ($8|0)<(0);
 if ($9) {
  $1 = 0;
 }
 $10 = $1;
 $11 = ($10|0)>(2);
 if ($11) {
  $1 = 2;
 }
 $12 = $1;
 $13 = $0;
 $14 = ((($13)) + 60|0);
 $15 = (($14) + ($12<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _dJointGetAMotorAngle($joint,$anum) {
 $joint = $joint|0;
 $anum = $anum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $anum;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)>=(0);
 $or$cond = $3 & $5;
 $6 = $1;
 $7 = ($6|0)<(3);
 $or$cond3 = $or$cond & $7;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 5612;
  _dDebug(2,6111,$vararg_buffer);
 }
 $8 = $1;
 $9 = ($8|0)<(0);
 if ($9) {
  $1 = 0;
 }
 $10 = $1;
 $11 = ($10|0)>(3);
 if ($11) {
  $1 = 3;
 }
 $12 = $1;
 $13 = $0;
 $14 = ((($13)) + 240|0);
 $15 = (($14) + ($12<<2)|0);
 $16 = +HEAPF32[$15>>2];
 STACKTOP = sp;return (+$16);
}
function _dJointGetAMotorAngleRate($joint,$anum) {
 $joint = $joint|0;
 $anum = $anum|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $anum;
 _dDebug(0,5633,$vararg_buffer);
 STACKTOP = sp;return +0;
}
function _dJointGetAMotorParam($joint,$parameter) {
 $joint = $joint|0;
 $parameter = $parameter|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $anum = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $parameter;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 5653;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $1;
 $5 = $4 >> 8;
 $anum = $5;
 $6 = $anum;
 $7 = ($6|0)<(0);
 $$ = $7 ? 0 : $5;
 $anum = $$;
 $8 = $anum;
 $9 = ($8|0)>(2);
 $$$ = $9 ? 2 : $$;
 $anum = $$$;
 $10 = $1;
 $11 = $10 & 255;
 $1 = $11;
 $12 = $anum;
 $13 = $0;
 $14 = ((($13)) + 120|0);
 $15 = (($14) + (($12*40)|0)|0);
 $16 = $1;
 $17 = (+__ZN17dxJointLimitMotor3getEi($15,$16));
 STACKTOP = sp;return (+$17);
}
function _dJointGetAMotorMode($joint) {
 $joint = $joint|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 5674;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _dJointSetFixed($joint) {
 $joint = $joint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i = 0, $ofs = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ofs = sp + 16|0;
 $0 = $joint;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 5694;
  _dDebug(2,4658,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(304|0);
 if (!($6)) {
  HEAP32[$vararg_buffer1>>2] = 5694;
  _dDebug(2,5709,$vararg_buffer1);
 }
 $7 = $0;
 $8 = ((($7)) + 28|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ((($12)) + 28|0);
 $14 = ((($13)) + 12|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 $i = 0;
 if (!($17)) {
  while(1) {
   $56 = $i;
   $57 = ($56|0)<(4);
   if (!($57)) {
    break;
   }
   $58 = $i;
   $59 = $0;
   $60 = ((($59)) + 28|0);
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($62)) + 148|0);
   $64 = (($63) + ($58<<2)|0);
   $65 = +HEAPF32[$64>>2];
   $66 = $i;
   $67 = $0;
   $68 = ((($67)) + 52|0);
   $69 = (($68) + ($66<<2)|0);
   HEAPF32[$69>>2] = $65;
   $70 = $i;
   $71 = (($70) + 1)|0;
   $i = $71;
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $18 = $i;
  $19 = ($18|0)<(4);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = $0;
  $22 = ((($21)) + 28|0);
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 148|0);
  $26 = (($25) + ($20<<2)|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $i;
  $29 = (($ofs) + ($28<<2)|0);
  HEAPF32[$29>>2] = $27;
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 $i = 0;
 while(1) {
  $32 = $i;
  $33 = ($32|0)<(4);
  if (!($33)) {
   break;
  }
  $34 = $i;
  $35 = $0;
  $36 = ((($35)) + 28|0);
  $37 = ((($36)) + 12|0);
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 148|0);
  $41 = (($40) + ($34<<2)|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $i;
  $44 = (($ofs) + ($43<<2)|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $45 - $42;
  HEAPF32[$44>>2] = $46;
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 $49 = $0;
 $50 = ((($49)) + 52|0);
 $51 = $0;
 $52 = ((($51)) + 28|0);
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($54)) + 180|0);
 _dMULTIPLY1_331($50,$55,$ofs);
 STACKTOP = sp;return;
}
function __ZL10setAnchorsP7dxJointfffPfS1_($j,$x,$y,$z,$anchor1,$anchor2) {
 $j = $j|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $anchor1 = $anchor1|0;
 $anchor2 = $anchor2|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $q = sp;
 $0 = $j;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $anchor1;
 $5 = $anchor2;
 $6 = $0;
 $7 = ((($6)) + 28|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $98 = $4;
  $99 = ((($98)) + 12|0);
  HEAPF32[$99>>2] = 0.0;
  $100 = $5;
  $101 = ((($100)) + 12|0);
  HEAPF32[$101>>2] = 0.0;
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = $0;
 $13 = ((($12)) + 28|0);
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 148|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $11 - $17;
 HEAPF32[$q>>2] = $18;
 $19 = $2;
 $20 = $0;
 $21 = ((($20)) + 28|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 148|0);
 $25 = ((($24)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $19 - $26;
 $28 = ((($q)) + 4|0);
 HEAPF32[$28>>2] = $27;
 $29 = $3;
 $30 = $0;
 $31 = ((($30)) + 28|0);
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 148|0);
 $35 = ((($34)) + 8|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $29 - $36;
 $38 = ((($q)) + 8|0);
 HEAPF32[$38>>2] = $37;
 $39 = ((($q)) + 12|0);
 HEAPF32[$39>>2] = 0.0;
 $40 = $4;
 $41 = $0;
 $42 = ((($41)) + 28|0);
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 180|0);
 _dMULTIPLY1_331($40,$45,$q);
 $46 = $0;
 $47 = ((($46)) + 28|0);
 $48 = ((($47)) + 12|0);
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)!=(0|0);
 $52 = $1;
 if ($51) {
  $53 = $0;
  $54 = ((($53)) + 28|0);
  $55 = ((($54)) + 12|0);
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 148|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $52 - $59;
  HEAPF32[$q>>2] = $60;
  $61 = $2;
  $62 = $0;
  $63 = ((($62)) + 28|0);
  $64 = ((($63)) + 12|0);
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 148|0);
  $68 = ((($67)) + 4|0);
  $69 = +HEAPF32[$68>>2];
  $70 = $61 - $69;
  $71 = ((($q)) + 4|0);
  HEAPF32[$71>>2] = $70;
  $72 = $3;
  $73 = $0;
  $74 = ((($73)) + 28|0);
  $75 = ((($74)) + 12|0);
  $76 = ((($75)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 148|0);
  $79 = ((($78)) + 8|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $72 - $80;
  $82 = ((($q)) + 8|0);
  HEAPF32[$82>>2] = $81;
  $83 = ((($q)) + 12|0);
  HEAPF32[$83>>2] = 0.0;
  $84 = $5;
  $85 = $0;
  $86 = ((($85)) + 28|0);
  $87 = ((($86)) + 12|0);
  $88 = ((($87)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ((($89)) + 180|0);
  _dMULTIPLY1_331($84,$90,$q);
  $98 = $4;
  $99 = ((($98)) + 12|0);
  HEAPF32[$99>>2] = 0.0;
  $100 = $5;
  $101 = ((($100)) + 12|0);
  HEAPF32[$101>>2] = 0.0;
  STACKTOP = sp;return;
 } else {
  $91 = $5;
  HEAPF32[$91>>2] = $52;
  $92 = $2;
  $93 = $5;
  $94 = ((($93)) + 4|0);
  HEAPF32[$94>>2] = $92;
  $95 = $3;
  $96 = $5;
  $97 = ((($96)) + 8|0);
  HEAPF32[$97>>2] = $95;
  $98 = $4;
  $99 = ((($98)) + 12|0);
  HEAPF32[$99>>2] = 0.0;
  $100 = $5;
  $101 = ((($100)) + 12|0);
  HEAPF32[$101>>2] = 0.0;
  STACKTOP = sp;return;
 }
}
function __ZL9getAnchorP7dxJointPfS1_($j,$result,$anchor1) {
 $j = $j|0;
 $result = $result|0;
 $anchor1 = $anchor1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $result;
 $2 = $anchor1;
 $3 = $0;
 $4 = ((($3)) + 28|0);
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 180|0);
 $14 = $2;
 _dMULTIPLY0_331($8,$13,$14);
 $15 = $0;
 $16 = ((($15)) + 28|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 148|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $1;
 $22 = +HEAPF32[$21>>2];
 $23 = $22 + $20;
 HEAPF32[$21>>2] = $23;
 $24 = $0;
 $25 = ((($24)) + 28|0);
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 148|0);
 $29 = ((($28)) + 4|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $1;
 $32 = ((($31)) + 4|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $33 + $30;
 HEAPF32[$32>>2] = $34;
 $35 = $0;
 $36 = ((($35)) + 28|0);
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 148|0);
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $1;
 $43 = ((($42)) + 8|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $44 + $41;
 HEAPF32[$43>>2] = $45;
 STACKTOP = sp;return;
}
function __ZL35hingeComputeInitialRelativeRotationP12dxJointHinge($joint) {
 $joint = $joint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $joint;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = ((($6)) + 28|0);
 $8 = ((($7)) + 12|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $0;
 if ($11) {
  $13 = ((($12)) + 116|0);
  $14 = $0;
  $15 = ((($14)) + 28|0);
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 164|0);
  $19 = $0;
  $20 = ((($19)) + 28|0);
  $21 = ((($20)) + 12|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 164|0);
  _dQMultiply1($13,$18,$24);
  STACKTOP = sp;return;
 }
 $25 = ((($12)) + 28|0);
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 164|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $0;
 $31 = ((($30)) + 116|0);
 HEAPF32[$31>>2] = $29;
 $i = 1;
 while(1) {
  $32 = $i;
  $33 = ($32|0)<(4);
  if (!($33)) {
   break;
  }
  $34 = $i;
  $35 = $0;
  $36 = ((($35)) + 28|0);
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 164|0);
  $40 = (($39) + ($34<<2)|0);
  $41 = +HEAPF32[$40>>2];
  $42 = -$41;
  $43 = $i;
  $44 = $0;
  $45 = ((($44)) + 116|0);
  $46 = (($45) + ($43<<2)|0);
  HEAPF32[$46>>2] = $42;
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 STACKTOP = sp;return;
}
function __ZL7setAxesP7dxJointfffPfS1_($j,$x,$y,$z,$axis1,$axis2) {
 $j = $j|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $axis1 = $axis1|0;
 $axis2 = $axis2|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $q = sp;
 $0 = $j;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $axis1;
 $5 = $axis2;
 $6 = $0;
 $7 = ((($6)) + 28|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $48 = $4;
  $49 = ((($48)) + 12|0);
  HEAPF32[$49>>2] = 0.0;
  STACKTOP = sp;return;
 }
 $11 = $1;
 HEAPF32[$q>>2] = $11;
 $12 = $2;
 $13 = ((($q)) + 4|0);
 HEAPF32[$13>>2] = $12;
 $14 = $3;
 $15 = ((($q)) + 8|0);
 HEAPF32[$15>>2] = $14;
 $16 = ((($q)) + 12|0);
 HEAPF32[$16>>2] = 0.0;
 _dNormalize3($q);
 $17 = $4;
 $18 = $0;
 $19 = ((($18)) + 28|0);
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 180|0);
 _dMULTIPLY1_331($17,$22,$q);
 $23 = $5;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $48 = $4;
  $49 = ((($48)) + 12|0);
  HEAPF32[$49>>2] = 0.0;
  STACKTOP = sp;return;
 }
 $25 = $0;
 $26 = ((($25)) + 28|0);
 $27 = ((($26)) + 12|0);
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $5;
  $32 = $0;
  $33 = ((($32)) + 28|0);
  $34 = ((($33)) + 12|0);
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 180|0);
  _dMULTIPLY1_331($31,$37,$q);
 } else {
  $38 = $1;
  $39 = $5;
  HEAPF32[$39>>2] = $38;
  $40 = $2;
  $41 = $5;
  $42 = ((($41)) + 4|0);
  HEAPF32[$42>>2] = $40;
  $43 = $3;
  $44 = $5;
  $45 = ((($44)) + 8|0);
  HEAPF32[$45>>2] = $43;
 }
 $46 = $5;
 $47 = ((($46)) + 12|0);
 HEAPF32[$47>>2] = 0.0;
 $48 = $4;
 $49 = ((($48)) + 12|0);
 HEAPF32[$49>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZL7getAxisP7dxJointPfS1_($j,$result,$axis1) {
 $j = $j|0;
 $result = $result|0;
 $axis1 = $axis1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $result;
 $2 = $axis1;
 $3 = $0;
 $4 = ((($3)) + 28|0);
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 180|0);
 $14 = $2;
 _dMULTIPLY0_331($8,$13,$14);
 STACKTOP = sp;return;
}
function __ZL13getHingeAngleP6dxBodyS0_PfS1_($body1,$body2,$axis,$q_initial) {
 $body1 = $body1|0;
 $body2 = $body2|0;
 $axis = $axis|0;
 $q_initial = $q_initial|0;
 var $$sink2 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cost2 = 0.0, $qq = 0;
 var $qrel = 0, $sint2 = 0.0, $theta = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $qrel = sp + 32|0;
 $qq = sp + 16|0;
 $0 = $body1;
 $1 = $body2;
 $2 = $axis;
 $3 = $q_initial;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 164|0);
  $8 = $1;
  $9 = ((($8)) + 164|0);
  _dQMultiply1($qq,$7,$9);
  $10 = $3;
  _dQMultiply2($qrel,$qq,$10);
 } else {
  $11 = $0;
  $12 = ((($11)) + 164|0);
  $13 = $3;
  _dQMultiply3($qrel,$12,$13);
 }
 $14 = +HEAPF32[$qrel>>2];
 $cost2 = $14;
 $15 = ((($qrel)) + 4|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($qrel)) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $16 * $18;
 $20 = ((($qrel)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = ((($qrel)) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $21 * $23;
 $25 = $19 + $24;
 $26 = ((($qrel)) + 12|0);
 $27 = +HEAPF32[$26>>2];
 $28 = ((($qrel)) + 12|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $27 * $29;
 $31 = $25 + $30;
 $32 = $31;
 $33 = (+Math_sqrt((+$32)));
 $34 = $33;
 $sint2 = $34;
 $35 = ((($qrel)) + 4|0);
 $36 = $2;
 $37 = (+_dDOT($35,$36));
 $38 = $37 >= 0.0;
 $39 = $sint2;
 $40 = $39;
 $41 = $cost2;
 $42 = -$41;
 $$sink2 = $38 ? $41 : $42;
 $43 = $$sink2;
 $44 = (+Math_atan2((+$40),(+$43)));
 $45 = $44;
 $46 = 2.0 * $45;
 $theta = $46;
 $47 = $theta;
 $48 = $47;
 $49 = $48 > 3.1415926535897931;
 if (!($49)) {
  $54 = $theta;
  $55 = -$54;
  $theta = $55;
  $56 = $theta;
  STACKTOP = sp;return (+$56);
 }
 $50 = $theta;
 $51 = $50;
 $52 = $51 - 6.2831853071795862;
 $53 = $52;
 $theta = $53;
 $54 = $theta;
 $55 = -$54;
 $theta = $55;
 $56 = $theta;
 STACKTOP = sp;return (+$56);
}
function _dMULTIPLY1_331($A,$B,$C) {
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $A;
 $1 = $B;
 $2 = $C;
 $3 = $1;
 $4 = $2;
 $5 = (+_dDOT41($3,$4));
 $6 = $0;
 HEAPF32[$6>>2] = $5;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = $2;
 $10 = (+_dDOT41($8,$9));
 $11 = $0;
 $12 = ((($11)) + 4|0);
 HEAPF32[$12>>2] = $10;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 $15 = $2;
 $16 = (+_dDOT41($14,$15));
 $17 = $0;
 $18 = ((($17)) + 8|0);
 HEAPF32[$18>>2] = $16;
 STACKTOP = sp;return;
}
function __ZL17makeHinge2V1andV2P13dxJointHinge2($joint) {
 $joint = $joint|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0;
 var $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0;
 var $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ax1 = 0, $ax2 = 0, $i = 0, $k = 0.0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ax1 = sp + 40|0;
 $ax2 = sp + 24|0;
 $v = sp + 8|0;
 $0 = $joint;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = ((($6)) + 28|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 180|0);
 $11 = $0;
 $12 = ((($11)) + 84|0);
 _dMULTIPLY0_331($ax1,$10,$12);
 $13 = $0;
 $14 = ((($13)) + 28|0);
 $15 = ((($14)) + 12|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 180|0);
 $19 = $0;
 $20 = ((($19)) + 100|0);
 _dMULTIPLY0_331($ax2,$18,$20);
 $21 = +HEAPF32[$ax1>>2];
 $22 = $21 == 0.0;
 if ($22) {
  $23 = ((($ax1)) + 4|0);
  $24 = +HEAPF32[$23>>2];
  $25 = $24 == 0.0;
  if ($25) {
   $26 = ((($ax1)) + 8|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $27 == 0.0;
   if ($28) {
    STACKTOP = sp;return;
   }
  }
 }
 $29 = +HEAPF32[$ax2>>2];
 $30 = $29 == 0.0;
 if ($30) {
  $31 = ((($ax2)) + 4|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $32 == 0.0;
  if ($33) {
   $34 = ((($ax2)) + 8|0);
   $35 = +HEAPF32[$34>>2];
   $36 = $35 == 0.0;
   if ($36) {
    STACKTOP = sp;return;
   }
  }
 }
 $37 = +HEAPF32[$ax1>>2];
 $38 = +HEAPF32[$ax2>>2];
 $39 = $37 == $38;
 if ($39) {
  $40 = ((($ax1)) + 4|0);
  $41 = +HEAPF32[$40>>2];
  $42 = ((($ax2)) + 4|0);
  $43 = +HEAPF32[$42>>2];
  $44 = $41 == $43;
  if ($44) {
   $45 = ((($ax1)) + 8|0);
   $46 = +HEAPF32[$45>>2];
   $47 = ((($ax2)) + 8|0);
   $48 = +HEAPF32[$47>>2];
   $49 = $46 == $48;
   if ($49) {
    STACKTOP = sp;return;
   }
  }
 }
 $50 = (+_dDOT($ax1,$ax2));
 $k = $50;
 $i = 0;
 while(1) {
  $51 = $i;
  $52 = ($51|0)<(3);
  if (!($52)) {
   break;
  }
  $53 = $k;
  $54 = $i;
  $55 = (($ax1) + ($54<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $53 * $56;
  $58 = $i;
  $59 = (($ax2) + ($58<<2)|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $60 - $57;
  HEAPF32[$59>>2] = $61;
  $62 = $i;
  $63 = (($62) + 1)|0;
  $i = $63;
 }
 _dNormalize3($ax2);
 $64 = ((($ax1)) + 4|0);
 $65 = +HEAPF32[$64>>2];
 $66 = ((($ax2)) + 8|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $65 * $67;
 $69 = ((($ax1)) + 8|0);
 $70 = +HEAPF32[$69>>2];
 $71 = ((($ax2)) + 4|0);
 $72 = +HEAPF32[$71>>2];
 $73 = $70 * $72;
 $74 = $68 - $73;
 HEAPF32[$v>>2] = $74;
 $75 = ((($ax1)) + 8|0);
 $76 = +HEAPF32[$75>>2];
 $77 = +HEAPF32[$ax2>>2];
 $78 = $76 * $77;
 $79 = +HEAPF32[$ax1>>2];
 $80 = ((($ax2)) + 8|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $79 * $81;
 $83 = $78 - $82;
 $84 = ((($v)) + 4|0);
 HEAPF32[$84>>2] = $83;
 $85 = +HEAPF32[$ax1>>2];
 $86 = ((($ax2)) + 4|0);
 $87 = +HEAPF32[$86>>2];
 $88 = $85 * $87;
 $89 = ((($ax1)) + 4|0);
 $90 = +HEAPF32[$89>>2];
 $91 = +HEAPF32[$ax2>>2];
 $92 = $90 * $91;
 $93 = $88 - $92;
 $94 = ((($v)) + 8|0);
 HEAPF32[$94>>2] = $93;
 $95 = $0;
 $96 = ((($95)) + 124|0);
 $97 = $0;
 $98 = ((($97)) + 28|0);
 $99 = ((($98)) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($100)) + 180|0);
 _dMULTIPLY1_331($96,$101,$ax2);
 $102 = $0;
 $103 = ((($102)) + 140|0);
 $104 = $0;
 $105 = ((($104)) + 28|0);
 $106 = ((($105)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($107)) + 180|0);
 _dMULTIPLY1_331($103,$108,$v);
 STACKTOP = sp;return;
}
function __ZL18measureHinge2AngleP13dxJointHinge2($joint) {
 $joint = $joint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, $a2 = 0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a1 = sp + 24|0;
 $a2 = sp + 8|0;
 $0 = $joint;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = ((($2)) + 12|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 180|0);
 $7 = $0;
 $8 = ((($7)) + 100|0);
 _dMULTIPLY0_331($a1,$6,$8);
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 180|0);
 _dMULTIPLY1_331($a2,$13,$a1);
 $14 = $0;
 $15 = ((($14)) + 124|0);
 $16 = (+_dDOT($15,$a2));
 $x = $16;
 $17 = $0;
 $18 = ((($17)) + 140|0);
 $19 = (+_dDOT($18,$a2));
 $y = $19;
 $20 = $y;
 $21 = $20;
 $22 = $x;
 $23 = $22;
 $24 = (+Math_atan2((+$21),(+$23)));
 $25 = $24;
 $26 = -$25;
 STACKTOP = sp;return (+$26);
}
function __ZL30amotorSetEulerReferenceVectorsP13dxJointAMotor($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp;
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = ((($6)) + 28|0);
 $8 = ((($7)) + 12|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ((($12)) + 28|0);
 $14 = ((($13)) + 12|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 180|0);
 $18 = $0;
 $19 = ((($18)) + 72|0);
 $20 = ((($19)) + 32|0);
 _dMULTIPLY0_331($r,$17,$20);
 $21 = $0;
 $22 = ((($21)) + 252|0);
 $23 = $0;
 $24 = ((($23)) + 28|0);
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 180|0);
 _dMULTIPLY1_331($22,$27,$r);
 $28 = $0;
 $29 = ((($28)) + 28|0);
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 180|0);
 $33 = $0;
 $34 = ((($33)) + 72|0);
 _dMULTIPLY0_331($r,$32,$34);
 $35 = $0;
 $36 = ((($35)) + 268|0);
 $37 = $0;
 $38 = ((($37)) + 28|0);
 $39 = ((($38)) + 12|0);
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 180|0);
 _dMULTIPLY1_331($36,$42,$r);
 STACKTOP = sp;return;
}
function __ZL8ballInitP11dxJointBall($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 _dSetZero($2,4);
 $3 = $0;
 $4 = ((($3)) + 68|0);
 _dSetZero($4,4);
 STACKTOP = sp;return;
}
function __ZL12ballGetInfo1P11dxJointBallPN7dxJoint5Info1E($j,$info) {
 $j = $j|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $info;
 $2 = $1;
 HEAP32[$2>>2] = 3;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 3;
 STACKTOP = sp;return;
}
function __ZL12ballGetInfo2P11dxJointBallPN7dxJoint5Info2E($joint,$info) {
 $joint = $joint|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $joint;
 $1 = $info;
 $2 = $0;
 $3 = $1;
 $4 = $0;
 $5 = ((($4)) + 52|0);
 $6 = $0;
 $7 = ((($6)) + 68|0);
 __ZL7setBallP7dxJointPNS_5Info2EPfS3_($2,$3,$5,$7);
 STACKTOP = sp;return;
}
function __ZL9hingeInitP12dxJointHinge($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 _dSetZero($2,4);
 $3 = $0;
 $4 = ((($3)) + 68|0);
 _dSetZero($4,4);
 $5 = $0;
 $6 = ((($5)) + 84|0);
 _dSetZero($6,4);
 $7 = $0;
 $8 = ((($7)) + 84|0);
 HEAPF32[$8>>2] = 1.0;
 $9 = $0;
 $10 = ((($9)) + 100|0);
 _dSetZero($10,4);
 $11 = $0;
 $12 = ((($11)) + 100|0);
 HEAPF32[$12>>2] = 1.0;
 $13 = $0;
 $14 = ((($13)) + 116|0);
 _dSetZero($14,4);
 $15 = $0;
 $16 = ((($15)) + 132|0);
 $17 = $0;
 $18 = HEAP32[$17>>2]|0;
 __ZN17dxJointLimitMotor4initEP7dxWorld($16,$18);
 STACKTOP = sp;return;
}
function __ZL13hingeGetInfo1P12dxJointHingePN7dxJoint5Info1E($j,$info) {
 $j = $j|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $angle = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $info;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 5;
 $4 = $0;
 $5 = ((($4)) + 132|0);
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 > 0.0;
 $9 = $1;
 if ($8) {
  HEAP32[$9>>2] = 6;
 } else {
  HEAP32[$9>>2] = 5;
 }
 $10 = $0;
 $11 = ((($10)) + 132|0);
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $13;
 $15 = $14 >= -3.1415926535897931;
 if (!($15)) {
  $16 = $0;
  $17 = ((($16)) + 132|0);
  $18 = ((($17)) + 12|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $19;
  $21 = $20 <= 3.1415926535897931;
  if (!($21)) {
   STACKTOP = sp;return;
  }
 }
 $22 = $0;
 $23 = ((($22)) + 132|0);
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $0;
 $27 = ((($26)) + 132|0);
 $28 = ((($27)) + 12|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $25 <= $29;
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $0;
 $32 = ((($31)) + 28|0);
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $0;
 $36 = ((($35)) + 28|0);
 $37 = ((($36)) + 12|0);
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $0;
 $41 = ((($40)) + 84|0);
 $42 = $0;
 $43 = ((($42)) + 116|0);
 $44 = (+__ZL13getHingeAngleP6dxBodyS0_PfS1_($34,$39,$41,$43));
 $angle = $44;
 $45 = $0;
 $46 = ((($45)) + 132|0);
 $47 = $angle;
 $48 = (__ZN17dxJointLimitMotor19testRotationalLimitEf($46,$47)|0);
 $49 = ($48|0)!=(0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 $50 = $1;
 HEAP32[$50>>2] = 6;
 STACKTOP = sp;return;
}
function __ZL13hingeGetInfo2P12dxJointHingePN7dxJoint5Info2E($joint,$info) {
 $joint = $joint|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ax1 = 0, $ax2 = 0, $b = 0, $k = 0.0, $p = 0, $q = 0, $s3 = 0, $s4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ax1 = sp + 80|0;
 $p = sp + 64|0;
 $q = sp + 48|0;
 $ax2 = sp + 24|0;
 $b = sp + 8|0;
 $0 = $joint;
 $1 = $info;
 $2 = $0;
 $3 = $1;
 $4 = $0;
 $5 = ((($4)) + 52|0);
 $6 = $0;
 $7 = ((($6)) + 68|0);
 __ZL7setBallP7dxJointPNS_5Info2EPfS3_($2,$3,$5,$7);
 $8 = $0;
 $9 = ((($8)) + 28|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 180|0);
 $13 = $0;
 $14 = ((($13)) + 84|0);
 _dMULTIPLY0_331($ax1,$12,$14);
 _dPlaneSpace($ax1,$p,$q);
 $15 = $1;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17*3)|0;
 $s3 = $18;
 $19 = $1;
 $20 = ((($19)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21<<2;
 $s4 = $22;
 $23 = +HEAPF32[$p>>2];
 $24 = $s3;
 $25 = (($24) + 0)|0;
 $26 = $1;
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25<<2)|0);
 HEAPF32[$29>>2] = $23;
 $30 = ((($p)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $s3;
 $33 = (($32) + 1)|0;
 $34 = $1;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($33<<2)|0);
 HEAPF32[$37>>2] = $31;
 $38 = ((($p)) + 8|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $s3;
 $41 = (($40) + 2)|0;
 $42 = $1;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + ($41<<2)|0);
 HEAPF32[$45>>2] = $39;
 $46 = +HEAPF32[$q>>2];
 $47 = $s4;
 $48 = (($47) + 0)|0;
 $49 = $1;
 $50 = ((($49)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($48<<2)|0);
 HEAPF32[$52>>2] = $46;
 $53 = ((($q)) + 4|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $s4;
 $56 = (($55) + 1)|0;
 $57 = $1;
 $58 = ((($57)) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + ($56<<2)|0);
 HEAPF32[$60>>2] = $54;
 $61 = ((($q)) + 8|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $s4;
 $64 = (($63) + 2)|0;
 $65 = $1;
 $66 = ((($65)) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + ($64<<2)|0);
 HEAPF32[$68>>2] = $62;
 $69 = $0;
 $70 = ((($69)) + 28|0);
 $71 = ((($70)) + 12|0);
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(0|0);
 if ($74) {
  $75 = +HEAPF32[$p>>2];
  $76 = -$75;
  $77 = $s3;
  $78 = (($77) + 0)|0;
  $79 = $1;
  $80 = ((($79)) + 20|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + ($78<<2)|0);
  HEAPF32[$82>>2] = $76;
  $83 = ((($p)) + 4|0);
  $84 = +HEAPF32[$83>>2];
  $85 = -$84;
  $86 = $s3;
  $87 = (($86) + 1)|0;
  $88 = $1;
  $89 = ((($88)) + 20|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + ($87<<2)|0);
  HEAPF32[$91>>2] = $85;
  $92 = ((($p)) + 8|0);
  $93 = +HEAPF32[$92>>2];
  $94 = -$93;
  $95 = $s3;
  $96 = (($95) + 2)|0;
  $97 = $1;
  $98 = ((($97)) + 20|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + ($96<<2)|0);
  HEAPF32[$100>>2] = $94;
  $101 = +HEAPF32[$q>>2];
  $102 = -$101;
  $103 = $s4;
  $104 = (($103) + 0)|0;
  $105 = $1;
  $106 = ((($105)) + 20|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) + ($104<<2)|0);
  HEAPF32[$108>>2] = $102;
  $109 = ((($q)) + 4|0);
  $110 = +HEAPF32[$109>>2];
  $111 = -$110;
  $112 = $s4;
  $113 = (($112) + 1)|0;
  $114 = $1;
  $115 = ((($114)) + 20|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + ($113<<2)|0);
  HEAPF32[$117>>2] = $111;
  $118 = ((($q)) + 8|0);
  $119 = +HEAPF32[$118>>2];
  $120 = -$119;
  $121 = $s4;
  $122 = (($121) + 2)|0;
  $123 = $1;
  $124 = ((($123)) + 20|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + ($122<<2)|0);
  HEAPF32[$126>>2] = $120;
 }
 $127 = $0;
 $128 = ((($127)) + 28|0);
 $129 = ((($128)) + 12|0);
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = $0;
  $134 = ((($133)) + 28|0);
  $135 = ((($134)) + 12|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ((($137)) + 180|0);
  $139 = $0;
  $140 = ((($139)) + 100|0);
  _dMULTIPLY0_331($ax2,$138,$140);
 } else {
  $141 = $0;
  $142 = ((($141)) + 100|0);
  $143 = +HEAPF32[$142>>2];
  HEAPF32[$ax2>>2] = $143;
  $144 = $0;
  $145 = ((($144)) + 100|0);
  $146 = ((($145)) + 4|0);
  $147 = +HEAPF32[$146>>2];
  $148 = ((($ax2)) + 4|0);
  HEAPF32[$148>>2] = $147;
  $149 = $0;
  $150 = ((($149)) + 100|0);
  $151 = ((($150)) + 8|0);
  $152 = +HEAPF32[$151>>2];
  $153 = ((($ax2)) + 8|0);
  HEAPF32[$153>>2] = $152;
 }
 $154 = ((($ax1)) + 4|0);
 $155 = +HEAPF32[$154>>2];
 $156 = ((($ax2)) + 8|0);
 $157 = +HEAPF32[$156>>2];
 $158 = $155 * $157;
 $159 = ((($ax1)) + 8|0);
 $160 = +HEAPF32[$159>>2];
 $161 = ((($ax2)) + 4|0);
 $162 = +HEAPF32[$161>>2];
 $163 = $160 * $162;
 $164 = $158 - $163;
 HEAPF32[$b>>2] = $164;
 $165 = ((($ax1)) + 8|0);
 $166 = +HEAPF32[$165>>2];
 $167 = +HEAPF32[$ax2>>2];
 $168 = $166 * $167;
 $169 = +HEAPF32[$ax1>>2];
 $170 = ((($ax2)) + 8|0);
 $171 = +HEAPF32[$170>>2];
 $172 = $169 * $171;
 $173 = $168 - $172;
 $174 = ((($b)) + 4|0);
 HEAPF32[$174>>2] = $173;
 $175 = +HEAPF32[$ax1>>2];
 $176 = ((($ax2)) + 4|0);
 $177 = +HEAPF32[$176>>2];
 $178 = $175 * $177;
 $179 = ((($ax1)) + 4|0);
 $180 = +HEAPF32[$179>>2];
 $181 = +HEAPF32[$ax2>>2];
 $182 = $180 * $181;
 $183 = $178 - $182;
 $184 = ((($b)) + 8|0);
 HEAPF32[$184>>2] = $183;
 $185 = $1;
 $186 = +HEAPF32[$185>>2];
 $187 = $1;
 $188 = ((($187)) + 4|0);
 $189 = +HEAPF32[$188>>2];
 $190 = $186 * $189;
 $k = $190;
 $191 = $k;
 $192 = (+_dDOT($b,$p));
 $193 = $191 * $192;
 $194 = $1;
 $195 = ((($194)) + 28|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = ((($196)) + 12|0);
 HEAPF32[$197>>2] = $193;
 $198 = $k;
 $199 = (+_dDOT($b,$q));
 $200 = $198 * $199;
 $201 = $1;
 $202 = ((($201)) + 28|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = ((($203)) + 16|0);
 HEAPF32[$204>>2] = $200;
 $205 = $0;
 $206 = ((($205)) + 132|0);
 $207 = $0;
 $208 = $1;
 (__ZN17dxJointLimitMotor8addLimotEP7dxJointPNS0_5Info2EiPfi($206,$207,$208,5,$ax1,1)|0);
 STACKTOP = sp;return;
}
function __ZL10sliderInitP13dxJointSlider($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 _dSetZero($2,4);
 $3 = $0;
 $4 = ((($3)) + 52|0);
 HEAPF32[$4>>2] = 1.0;
 $5 = $0;
 $6 = ((($5)) + 68|0);
 _dSetZero($6,4);
 $7 = $0;
 $8 = ((($7)) + 84|0);
 _dSetZero($8,4);
 $9 = $0;
 $10 = ((($9)) + 100|0);
 $11 = $0;
 $12 = HEAP32[$11>>2]|0;
 __ZN17dxJointLimitMotor4initEP7dxWorld($10,$12);
 STACKTOP = sp;return;
}
function __ZL14sliderGetInfo1P13dxJointSliderPN7dxJoint5Info1E($j,$info) {
 $j = $j|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $pos = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $info;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 5;
 $4 = $0;
 $5 = ((($4)) + 100|0);
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 > 0.0;
 $9 = $1;
 if ($8) {
  HEAP32[$9>>2] = 6;
 } else {
  HEAP32[$9>>2] = 5;
 }
 $10 = $0;
 $11 = ((($10)) + 100|0);
 $12 = ((($11)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 100|0);
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = +HEAPF32[180>>2];
 $18 = -$17;
 $19 = $16 > $18;
 if (!($19)) {
  $20 = $0;
  $21 = ((($20)) + 100|0);
  $22 = ((($21)) + 12|0);
  $23 = +HEAPF32[$22>>2];
  $24 = +HEAPF32[180>>2];
  $25 = $23 < $24;
  if (!($25)) {
   STACKTOP = sp;return;
  }
 }
 $26 = $0;
 $27 = ((($26)) + 100|0);
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $0;
 $31 = ((($30)) + 100|0);
 $32 = ((($31)) + 12|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $29 <= $33;
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $0;
 $36 = (+_dJointGetSliderPosition($35));
 $pos = $36;
 $37 = $pos;
 $38 = $0;
 $39 = ((($38)) + 100|0);
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $37 <= $41;
 if ($42) {
  $43 = $0;
  $44 = ((($43)) + 100|0);
  $45 = ((($44)) + 32|0);
  HEAP32[$45>>2] = 1;
  $46 = $pos;
  $47 = $0;
  $48 = ((($47)) + 100|0);
  $49 = ((($48)) + 8|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $46 - $50;
  $52 = $0;
  $53 = ((($52)) + 100|0);
  $54 = ((($53)) + 36|0);
  HEAPF32[$54>>2] = $51;
  $55 = $1;
  HEAP32[$55>>2] = 6;
  STACKTOP = sp;return;
 }
 $56 = $pos;
 $57 = $0;
 $58 = ((($57)) + 100|0);
 $59 = ((($58)) + 12|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $56 >= $60;
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $0;
 $63 = ((($62)) + 100|0);
 $64 = ((($63)) + 32|0);
 HEAP32[$64>>2] = 2;
 $65 = $pos;
 $66 = $0;
 $67 = ((($66)) + 100|0);
 $68 = ((($67)) + 12|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $65 - $69;
 $71 = $0;
 $72 = ((($71)) + 100|0);
 $73 = ((($72)) + 36|0);
 HEAPF32[$73>>2] = $70;
 $74 = $1;
 HEAP32[$74>>2] = 6;
 STACKTOP = sp;return;
}
function __ZL14sliderGetInfo2P13dxJointSliderPN7dxJoint5Info2E($joint,$info) {
 $joint = $joint|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0;
 var $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0.0;
 var $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0.0;
 var $387 = 0.0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0.0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R1 = 0, $R2 = 0, $ax1 = 0, $c = 0, $e = 0, $i = 0, $k = 0.0, $ofs = 0, $ofs1 = 0, $p = 0, $pos1 = 0, $pos2 = 0, $q = 0, $qerr = 0;
 var $qq = 0, $s = 0, $s2 = 0, $s3 = 0, $s4 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 152|0;
 $ax1 = sp + 136|0;
 $p = sp + 120|0;
 $q = sp + 104|0;
 $tmp = sp + 88|0;
 $qerr = sp + 72|0;
 $e = sp + 56|0;
 $qq = sp + 40|0;
 $ofs = sp + 16|0;
 $ofs1 = sp;
 $0 = $joint;
 $1 = $info;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $s = $4;
 $5 = $s;
 $6 = $5<<1;
 $s2 = $6;
 $7 = $s;
 $8 = ($7*3)|0;
 $s3 = $8;
 $9 = $s;
 $10 = $9<<2;
 $s4 = $10;
 $11 = $0;
 $12 = ((($11)) + 28|0);
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 148|0);
 $pos1 = $15;
 $16 = $0;
 $17 = ((($16)) + 28|0);
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 180|0);
 $R1 = $20;
 $21 = $0;
 $22 = ((($21)) + 28|0);
 $23 = ((($22)) + 12|0);
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 L1: do {
  if ($26) {
   $27 = $0;
   $28 = ((($27)) + 28|0);
   $29 = ((($28)) + 12|0);
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 148|0);
   $pos2 = $32;
   $33 = $0;
   $34 = ((($33)) + 28|0);
   $35 = ((($34)) + 12|0);
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 180|0);
   $R2 = $38;
   $i = 0;
   while(1) {
    $39 = $i;
    $40 = ($39|0)<(3);
    if (!($40)) {
     break L1;
    }
    $41 = $i;
    $42 = $pos2;
    $43 = (($42) + ($41<<2)|0);
    $44 = +HEAPF32[$43>>2];
    $45 = $i;
    $46 = $pos1;
    $47 = (($46) + ($45<<2)|0);
    $48 = +HEAPF32[$47>>2];
    $49 = $44 - $48;
    $50 = $i;
    $51 = (($c) + ($50<<2)|0);
    HEAPF32[$51>>2] = $49;
    $52 = $i;
    $53 = (($52) + 1)|0;
    $i = $53;
   }
  } else {
   $pos2 = 0;
   $R2 = 0;
  }
 } while(0);
 $54 = $1;
 $55 = ((($54)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 HEAPF32[$56>>2] = 1.0;
 $57 = $s;
 $58 = (($57) + 1)|0;
 $59 = $1;
 $60 = ((($59)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + ($58<<2)|0);
 HEAPF32[$62>>2] = 1.0;
 $63 = $s2;
 $64 = (($63) + 2)|0;
 $65 = $1;
 $66 = ((($65)) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + ($64<<2)|0);
 HEAPF32[$68>>2] = 1.0;
 $69 = $0;
 $70 = ((($69)) + 28|0);
 $71 = ((($70)) + 12|0);
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(0|0);
 if ($74) {
  $75 = $1;
  $76 = ((($75)) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  HEAPF32[$77>>2] = -1.0;
  $78 = $s;
  $79 = (($78) + 1)|0;
  $80 = $1;
  $81 = ((($80)) + 20|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($79<<2)|0);
  HEAPF32[$83>>2] = -1.0;
  $84 = $s2;
  $85 = (($84) + 2)|0;
  $86 = $1;
  $87 = ((($86)) + 20|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + ($85<<2)|0);
  HEAPF32[$89>>2] = -1.0;
 }
 $90 = $R1;
 $91 = $0;
 $92 = ((($91)) + 52|0);
 _dMULTIPLY0_331($ax1,$90,$92);
 _dPlaneSpace($ax1,$p,$q);
 $93 = $0;
 $94 = ((($93)) + 28|0);
 $95 = ((($94)) + 12|0);
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)!=(0|0);
 L11: do {
  if ($98) {
   $99 = ((($c)) + 4|0);
   $100 = +HEAPF32[$99>>2];
   $101 = ((($p)) + 8|0);
   $102 = +HEAPF32[$101>>2];
   $103 = $100 * $102;
   $104 = ((($c)) + 8|0);
   $105 = +HEAPF32[$104>>2];
   $106 = ((($p)) + 4|0);
   $107 = +HEAPF32[$106>>2];
   $108 = $105 * $107;
   $109 = $103 - $108;
   $110 = 0.5 * $109;
   HEAPF32[$tmp>>2] = $110;
   $111 = ((($c)) + 8|0);
   $112 = +HEAPF32[$111>>2];
   $113 = +HEAPF32[$p>>2];
   $114 = $112 * $113;
   $115 = +HEAPF32[$c>>2];
   $116 = ((($p)) + 8|0);
   $117 = +HEAPF32[$116>>2];
   $118 = $115 * $117;
   $119 = $114 - $118;
   $120 = 0.5 * $119;
   $121 = ((($tmp)) + 4|0);
   HEAPF32[$121>>2] = $120;
   $122 = +HEAPF32[$c>>2];
   $123 = ((($p)) + 4|0);
   $124 = +HEAPF32[$123>>2];
   $125 = $122 * $124;
   $126 = ((($c)) + 4|0);
   $127 = +HEAPF32[$126>>2];
   $128 = +HEAPF32[$p>>2];
   $129 = $127 * $128;
   $130 = $125 - $129;
   $131 = 0.5 * $130;
   $132 = ((($tmp)) + 8|0);
   HEAPF32[$132>>2] = $131;
   $i = 0;
   while(1) {
    $133 = $i;
    $134 = ($133|0)<(3);
    if (!($134)) {
     break;
    }
    $135 = $i;
    $136 = (($tmp) + ($135<<2)|0);
    $137 = +HEAPF32[$136>>2];
    $138 = $s3;
    $139 = $i;
    $140 = (($138) + ($139))|0;
    $141 = $1;
    $142 = ((($141)) + 20|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (($143) + ($140<<2)|0);
    HEAPF32[$144>>2] = $137;
    $145 = $i;
    $146 = (($145) + 1)|0;
    $i = $146;
   }
   $i = 0;
   while(1) {
    $147 = $i;
    $148 = ($147|0)<(3);
    if (!($148)) {
     break;
    }
    $149 = $i;
    $150 = (($tmp) + ($149<<2)|0);
    $151 = +HEAPF32[$150>>2];
    $152 = $s3;
    $153 = $i;
    $154 = (($152) + ($153))|0;
    $155 = $1;
    $156 = ((($155)) + 20|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = (($157) + ($154<<2)|0);
    HEAPF32[$158>>2] = $151;
    $159 = $i;
    $160 = (($159) + 1)|0;
    $i = $160;
   }
   $161 = ((($c)) + 4|0);
   $162 = +HEAPF32[$161>>2];
   $163 = ((($q)) + 8|0);
   $164 = +HEAPF32[$163>>2];
   $165 = $162 * $164;
   $166 = ((($c)) + 8|0);
   $167 = +HEAPF32[$166>>2];
   $168 = ((($q)) + 4|0);
   $169 = +HEAPF32[$168>>2];
   $170 = $167 * $169;
   $171 = $165 - $170;
   $172 = 0.5 * $171;
   HEAPF32[$tmp>>2] = $172;
   $173 = ((($c)) + 8|0);
   $174 = +HEAPF32[$173>>2];
   $175 = +HEAPF32[$q>>2];
   $176 = $174 * $175;
   $177 = +HEAPF32[$c>>2];
   $178 = ((($q)) + 8|0);
   $179 = +HEAPF32[$178>>2];
   $180 = $177 * $179;
   $181 = $176 - $180;
   $182 = 0.5 * $181;
   $183 = ((($tmp)) + 4|0);
   HEAPF32[$183>>2] = $182;
   $184 = +HEAPF32[$c>>2];
   $185 = ((($q)) + 4|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $184 * $186;
   $188 = ((($c)) + 4|0);
   $189 = +HEAPF32[$188>>2];
   $190 = +HEAPF32[$q>>2];
   $191 = $189 * $190;
   $192 = $187 - $191;
   $193 = 0.5 * $192;
   $194 = ((($tmp)) + 8|0);
   HEAPF32[$194>>2] = $193;
   $i = 0;
   while(1) {
    $195 = $i;
    $196 = ($195|0)<(3);
    if (!($196)) {
     break;
    }
    $197 = $i;
    $198 = (($tmp) + ($197<<2)|0);
    $199 = +HEAPF32[$198>>2];
    $200 = $s4;
    $201 = $i;
    $202 = (($200) + ($201))|0;
    $203 = $1;
    $204 = ((($203)) + 20|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = (($205) + ($202<<2)|0);
    HEAPF32[$206>>2] = $199;
    $207 = $i;
    $208 = (($207) + 1)|0;
    $i = $208;
   }
   $i = 0;
   while(1) {
    $209 = $i;
    $210 = ($209|0)<(3);
    if (!($210)) {
     break;
    }
    $211 = $i;
    $212 = (($tmp) + ($211<<2)|0);
    $213 = +HEAPF32[$212>>2];
    $214 = $s4;
    $215 = $i;
    $216 = (($214) + ($215))|0;
    $217 = $1;
    $218 = ((($217)) + 20|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (($219) + ($216<<2)|0);
    HEAPF32[$220>>2] = $213;
    $221 = $i;
    $222 = (($221) + 1)|0;
    $i = $222;
   }
   $i = 0;
   while(1) {
    $223 = $i;
    $224 = ($223|0)<(3);
    if (!($224)) {
     break;
    }
    $225 = $i;
    $226 = (($p) + ($225<<2)|0);
    $227 = +HEAPF32[$226>>2];
    $228 = -$227;
    $229 = $s3;
    $230 = $i;
    $231 = (($229) + ($230))|0;
    $232 = $1;
    $233 = ((($232)) + 16|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($234) + ($231<<2)|0);
    HEAPF32[$235>>2] = $228;
    $236 = $i;
    $237 = (($236) + 1)|0;
    $i = $237;
   }
   $i = 0;
   while(1) {
    $238 = $i;
    $239 = ($238|0)<(3);
    if (!($239)) {
     break L11;
    }
    $240 = $i;
    $241 = (($q) + ($240<<2)|0);
    $242 = +HEAPF32[$241>>2];
    $243 = -$242;
    $244 = $s4;
    $245 = $i;
    $246 = (($244) + ($245))|0;
    $247 = $1;
    $248 = ((($247)) + 16|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = (($249) + ($246<<2)|0);
    HEAPF32[$250>>2] = $243;
    $251 = $i;
    $252 = (($251) + 1)|0;
    $i = $252;
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $253 = $i;
  $254 = ($253|0)<(3);
  if (!($254)) {
   break;
  }
  $255 = $i;
  $256 = (($p) + ($255<<2)|0);
  $257 = +HEAPF32[$256>>2];
  $258 = $s3;
  $259 = $i;
  $260 = (($258) + ($259))|0;
  $261 = $1;
  $262 = ((($261)) + 8|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (($263) + ($260<<2)|0);
  HEAPF32[$264>>2] = $257;
  $265 = $i;
  $266 = (($265) + 1)|0;
  $i = $266;
 }
 $i = 0;
 while(1) {
  $267 = $i;
  $268 = ($267|0)<(3);
  if (!($268)) {
   break;
  }
  $269 = $i;
  $270 = (($q) + ($269<<2)|0);
  $271 = +HEAPF32[$270>>2];
  $272 = $s4;
  $273 = $i;
  $274 = (($272) + ($273))|0;
  $275 = $1;
  $276 = ((($275)) + 8|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = (($277) + ($274<<2)|0);
  HEAPF32[$278>>2] = $271;
  $279 = $i;
  $280 = (($279) + 1)|0;
  $i = $280;
 }
 $281 = $0;
 $282 = ((($281)) + 28|0);
 $283 = ((($282)) + 12|0);
 $284 = ((($283)) + 4|0);
 $285 = HEAP32[$284>>2]|0;
 $286 = ($285|0)!=(0|0);
 if ($286) {
  $287 = $0;
  $288 = ((($287)) + 28|0);
  $289 = ((($288)) + 4|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = ((($290)) + 164|0);
  $292 = $0;
  $293 = ((($292)) + 28|0);
  $294 = ((($293)) + 12|0);
  $295 = ((($294)) + 4|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = ((($296)) + 164|0);
  _dQMultiply1($qq,$291,$297);
  $298 = $0;
  $299 = ((($298)) + 68|0);
  _dQMultiply2($qerr,$qq,$299);
 } else {
  $300 = $0;
  $301 = ((($300)) + 28|0);
  $302 = ((($301)) + 4|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = ((($303)) + 164|0);
  $305 = $0;
  $306 = ((($305)) + 68|0);
  _dQMultiply3($qerr,$304,$306);
 }
 $307 = +HEAPF32[$qerr>>2];
 $308 = $307 < 0.0;
 if ($308) {
  $309 = ((($qerr)) + 4|0);
  $310 = +HEAPF32[$309>>2];
  $311 = -$310;
  $312 = ((($qerr)) + 4|0);
  HEAPF32[$312>>2] = $311;
  $313 = ((($qerr)) + 8|0);
  $314 = +HEAPF32[$313>>2];
  $315 = -$314;
  $316 = ((($qerr)) + 8|0);
  HEAPF32[$316>>2] = $315;
  $317 = ((($qerr)) + 12|0);
  $318 = +HEAPF32[$317>>2];
  $319 = -$318;
  $320 = ((($qerr)) + 12|0);
  HEAPF32[$320>>2] = $319;
 }
 $321 = $0;
 $322 = ((($321)) + 28|0);
 $323 = ((($322)) + 4|0);
 $324 = HEAP32[$323>>2]|0;
 $325 = ((($324)) + 180|0);
 $326 = ((($qerr)) + 4|0);
 _dMULTIPLY0_331($e,$325,$326);
 $327 = $1;
 $328 = +HEAPF32[$327>>2];
 $329 = $1;
 $330 = ((($329)) + 4|0);
 $331 = +HEAPF32[$330>>2];
 $332 = $328 * $331;
 $k = $332;
 $333 = $k;
 $334 = 2.0 * $333;
 $335 = +HEAPF32[$e>>2];
 $336 = $334 * $335;
 $337 = $1;
 $338 = ((($337)) + 28|0);
 $339 = HEAP32[$338>>2]|0;
 HEAPF32[$339>>2] = $336;
 $340 = $k;
 $341 = 2.0 * $340;
 $342 = ((($e)) + 4|0);
 $343 = +HEAPF32[$342>>2];
 $344 = $341 * $343;
 $345 = $1;
 $346 = ((($345)) + 28|0);
 $347 = HEAP32[$346>>2]|0;
 $348 = ((($347)) + 4|0);
 HEAPF32[$348>>2] = $344;
 $349 = $k;
 $350 = 2.0 * $349;
 $351 = ((($e)) + 8|0);
 $352 = +HEAPF32[$351>>2];
 $353 = $350 * $352;
 $354 = $1;
 $355 = ((($354)) + 28|0);
 $356 = HEAP32[$355>>2]|0;
 $357 = ((($356)) + 8|0);
 HEAPF32[$357>>2] = $353;
 $358 = $0;
 $359 = ((($358)) + 28|0);
 $360 = ((($359)) + 12|0);
 $361 = ((($360)) + 4|0);
 $362 = HEAP32[$361>>2]|0;
 $363 = ($362|0)!=(0|0);
 if ($363) {
  $364 = $R2;
  $365 = $0;
  $366 = ((($365)) + 84|0);
  _dMULTIPLY0_331($ofs,$364,$366);
  $i = 0;
  while(1) {
   $367 = $i;
   $368 = ($367|0)<(3);
   if (!($368)) {
    break;
   }
   $369 = $i;
   $370 = (($ofs) + ($369<<2)|0);
   $371 = +HEAPF32[$370>>2];
   $372 = $i;
   $373 = (($c) + ($372<<2)|0);
   $374 = +HEAPF32[$373>>2];
   $375 = $374 + $371;
   HEAPF32[$373>>2] = $375;
   $376 = $i;
   $377 = (($376) + 1)|0;
   $i = $377;
  }
  $378 = $k;
  $379 = (+_dDOT($p,$c));
  $380 = $378 * $379;
  $381 = $1;
  $382 = ((($381)) + 28|0);
  $383 = HEAP32[$382>>2]|0;
  $384 = ((($383)) + 12|0);
  HEAPF32[$384>>2] = $380;
  $385 = $k;
  $386 = (+_dDOT($q,$c));
  $387 = $385 * $386;
  $388 = $1;
  $389 = ((($388)) + 28|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = ((($390)) + 16|0);
  HEAPF32[$391>>2] = $387;
  $422 = $0;
  $423 = ((($422)) + 100|0);
  $424 = $0;
  $425 = $1;
  (__ZN17dxJointLimitMotor8addLimotEP7dxJointPNS0_5Info2EiPfi($423,$424,$425,5,$ax1,0)|0);
  STACKTOP = sp;return;
 } else {
  $i = 0;
  while(1) {
   $392 = $i;
   $393 = ($392|0)<(3);
   if (!($393)) {
    break;
   }
   $394 = $i;
   $395 = $0;
   $396 = ((($395)) + 84|0);
   $397 = (($396) + ($394<<2)|0);
   $398 = +HEAPF32[$397>>2];
   $399 = $i;
   $400 = $pos1;
   $401 = (($400) + ($399<<2)|0);
   $402 = +HEAPF32[$401>>2];
   $403 = $398 - $402;
   $404 = $i;
   $405 = (($ofs1) + ($404<<2)|0);
   HEAPF32[$405>>2] = $403;
   $406 = $i;
   $407 = (($406) + 1)|0;
   $i = $407;
  }
  $408 = $k;
  $409 = (+_dDOT($p,$ofs1));
  $410 = $408 * $409;
  $411 = $1;
  $412 = ((($411)) + 28|0);
  $413 = HEAP32[$412>>2]|0;
  $414 = ((($413)) + 12|0);
  HEAPF32[$414>>2] = $410;
  $415 = $k;
  $416 = (+_dDOT($q,$ofs1));
  $417 = $415 * $416;
  $418 = $1;
  $419 = ((($418)) + 28|0);
  $420 = HEAP32[$419>>2]|0;
  $421 = ((($420)) + 16|0);
  HEAPF32[$421>>2] = $417;
  $422 = $0;
  $423 = ((($422)) + 100|0);
  $424 = $0;
  $425 = $1;
  (__ZN17dxJointLimitMotor8addLimotEP7dxJointPNS0_5Info2EiPfi($423,$424,$425,5,$ax1,0)|0);
  STACKTOP = sp;return;
 }
}
function __ZL11contactInitP14dxJointContact($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = ((($3)) + 56|0);
 $5 = ((($4)) + 4|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = $0;
 $7 = ((($6)) + 56|0);
 $8 = ((($7)) + 44|0);
 _dSetZero($8,4);
 $9 = $0;
 $10 = ((($9)) + 56|0);
 $11 = ((($10)) + 44|0);
 $12 = ((($11)) + 16|0);
 _dSetZero($12,4);
 $13 = $0;
 $14 = ((($13)) + 56|0);
 $15 = ((($14)) + 44|0);
 $16 = ((($15)) + 32|0);
 HEAPF32[$16>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZL15contactGetInfo1P14dxJointContactPN7dxJoint5Info1E($j,$info) {
 $j = $j|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $m = 0, $nub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $info;
 $m = 1;
 $nub = 0;
 $2 = $0;
 $3 = ((($2)) + 56|0);
 $4 = ((($3)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 < 0.0;
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 56|0);
  $9 = ((($8)) + 4|0);
  HEAPF32[$9>>2] = 0.0;
 }
 $10 = $0;
 $11 = ((($10)) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)!=(0);
 $15 = $0;
 $16 = ((($15)) + 56|0);
 $17 = ((($16)) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 > 0.0;
 if ($14) {
  if ($19) {
   $20 = $m;
   $21 = (($20) + 1)|0;
   $m = $21;
  }
  $22 = $0;
  $23 = ((($22)) + 56|0);
  $24 = ((($23)) + 8|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $25 < 0.0;
  if ($26) {
   $27 = $0;
   $28 = ((($27)) + 56|0);
   $29 = ((($28)) + 8|0);
   HEAPF32[$29>>2] = 0.0;
  }
  $30 = $0;
  $31 = ((($30)) + 56|0);
  $32 = ((($31)) + 8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $33 > 0.0;
  if ($34) {
   $35 = $m;
   $36 = (($35) + 1)|0;
   $m = $36;
  }
  $37 = $0;
  $38 = ((($37)) + 56|0);
  $39 = ((($38)) + 4|0);
  $40 = +HEAPF32[$39>>2];
  $41 = +HEAPF32[180>>2];
  $42 = $40 == $41;
  if ($42) {
   $43 = $nub;
   $44 = (($43) + 1)|0;
   $nub = $44;
  }
  $45 = $0;
  $46 = ((($45)) + 56|0);
  $47 = ((($46)) + 8|0);
  $48 = +HEAPF32[$47>>2];
  $49 = +HEAPF32[180>>2];
  $50 = $48 == $49;
  if ($50) {
   $51 = $nub;
   $52 = (($51) + 1)|0;
   $nub = $52;
  }
 } else {
  if ($19) {
   $53 = $m;
   $54 = (($53) + 2)|0;
   $m = $54;
  }
  $55 = $0;
  $56 = ((($55)) + 56|0);
  $57 = ((($56)) + 4|0);
  $58 = +HEAPF32[$57>>2];
  $59 = +HEAPF32[180>>2];
  $60 = $58 == $59;
  if ($60) {
   $61 = $nub;
   $62 = (($61) + 2)|0;
   $nub = $62;
  }
 }
 $63 = $m;
 $64 = $0;
 $65 = ((($64)) + 52|0);
 HEAP32[$65>>2] = $63;
 $66 = $m;
 $67 = $1;
 HEAP32[$67>>2] = $66;
 $68 = $nub;
 $69 = $1;
 $70 = ((($69)) + 4|0);
 HEAP32[$70>>2] = $68;
 STACKTOP = sp;return;
}
function __ZL15contactGetInfo2P14dxJointContactPN7dxJoint5Info2E($j,$info) {
 $j = $j|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0.0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0, $368 = 0;
 var $369 = 0.0, $37 = 0.0, $370 = 0, $371 = 0.0, $372 = 0.0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0.0, $386 = 0.0;
 var $387 = 0.0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0.0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0;
 var $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0.0;
 var $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0.0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0.0, $534 = 0, $535 = 0.0, $536 = 0.0, $537 = 0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0.0, $566 = 0.0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0.0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0.0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0.0, $633 = 0, $634 = 0.0, $635 = 0, $636 = 0.0, $637 = 0.0, $638 = 0.0;
 var $639 = 0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0, $65 = 0.0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0.0, $66 = 0, $660 = 0, $661 = 0.0, $662 = 0.0, $663 = 0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0.0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0.0, $708 = 0, $709 = 0.0, $71 = 0;
 var $710 = 0.0, $711 = 0, $712 = 0.0, $713 = 0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0.0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0.0, $728 = 0;
 var $729 = 0.0, $73 = 0, $730 = 0.0, $731 = 0.0, $732 = 0.0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0.0, $74 = 0, $740 = 0, $741 = 0.0, $742 = 0.0, $743 = 0, $744 = 0.0, $745 = 0.0, $746 = 0.0;
 var $747 = 0.0, $748 = 0.0, $749 = 0, $75 = 0.0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0.0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0.0, $777 = 0.0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0.0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0.0, $792 = 0.0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0.0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0.0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0.0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0;
 var $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $erp = 0.0, $i = 0, $k = 0.0, $newc = 0.0, $normal = 0, $outgoing = 0.0, $s = 0, $s2 = 0, $t1 = 0, $t2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $normal = sp + 80|0;
 $c1 = sp + 64|0;
 $c2 = sp + 48|0;
 $t1 = sp + 16|0;
 $t2 = sp;
 $0 = $j;
 $1 = $info;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $s = $4;
 $5 = $s;
 $6 = $5<<1;
 $s2 = $6;
 $7 = $0;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2;
 $11 = ($10|0)!=(0);
 $12 = $0;
 $13 = ((($12)) + 56|0);
 $14 = ((($13)) + 44|0);
 $15 = ((($14)) + 16|0);
 $16 = +HEAPF32[$15>>2];
 if ($11) {
  HEAPF32[$normal>>2] = $16;
  $17 = $0;
  $18 = ((($17)) + 56|0);
  $19 = ((($18)) + 44|0);
  $20 = ((($19)) + 16|0);
  $21 = ((($20)) + 4|0);
  $22 = +HEAPF32[$21>>2];
  $23 = ((($normal)) + 4|0);
  HEAPF32[$23>>2] = $22;
  $24 = $0;
  $25 = ((($24)) + 56|0);
  $26 = ((($25)) + 44|0);
  $27 = ((($26)) + 16|0);
  $28 = ((($27)) + 8|0);
  $29 = +HEAPF32[$28>>2];
  $30 = ((($normal)) + 8|0);
  HEAPF32[$30>>2] = $29;
 } else {
  $31 = -$16;
  HEAPF32[$normal>>2] = $31;
  $32 = $0;
  $33 = ((($32)) + 56|0);
  $34 = ((($33)) + 44|0);
  $35 = ((($34)) + 16|0);
  $36 = ((($35)) + 4|0);
  $37 = +HEAPF32[$36>>2];
  $38 = -$37;
  $39 = ((($normal)) + 4|0);
  HEAPF32[$39>>2] = $38;
  $40 = $0;
  $41 = ((($40)) + 56|0);
  $42 = ((($41)) + 44|0);
  $43 = ((($42)) + 16|0);
  $44 = ((($43)) + 8|0);
  $45 = +HEAPF32[$44>>2];
  $46 = -$45;
  $47 = ((($normal)) + 8|0);
  HEAPF32[$47>>2] = $46;
 }
 $48 = ((($normal)) + 12|0);
 HEAPF32[$48>>2] = 0.0;
 $i = 0;
 while(1) {
  $49 = $i;
  $50 = ($49|0)<(3);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = $0;
  $53 = ((($52)) + 56|0);
  $54 = ((($53)) + 44|0);
  $55 = (($54) + ($51<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $i;
  $58 = $0;
  $59 = ((($58)) + 28|0);
  $60 = ((($59)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 148|0);
  $63 = (($62) + ($57<<2)|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $56 - $64;
  $66 = $i;
  $67 = (($c1) + ($66<<2)|0);
  HEAPF32[$67>>2] = $65;
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 $70 = +HEAPF32[$normal>>2];
 $71 = $1;
 $72 = ((($71)) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 HEAPF32[$73>>2] = $70;
 $74 = ((($normal)) + 4|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $1;
 $77 = ((($76)) + 8|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($78)) + 4|0);
 HEAPF32[$79>>2] = $75;
 $80 = ((($normal)) + 8|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $1;
 $83 = ((($82)) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($84)) + 8|0);
 HEAPF32[$85>>2] = $81;
 $86 = ((($c1)) + 4|0);
 $87 = +HEAPF32[$86>>2];
 $88 = ((($normal)) + 8|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $87 * $89;
 $91 = ((($c1)) + 8|0);
 $92 = +HEAPF32[$91>>2];
 $93 = ((($normal)) + 4|0);
 $94 = +HEAPF32[$93>>2];
 $95 = $92 * $94;
 $96 = $90 - $95;
 $97 = $1;
 $98 = ((($97)) + 12|0);
 $99 = HEAP32[$98>>2]|0;
 HEAPF32[$99>>2] = $96;
 $100 = ((($c1)) + 8|0);
 $101 = +HEAPF32[$100>>2];
 $102 = +HEAPF32[$normal>>2];
 $103 = $101 * $102;
 $104 = +HEAPF32[$c1>>2];
 $105 = ((($normal)) + 8|0);
 $106 = +HEAPF32[$105>>2];
 $107 = $104 * $106;
 $108 = $103 - $107;
 $109 = $1;
 $110 = ((($109)) + 12|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($111)) + 4|0);
 HEAPF32[$112>>2] = $108;
 $113 = +HEAPF32[$c1>>2];
 $114 = ((($normal)) + 4|0);
 $115 = +HEAPF32[$114>>2];
 $116 = $113 * $115;
 $117 = ((($c1)) + 4|0);
 $118 = +HEAPF32[$117>>2];
 $119 = +HEAPF32[$normal>>2];
 $120 = $118 * $119;
 $121 = $116 - $120;
 $122 = $1;
 $123 = ((($122)) + 12|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($124)) + 8|0);
 HEAPF32[$125>>2] = $121;
 $126 = $0;
 $127 = ((($126)) + 28|0);
 $128 = ((($127)) + 12|0);
 $129 = ((($128)) + 4|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)!=(0|0);
 if ($131) {
  $i = 0;
  while(1) {
   $132 = $i;
   $133 = ($132|0)<(3);
   if (!($133)) {
    break;
   }
   $134 = $i;
   $135 = $0;
   $136 = ((($135)) + 56|0);
   $137 = ((($136)) + 44|0);
   $138 = (($137) + ($134<<2)|0);
   $139 = +HEAPF32[$138>>2];
   $140 = $i;
   $141 = $0;
   $142 = ((($141)) + 28|0);
   $143 = ((($142)) + 12|0);
   $144 = ((($143)) + 4|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ((($145)) + 148|0);
   $147 = (($146) + ($140<<2)|0);
   $148 = +HEAPF32[$147>>2];
   $149 = $139 - $148;
   $150 = $i;
   $151 = (($c2) + ($150<<2)|0);
   HEAPF32[$151>>2] = $149;
   $152 = $i;
   $153 = (($152) + 1)|0;
   $i = $153;
  }
  $154 = +HEAPF32[$normal>>2];
  $155 = -$154;
  $156 = $1;
  $157 = ((($156)) + 16|0);
  $158 = HEAP32[$157>>2]|0;
  HEAPF32[$158>>2] = $155;
  $159 = ((($normal)) + 4|0);
  $160 = +HEAPF32[$159>>2];
  $161 = -$160;
  $162 = $1;
  $163 = ((($162)) + 16|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ((($164)) + 4|0);
  HEAPF32[$165>>2] = $161;
  $166 = ((($normal)) + 8|0);
  $167 = +HEAPF32[$166>>2];
  $168 = -$167;
  $169 = $1;
  $170 = ((($169)) + 16|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ((($171)) + 8|0);
  HEAPF32[$172>>2] = $168;
  $173 = ((($c2)) + 4|0);
  $174 = +HEAPF32[$173>>2];
  $175 = ((($normal)) + 8|0);
  $176 = +HEAPF32[$175>>2];
  $177 = $174 * $176;
  $178 = ((($c2)) + 8|0);
  $179 = +HEAPF32[$178>>2];
  $180 = ((($normal)) + 4|0);
  $181 = +HEAPF32[$180>>2];
  $182 = $179 * $181;
  $183 = $177 - $182;
  $184 = -$183;
  $185 = $1;
  $186 = ((($185)) + 20|0);
  $187 = HEAP32[$186>>2]|0;
  HEAPF32[$187>>2] = $184;
  $188 = ((($c2)) + 8|0);
  $189 = +HEAPF32[$188>>2];
  $190 = +HEAPF32[$normal>>2];
  $191 = $189 * $190;
  $192 = +HEAPF32[$c2>>2];
  $193 = ((($normal)) + 8|0);
  $194 = +HEAPF32[$193>>2];
  $195 = $192 * $194;
  $196 = $191 - $195;
  $197 = -$196;
  $198 = $1;
  $199 = ((($198)) + 20|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = ((($200)) + 4|0);
  HEAPF32[$201>>2] = $197;
  $202 = +HEAPF32[$c2>>2];
  $203 = ((($normal)) + 4|0);
  $204 = +HEAPF32[$203>>2];
  $205 = $202 * $204;
  $206 = ((($c2)) + 4|0);
  $207 = +HEAPF32[$206>>2];
  $208 = +HEAPF32[$normal>>2];
  $209 = $207 * $208;
  $210 = $205 - $209;
  $211 = -$210;
  $212 = $1;
  $213 = ((($212)) + 20|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ((($214)) + 8|0);
  HEAPF32[$215>>2] = $211;
 }
 $216 = $1;
 $217 = ((($216)) + 4|0);
 $218 = +HEAPF32[$217>>2];
 $erp = $218;
 $219 = $0;
 $220 = ((($219)) + 56|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = $221 & 8;
 $223 = ($222|0)!=(0);
 if ($223) {
  $224 = $0;
  $225 = ((($224)) + 56|0);
  $226 = ((($225)) + 20|0);
  $227 = +HEAPF32[$226>>2];
  $erp = $227;
 }
 $228 = $1;
 $229 = +HEAPF32[$228>>2];
 $230 = $erp;
 $231 = $229 * $230;
 $k = $231;
 $232 = $k;
 $233 = $0;
 $234 = ((($233)) + 56|0);
 $235 = ((($234)) + 44|0);
 $236 = ((($235)) + 32|0);
 $237 = +HEAPF32[$236>>2];
 $238 = $232 * $237;
 $239 = $1;
 $240 = ((($239)) + 28|0);
 $241 = HEAP32[$240>>2]|0;
 HEAPF32[$241>>2] = $238;
 $242 = $0;
 $243 = ((($242)) + 56|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = $244 & 16;
 $246 = ($245|0)!=(0);
 if ($246) {
  $247 = $0;
  $248 = ((($247)) + 56|0);
  $249 = ((($248)) + 24|0);
  $250 = +HEAPF32[$249>>2];
  $251 = $1;
  $252 = ((($251)) + 32|0);
  $253 = HEAP32[$252>>2]|0;
  HEAPF32[$253>>2] = $250;
 }
 $254 = $0;
 $255 = ((($254)) + 56|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = $256 & 4;
 $258 = ($257|0)!=(0);
 if ($258) {
  $259 = $1;
  $260 = ((($259)) + 8|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = $0;
  $263 = ((($262)) + 28|0);
  $264 = ((($263)) + 4|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = ((($265)) + 228|0);
  $267 = (+_dDOT($261,$266));
  $268 = $1;
  $269 = ((($268)) + 12|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $0;
  $272 = ((($271)) + 28|0);
  $273 = ((($272)) + 4|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = ((($274)) + 244|0);
  $276 = (+_dDOT($270,$275));
  $277 = $267 + $276;
  $outgoing = $277;
  $278 = $0;
  $279 = ((($278)) + 28|0);
  $280 = ((($279)) + 12|0);
  $281 = ((($280)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = ($282|0)!=(0|0);
  if ($283) {
   $284 = $1;
   $285 = ((($284)) + 16|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $0;
   $288 = ((($287)) + 28|0);
   $289 = ((($288)) + 12|0);
   $290 = ((($289)) + 4|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = ((($291)) + 228|0);
   $293 = (+_dDOT($286,$292));
   $294 = $1;
   $295 = ((($294)) + 20|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = $0;
   $298 = ((($297)) + 28|0);
   $299 = ((($298)) + 12|0);
   $300 = ((($299)) + 4|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = ((($301)) + 244|0);
   $303 = (+_dDOT($296,$302));
   $304 = $293 + $303;
   $305 = $outgoing;
   $306 = $305 + $304;
   $outgoing = $306;
  }
  $307 = $0;
  $308 = ((($307)) + 56|0);
  $309 = ((($308)) + 16|0);
  $310 = +HEAPF32[$309>>2];
  $311 = $310 >= 0.0;
  if ($311) {
   $312 = $outgoing;
   $313 = -$312;
   $314 = $0;
   $315 = ((($314)) + 56|0);
   $316 = ((($315)) + 16|0);
   $317 = +HEAPF32[$316>>2];
   $318 = $313 > $317;
   if ($318) {
    $319 = $0;
    $320 = ((($319)) + 56|0);
    $321 = ((($320)) + 12|0);
    $322 = +HEAPF32[$321>>2];
    $323 = -$322;
    $324 = $outgoing;
    $325 = $323 * $324;
    $newc = $325;
    $326 = $newc;
    $327 = $1;
    $328 = ((($327)) + 28|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = +HEAPF32[$329>>2];
    $331 = $326 > $330;
    if ($331) {
     $332 = $newc;
     $333 = $1;
     $334 = ((($333)) + 28|0);
     $335 = HEAP32[$334>>2]|0;
     HEAPF32[$335>>2] = $332;
    }
   }
  }
 }
 $336 = $1;
 $337 = ((($336)) + 36|0);
 $338 = HEAP32[$337>>2]|0;
 HEAPF32[$338>>2] = 0.0;
 $339 = +HEAPF32[180>>2];
 $340 = $1;
 $341 = ((($340)) + 40|0);
 $342 = HEAP32[$341>>2]|0;
 HEAPF32[$342>>2] = $339;
 $343 = $0;
 $344 = ((($343)) + 52|0);
 $345 = HEAP32[$344>>2]|0;
 $346 = ($345|0)>=(2);
 if ($346) {
  $347 = $0;
  $348 = ((($347)) + 56|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = $349 & 2;
  $351 = ($350|0)!=(0);
  if ($351) {
   $352 = $0;
   $353 = ((($352)) + 56|0);
   $354 = ((($353)) + 88|0);
   $355 = +HEAPF32[$354>>2];
   HEAPF32[$t1>>2] = $355;
   $356 = $0;
   $357 = ((($356)) + 56|0);
   $358 = ((($357)) + 88|0);
   $359 = ((($358)) + 4|0);
   $360 = +HEAPF32[$359>>2];
   $361 = ((($t1)) + 4|0);
   HEAPF32[$361>>2] = $360;
   $362 = $0;
   $363 = ((($362)) + 56|0);
   $364 = ((($363)) + 88|0);
   $365 = ((($364)) + 8|0);
   $366 = +HEAPF32[$365>>2];
   $367 = ((($t1)) + 8|0);
   HEAPF32[$367>>2] = $366;
   $368 = ((($normal)) + 4|0);
   $369 = +HEAPF32[$368>>2];
   $370 = ((($t1)) + 8|0);
   $371 = +HEAPF32[$370>>2];
   $372 = $369 * $371;
   $373 = ((($normal)) + 8|0);
   $374 = +HEAPF32[$373>>2];
   $375 = ((($t1)) + 4|0);
   $376 = +HEAPF32[$375>>2];
   $377 = $374 * $376;
   $378 = $372 - $377;
   HEAPF32[$t2>>2] = $378;
   $379 = ((($normal)) + 8|0);
   $380 = +HEAPF32[$379>>2];
   $381 = +HEAPF32[$t1>>2];
   $382 = $380 * $381;
   $383 = +HEAPF32[$normal>>2];
   $384 = ((($t1)) + 8|0);
   $385 = +HEAPF32[$384>>2];
   $386 = $383 * $385;
   $387 = $382 - $386;
   $388 = ((($t2)) + 4|0);
   HEAPF32[$388>>2] = $387;
   $389 = +HEAPF32[$normal>>2];
   $390 = ((($t1)) + 4|0);
   $391 = +HEAPF32[$390>>2];
   $392 = $389 * $391;
   $393 = ((($normal)) + 4|0);
   $394 = +HEAPF32[$393>>2];
   $395 = +HEAPF32[$t1>>2];
   $396 = $394 * $395;
   $397 = $392 - $396;
   $398 = ((($t2)) + 8|0);
   HEAPF32[$398>>2] = $397;
  } else {
   _dPlaneSpace($normal,$t1,$t2);
  }
  $399 = +HEAPF32[$t1>>2];
  $400 = $s;
  $401 = (($400) + 0)|0;
  $402 = $1;
  $403 = ((($402)) + 8|0);
  $404 = HEAP32[$403>>2]|0;
  $405 = (($404) + ($401<<2)|0);
  HEAPF32[$405>>2] = $399;
  $406 = ((($t1)) + 4|0);
  $407 = +HEAPF32[$406>>2];
  $408 = $s;
  $409 = (($408) + 1)|0;
  $410 = $1;
  $411 = ((($410)) + 8|0);
  $412 = HEAP32[$411>>2]|0;
  $413 = (($412) + ($409<<2)|0);
  HEAPF32[$413>>2] = $407;
  $414 = ((($t1)) + 8|0);
  $415 = +HEAPF32[$414>>2];
  $416 = $s;
  $417 = (($416) + 2)|0;
  $418 = $1;
  $419 = ((($418)) + 8|0);
  $420 = HEAP32[$419>>2]|0;
  $421 = (($420) + ($417<<2)|0);
  HEAPF32[$421>>2] = $415;
  $422 = ((($c1)) + 4|0);
  $423 = +HEAPF32[$422>>2];
  $424 = ((($t1)) + 8|0);
  $425 = +HEAPF32[$424>>2];
  $426 = $423 * $425;
  $427 = ((($c1)) + 8|0);
  $428 = +HEAPF32[$427>>2];
  $429 = ((($t1)) + 4|0);
  $430 = +HEAPF32[$429>>2];
  $431 = $428 * $430;
  $432 = $426 - $431;
  $433 = $1;
  $434 = ((($433)) + 12|0);
  $435 = HEAP32[$434>>2]|0;
  $436 = $s;
  $437 = (($435) + ($436<<2)|0);
  HEAPF32[$437>>2] = $432;
  $438 = ((($c1)) + 8|0);
  $439 = +HEAPF32[$438>>2];
  $440 = +HEAPF32[$t1>>2];
  $441 = $439 * $440;
  $442 = +HEAPF32[$c1>>2];
  $443 = ((($t1)) + 8|0);
  $444 = +HEAPF32[$443>>2];
  $445 = $442 * $444;
  $446 = $441 - $445;
  $447 = $1;
  $448 = ((($447)) + 12|0);
  $449 = HEAP32[$448>>2]|0;
  $450 = $s;
  $451 = (($449) + ($450<<2)|0);
  $452 = ((($451)) + 4|0);
  HEAPF32[$452>>2] = $446;
  $453 = +HEAPF32[$c1>>2];
  $454 = ((($t1)) + 4|0);
  $455 = +HEAPF32[$454>>2];
  $456 = $453 * $455;
  $457 = ((($c1)) + 4|0);
  $458 = +HEAPF32[$457>>2];
  $459 = +HEAPF32[$t1>>2];
  $460 = $458 * $459;
  $461 = $456 - $460;
  $462 = $1;
  $463 = ((($462)) + 12|0);
  $464 = HEAP32[$463>>2]|0;
  $465 = $s;
  $466 = (($464) + ($465<<2)|0);
  $467 = ((($466)) + 8|0);
  HEAPF32[$467>>2] = $461;
  $468 = $0;
  $469 = ((($468)) + 28|0);
  $470 = ((($469)) + 12|0);
  $471 = ((($470)) + 4|0);
  $472 = HEAP32[$471>>2]|0;
  $473 = ($472|0)!=(0|0);
  if ($473) {
   $474 = +HEAPF32[$t1>>2];
   $475 = -$474;
   $476 = $s;
   $477 = (($476) + 0)|0;
   $478 = $1;
   $479 = ((($478)) + 16|0);
   $480 = HEAP32[$479>>2]|0;
   $481 = (($480) + ($477<<2)|0);
   HEAPF32[$481>>2] = $475;
   $482 = ((($t1)) + 4|0);
   $483 = +HEAPF32[$482>>2];
   $484 = -$483;
   $485 = $s;
   $486 = (($485) + 1)|0;
   $487 = $1;
   $488 = ((($487)) + 16|0);
   $489 = HEAP32[$488>>2]|0;
   $490 = (($489) + ($486<<2)|0);
   HEAPF32[$490>>2] = $484;
   $491 = ((($t1)) + 8|0);
   $492 = +HEAPF32[$491>>2];
   $493 = -$492;
   $494 = $s;
   $495 = (($494) + 2)|0;
   $496 = $1;
   $497 = ((($496)) + 16|0);
   $498 = HEAP32[$497>>2]|0;
   $499 = (($498) + ($495<<2)|0);
   HEAPF32[$499>>2] = $493;
   $500 = ((($c2)) + 4|0);
   $501 = +HEAPF32[$500>>2];
   $502 = ((($t1)) + 8|0);
   $503 = +HEAPF32[$502>>2];
   $504 = $501 * $503;
   $505 = ((($c2)) + 8|0);
   $506 = +HEAPF32[$505>>2];
   $507 = ((($t1)) + 4|0);
   $508 = +HEAPF32[$507>>2];
   $509 = $506 * $508;
   $510 = $504 - $509;
   $511 = -$510;
   $512 = $1;
   $513 = ((($512)) + 20|0);
   $514 = HEAP32[$513>>2]|0;
   $515 = $s;
   $516 = (($514) + ($515<<2)|0);
   HEAPF32[$516>>2] = $511;
   $517 = ((($c2)) + 8|0);
   $518 = +HEAPF32[$517>>2];
   $519 = +HEAPF32[$t1>>2];
   $520 = $518 * $519;
   $521 = +HEAPF32[$c2>>2];
   $522 = ((($t1)) + 8|0);
   $523 = +HEAPF32[$522>>2];
   $524 = $521 * $523;
   $525 = $520 - $524;
   $526 = -$525;
   $527 = $1;
   $528 = ((($527)) + 20|0);
   $529 = HEAP32[$528>>2]|0;
   $530 = $s;
   $531 = (($529) + ($530<<2)|0);
   $532 = ((($531)) + 4|0);
   HEAPF32[$532>>2] = $526;
   $533 = +HEAPF32[$c2>>2];
   $534 = ((($t1)) + 4|0);
   $535 = +HEAPF32[$534>>2];
   $536 = $533 * $535;
   $537 = ((($c2)) + 4|0);
   $538 = +HEAPF32[$537>>2];
   $539 = +HEAPF32[$t1>>2];
   $540 = $538 * $539;
   $541 = $536 - $540;
   $542 = -$541;
   $543 = $1;
   $544 = ((($543)) + 20|0);
   $545 = HEAP32[$544>>2]|0;
   $546 = $s;
   $547 = (($545) + ($546<<2)|0);
   $548 = ((($547)) + 8|0);
   HEAPF32[$548>>2] = $542;
  }
  $549 = $0;
  $550 = ((($549)) + 56|0);
  $551 = HEAP32[$550>>2]|0;
  $552 = $551 & 32;
  $553 = ($552|0)!=(0);
  if ($553) {
   $554 = $0;
   $555 = ((($554)) + 56|0);
   $556 = ((($555)) + 28|0);
   $557 = +HEAPF32[$556>>2];
   $558 = $1;
   $559 = ((($558)) + 28|0);
   $560 = HEAP32[$559>>2]|0;
   $561 = ((($560)) + 4|0);
   HEAPF32[$561>>2] = $557;
  }
  $562 = $0;
  $563 = ((($562)) + 56|0);
  $564 = ((($563)) + 4|0);
  $565 = +HEAPF32[$564>>2];
  $566 = -$565;
  $567 = $1;
  $568 = ((($567)) + 36|0);
  $569 = HEAP32[$568>>2]|0;
  $570 = ((($569)) + 4|0);
  HEAPF32[$570>>2] = $566;
  $571 = $0;
  $572 = ((($571)) + 56|0);
  $573 = ((($572)) + 4|0);
  $574 = +HEAPF32[$573>>2];
  $575 = $1;
  $576 = ((($575)) + 40|0);
  $577 = HEAP32[$576>>2]|0;
  $578 = ((($577)) + 4|0);
  HEAPF32[$578>>2] = $574;
  $579 = $0;
  $580 = ((($579)) + 56|0);
  $581 = HEAP32[$580>>2]|0;
  $582 = $581 & 4096;
  $583 = ($582|0)!=(0);
  if ($583) {
   $584 = $1;
   $585 = ((($584)) + 44|0);
   $586 = HEAP32[$585>>2]|0;
   $587 = ((($586)) + 4|0);
   HEAP32[$587>>2] = 0;
  }
  $588 = $0;
  $589 = ((($588)) + 56|0);
  $590 = HEAP32[$589>>2]|0;
  $591 = $590 & 128;
  $592 = ($591|0)!=(0);
  if ($592) {
   $593 = $0;
   $594 = ((($593)) + 56|0);
   $595 = ((($594)) + 36|0);
   $596 = +HEAPF32[$595>>2];
   $597 = $1;
   $598 = ((($597)) + 32|0);
   $599 = HEAP32[$598>>2]|0;
   $600 = ((($599)) + 4|0);
   HEAPF32[$600>>2] = $596;
  }
 }
 $601 = $0;
 $602 = ((($601)) + 52|0);
 $603 = HEAP32[$602>>2]|0;
 $604 = ($603|0)>=(3);
 if (!($604)) {
  STACKTOP = sp;return;
 }
 $605 = +HEAPF32[$t2>>2];
 $606 = $s2;
 $607 = (($606) + 0)|0;
 $608 = $1;
 $609 = ((($608)) + 8|0);
 $610 = HEAP32[$609>>2]|0;
 $611 = (($610) + ($607<<2)|0);
 HEAPF32[$611>>2] = $605;
 $612 = ((($t2)) + 4|0);
 $613 = +HEAPF32[$612>>2];
 $614 = $s2;
 $615 = (($614) + 1)|0;
 $616 = $1;
 $617 = ((($616)) + 8|0);
 $618 = HEAP32[$617>>2]|0;
 $619 = (($618) + ($615<<2)|0);
 HEAPF32[$619>>2] = $613;
 $620 = ((($t2)) + 8|0);
 $621 = +HEAPF32[$620>>2];
 $622 = $s2;
 $623 = (($622) + 2)|0;
 $624 = $1;
 $625 = ((($624)) + 8|0);
 $626 = HEAP32[$625>>2]|0;
 $627 = (($626) + ($623<<2)|0);
 HEAPF32[$627>>2] = $621;
 $628 = ((($c1)) + 4|0);
 $629 = +HEAPF32[$628>>2];
 $630 = ((($t2)) + 8|0);
 $631 = +HEAPF32[$630>>2];
 $632 = $629 * $631;
 $633 = ((($c1)) + 8|0);
 $634 = +HEAPF32[$633>>2];
 $635 = ((($t2)) + 4|0);
 $636 = +HEAPF32[$635>>2];
 $637 = $634 * $636;
 $638 = $632 - $637;
 $639 = $1;
 $640 = ((($639)) + 12|0);
 $641 = HEAP32[$640>>2]|0;
 $642 = $s2;
 $643 = (($641) + ($642<<2)|0);
 HEAPF32[$643>>2] = $638;
 $644 = ((($c1)) + 8|0);
 $645 = +HEAPF32[$644>>2];
 $646 = +HEAPF32[$t2>>2];
 $647 = $645 * $646;
 $648 = +HEAPF32[$c1>>2];
 $649 = ((($t2)) + 8|0);
 $650 = +HEAPF32[$649>>2];
 $651 = $648 * $650;
 $652 = $647 - $651;
 $653 = $1;
 $654 = ((($653)) + 12|0);
 $655 = HEAP32[$654>>2]|0;
 $656 = $s2;
 $657 = (($655) + ($656<<2)|0);
 $658 = ((($657)) + 4|0);
 HEAPF32[$658>>2] = $652;
 $659 = +HEAPF32[$c1>>2];
 $660 = ((($t2)) + 4|0);
 $661 = +HEAPF32[$660>>2];
 $662 = $659 * $661;
 $663 = ((($c1)) + 4|0);
 $664 = +HEAPF32[$663>>2];
 $665 = +HEAPF32[$t2>>2];
 $666 = $664 * $665;
 $667 = $662 - $666;
 $668 = $1;
 $669 = ((($668)) + 12|0);
 $670 = HEAP32[$669>>2]|0;
 $671 = $s2;
 $672 = (($670) + ($671<<2)|0);
 $673 = ((($672)) + 8|0);
 HEAPF32[$673>>2] = $667;
 $674 = $0;
 $675 = ((($674)) + 28|0);
 $676 = ((($675)) + 12|0);
 $677 = ((($676)) + 4|0);
 $678 = HEAP32[$677>>2]|0;
 $679 = ($678|0)!=(0|0);
 if ($679) {
  $680 = +HEAPF32[$t2>>2];
  $681 = -$680;
  $682 = $s2;
  $683 = (($682) + 0)|0;
  $684 = $1;
  $685 = ((($684)) + 16|0);
  $686 = HEAP32[$685>>2]|0;
  $687 = (($686) + ($683<<2)|0);
  HEAPF32[$687>>2] = $681;
  $688 = ((($t2)) + 4|0);
  $689 = +HEAPF32[$688>>2];
  $690 = -$689;
  $691 = $s2;
  $692 = (($691) + 1)|0;
  $693 = $1;
  $694 = ((($693)) + 16|0);
  $695 = HEAP32[$694>>2]|0;
  $696 = (($695) + ($692<<2)|0);
  HEAPF32[$696>>2] = $690;
  $697 = ((($t2)) + 8|0);
  $698 = +HEAPF32[$697>>2];
  $699 = -$698;
  $700 = $s2;
  $701 = (($700) + 2)|0;
  $702 = $1;
  $703 = ((($702)) + 16|0);
  $704 = HEAP32[$703>>2]|0;
  $705 = (($704) + ($701<<2)|0);
  HEAPF32[$705>>2] = $699;
  $706 = ((($c2)) + 4|0);
  $707 = +HEAPF32[$706>>2];
  $708 = ((($t2)) + 8|0);
  $709 = +HEAPF32[$708>>2];
  $710 = $707 * $709;
  $711 = ((($c2)) + 8|0);
  $712 = +HEAPF32[$711>>2];
  $713 = ((($t2)) + 4|0);
  $714 = +HEAPF32[$713>>2];
  $715 = $712 * $714;
  $716 = $710 - $715;
  $717 = -$716;
  $718 = $1;
  $719 = ((($718)) + 20|0);
  $720 = HEAP32[$719>>2]|0;
  $721 = $s2;
  $722 = (($720) + ($721<<2)|0);
  HEAPF32[$722>>2] = $717;
  $723 = ((($c2)) + 8|0);
  $724 = +HEAPF32[$723>>2];
  $725 = +HEAPF32[$t2>>2];
  $726 = $724 * $725;
  $727 = +HEAPF32[$c2>>2];
  $728 = ((($t2)) + 8|0);
  $729 = +HEAPF32[$728>>2];
  $730 = $727 * $729;
  $731 = $726 - $730;
  $732 = -$731;
  $733 = $1;
  $734 = ((($733)) + 20|0);
  $735 = HEAP32[$734>>2]|0;
  $736 = $s2;
  $737 = (($735) + ($736<<2)|0);
  $738 = ((($737)) + 4|0);
  HEAPF32[$738>>2] = $732;
  $739 = +HEAPF32[$c2>>2];
  $740 = ((($t2)) + 4|0);
  $741 = +HEAPF32[$740>>2];
  $742 = $739 * $741;
  $743 = ((($c2)) + 4|0);
  $744 = +HEAPF32[$743>>2];
  $745 = +HEAPF32[$t2>>2];
  $746 = $744 * $745;
  $747 = $742 - $746;
  $748 = -$747;
  $749 = $1;
  $750 = ((($749)) + 20|0);
  $751 = HEAP32[$750>>2]|0;
  $752 = $s2;
  $753 = (($751) + ($752<<2)|0);
  $754 = ((($753)) + 8|0);
  HEAPF32[$754>>2] = $748;
 }
 $755 = $0;
 $756 = ((($755)) + 56|0);
 $757 = HEAP32[$756>>2]|0;
 $758 = $757 & 64;
 $759 = ($758|0)!=(0);
 if ($759) {
  $760 = $0;
  $761 = ((($760)) + 56|0);
  $762 = ((($761)) + 32|0);
  $763 = +HEAPF32[$762>>2];
  $764 = $1;
  $765 = ((($764)) + 28|0);
  $766 = HEAP32[$765>>2]|0;
  $767 = ((($766)) + 8|0);
  HEAPF32[$767>>2] = $763;
 }
 $768 = $0;
 $769 = ((($768)) + 56|0);
 $770 = HEAP32[$769>>2]|0;
 $771 = $770 & 1;
 $772 = ($771|0)!=(0);
 $773 = $0;
 $774 = ((($773)) + 56|0);
 if ($772) {
  $775 = ((($774)) + 8|0);
  $776 = +HEAPF32[$775>>2];
  $777 = -$776;
  $778 = $1;
  $779 = ((($778)) + 36|0);
  $780 = HEAP32[$779>>2]|0;
  $781 = ((($780)) + 8|0);
  HEAPF32[$781>>2] = $777;
  $782 = $0;
  $783 = ((($782)) + 56|0);
  $784 = ((($783)) + 8|0);
  $785 = +HEAPF32[$784>>2];
  $786 = $1;
  $787 = ((($786)) + 40|0);
  $788 = HEAP32[$787>>2]|0;
  $789 = ((($788)) + 8|0);
  HEAPF32[$789>>2] = $785;
 } else {
  $790 = ((($774)) + 4|0);
  $791 = +HEAPF32[$790>>2];
  $792 = -$791;
  $793 = $1;
  $794 = ((($793)) + 36|0);
  $795 = HEAP32[$794>>2]|0;
  $796 = ((($795)) + 8|0);
  HEAPF32[$796>>2] = $792;
  $797 = $0;
  $798 = ((($797)) + 56|0);
  $799 = ((($798)) + 4|0);
  $800 = +HEAPF32[$799>>2];
  $801 = $1;
  $802 = ((($801)) + 40|0);
  $803 = HEAP32[$802>>2]|0;
  $804 = ((($803)) + 8|0);
  HEAPF32[$804>>2] = $800;
 }
 $805 = $0;
 $806 = ((($805)) + 56|0);
 $807 = HEAP32[$806>>2]|0;
 $808 = $807 & 8192;
 $809 = ($808|0)!=(0);
 if ($809) {
  $810 = $1;
  $811 = ((($810)) + 44|0);
  $812 = HEAP32[$811>>2]|0;
  $813 = ((($812)) + 8|0);
  HEAP32[$813>>2] = 0;
 }
 $814 = $0;
 $815 = ((($814)) + 56|0);
 $816 = HEAP32[$815>>2]|0;
 $817 = $816 & 256;
 $818 = ($817|0)!=(0);
 if (!($818)) {
  STACKTOP = sp;return;
 }
 $819 = $0;
 $820 = ((($819)) + 56|0);
 $821 = ((($820)) + 40|0);
 $822 = +HEAPF32[$821>>2];
 $823 = $1;
 $824 = ((($823)) + 32|0);
 $825 = HEAP32[$824>>2]|0;
 $826 = ((($825)) + 8|0);
 HEAPF32[$826>>2] = $822;
 STACKTOP = sp;return;
}
function __ZL10hinge2InitP13dxJointHinge2($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 _dSetZero($2,4);
 $3 = $0;
 $4 = ((($3)) + 68|0);
 _dSetZero($4,4);
 $5 = $0;
 $6 = ((($5)) + 84|0);
 _dSetZero($6,4);
 $7 = $0;
 $8 = ((($7)) + 84|0);
 HEAPF32[$8>>2] = 1.0;
 $9 = $0;
 $10 = ((($9)) + 100|0);
 _dSetZero($10,4);
 $11 = $0;
 $12 = ((($11)) + 100|0);
 $13 = ((($12)) + 4|0);
 HEAPF32[$13>>2] = 1.0;
 $14 = $0;
 $15 = ((($14)) + 116|0);
 HEAPF32[$15>>2] = 0.0;
 $16 = $0;
 $17 = ((($16)) + 120|0);
 HEAPF32[$17>>2] = 0.0;
 $18 = $0;
 $19 = ((($18)) + 124|0);
 _dSetZero($19,4);
 $20 = $0;
 $21 = ((($20)) + 124|0);
 HEAPF32[$21>>2] = 1.0;
 $22 = $0;
 $23 = ((($22)) + 140|0);
 _dSetZero($23,4);
 $24 = $0;
 $25 = ((($24)) + 140|0);
 $26 = ((($25)) + 4|0);
 HEAPF32[$26>>2] = 1.0;
 $27 = $0;
 $28 = ((($27)) + 156|0);
 $29 = $0;
 $30 = HEAP32[$29>>2]|0;
 __ZN17dxJointLimitMotor4initEP7dxWorld($28,$30);
 $31 = $0;
 $32 = ((($31)) + 196|0);
 $33 = $0;
 $34 = HEAP32[$33>>2]|0;
 __ZN17dxJointLimitMotor4initEP7dxWorld($32,$34);
 $35 = $0;
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 32|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $0;
 $40 = ((($39)) + 236|0);
 HEAPF32[$40>>2] = $38;
 $41 = $0;
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 36|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $0;
 $46 = ((($45)) + 240|0);
 HEAPF32[$46>>2] = $44;
 $47 = $0;
 $48 = ((($47)) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 | 4;
 HEAP32[$48>>2] = $50;
 STACKTOP = sp;return;
}
function __ZL14hinge2GetInfo1P13dxJointHinge2PN7dxJoint5Info1E($j,$info) {
 $j = $j|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $angle = 0.0, $atlimit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $info;
 $2 = $1;
 HEAP32[$2>>2] = 4;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 4;
 $atlimit = 0;
 $5 = $0;
 $6 = ((($5)) + 156|0);
 $7 = ((($6)) + 8|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8;
 $10 = $9 >= -3.1415926535897931;
 if ($10) {
  label = 3;
 } else {
  $11 = $0;
  $12 = ((($11)) + 156|0);
  $13 = ((($12)) + 12|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $14;
  $16 = $15 <= 3.1415926535897931;
  if ($16) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $17 = $0;
  $18 = ((($17)) + 156|0);
  $19 = ((($18)) + 8|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $0;
  $22 = ((($21)) + 156|0);
  $23 = ((($22)) + 12|0);
  $24 = +HEAPF32[$23>>2];
  $25 = $20 <= $24;
  if ($25) {
   $26 = $0;
   $27 = (+__ZL18measureHinge2AngleP13dxJointHinge2($26));
   $angle = $27;
   $28 = $0;
   $29 = ((($28)) + 156|0);
   $30 = $angle;
   $31 = (__ZN17dxJointLimitMotor19testRotationalLimitEf($29,$30)|0);
   $32 = ($31|0)!=(0);
   if ($32) {
    $atlimit = 1;
   }
  }
 }
 $33 = $atlimit;
 $34 = ($33|0)!=(0);
 if ($34) {
  label = 8;
 } else {
  $35 = $0;
  $36 = ((($35)) + 156|0);
  $37 = ((($36)) + 4|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $38 > 0.0;
  if ($39) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $40 = $1;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
 }
 $43 = $0;
 $44 = ((($43)) + 196|0);
 $45 = ((($44)) + 32|0);
 HEAP32[$45>>2] = 0;
 $46 = $0;
 $47 = ((($46)) + 196|0);
 $48 = ((($47)) + 4|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $49 > 0.0;
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = $1;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$51>>2] = $53;
 STACKTOP = sp;return;
}
function __ZL14hinge2GetInfo2P13dxJointHinge2PN7dxJoint5Info2E($joint,$info) {
 $joint = $joint|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $ax1 = 0, $ax2 = 0, $c = 0.0, $k = 0.0, $q = 0;
 var $row = 0, $s = 0.0, $s3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $q = sp + 48|0;
 $ax1 = sp + 32|0;
 $ax2 = sp + 16|0;
 $0 = $joint;
 $1 = $info;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 180|0);
 $7 = $0;
 $8 = ((($7)) + 84|0);
 _dMULTIPLY0_331($ax1,$6,$8);
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = ((($10)) + 12|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 180|0);
 $15 = $0;
 $16 = ((($15)) + 100|0);
 _dMULTIPLY0_331($ax2,$14,$16);
 $17 = ((($ax1)) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = ((($ax2)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $18 * $20;
 $22 = ((($ax1)) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = ((($ax2)) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $23 * $25;
 $27 = $21 - $26;
 HEAPF32[$q>>2] = $27;
 $28 = ((($ax1)) + 8|0);
 $29 = +HEAPF32[$28>>2];
 $30 = +HEAPF32[$ax2>>2];
 $31 = $29 * $30;
 $32 = +HEAPF32[$ax1>>2];
 $33 = ((($ax2)) + 8|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $32 * $34;
 $36 = $31 - $35;
 $37 = ((($q)) + 4|0);
 HEAPF32[$37>>2] = $36;
 $38 = +HEAPF32[$ax1>>2];
 $39 = ((($ax2)) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $38 * $40;
 $42 = ((($ax1)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = +HEAPF32[$ax2>>2];
 $45 = $43 * $44;
 $46 = $41 - $45;
 $47 = ((($q)) + 8|0);
 HEAPF32[$47>>2] = $46;
 $48 = +HEAPF32[$q>>2];
 $49 = +HEAPF32[$q>>2];
 $50 = $48 * $49;
 $51 = ((($q)) + 4|0);
 $52 = +HEAPF32[$51>>2];
 $53 = ((($q)) + 4|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $52 * $54;
 $56 = $50 + $55;
 $57 = ((($q)) + 8|0);
 $58 = +HEAPF32[$57>>2];
 $59 = ((($q)) + 8|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $58 * $60;
 $62 = $56 + $61;
 $63 = $62;
 $64 = (+Math_sqrt((+$63)));
 $65 = $64;
 $s = $65;
 $66 = (+_dDOT($ax1,$ax2));
 $c = $66;
 _dNormalize3($q);
 $67 = $0;
 $68 = $1;
 $69 = $0;
 $70 = ((($69)) + 52|0);
 $71 = $0;
 $72 = ((($71)) + 68|0);
 $73 = $0;
 $74 = ((($73)) + 236|0);
 $75 = +HEAPF32[$74>>2];
 __ZL8setBall2P7dxJointPNS_5Info2EPfS3_S3_f($67,$68,$70,$72,$ax1,$75);
 $76 = $1;
 $77 = ((($76)) + 24|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78*3)|0;
 $s3 = $79;
 $80 = +HEAPF32[$q>>2];
 $81 = $s3;
 $82 = (($81) + 0)|0;
 $83 = $1;
 $84 = ((($83)) + 12|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + ($82<<2)|0);
 HEAPF32[$86>>2] = $80;
 $87 = ((($q)) + 4|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $s3;
 $90 = (($89) + 1)|0;
 $91 = $1;
 $92 = ((($91)) + 12|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + ($90<<2)|0);
 HEAPF32[$94>>2] = $88;
 $95 = ((($q)) + 8|0);
 $96 = +HEAPF32[$95>>2];
 $97 = $s3;
 $98 = (($97) + 2)|0;
 $99 = $1;
 $100 = ((($99)) + 12|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) + ($98<<2)|0);
 HEAPF32[$102>>2] = $96;
 $103 = $0;
 $104 = ((($103)) + 28|0);
 $105 = ((($104)) + 12|0);
 $106 = ((($105)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = +HEAPF32[$q>>2];
  $110 = -$109;
  $111 = $s3;
  $112 = (($111) + 0)|0;
  $113 = $1;
  $114 = ((($113)) + 20|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + ($112<<2)|0);
  HEAPF32[$116>>2] = $110;
  $117 = ((($q)) + 4|0);
  $118 = +HEAPF32[$117>>2];
  $119 = -$118;
  $120 = $s3;
  $121 = (($120) + 1)|0;
  $122 = $1;
  $123 = ((($122)) + 20|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + ($121<<2)|0);
  HEAPF32[$125>>2] = $119;
  $126 = ((($q)) + 8|0);
  $127 = +HEAPF32[$126>>2];
  $128 = -$127;
  $129 = $s3;
  $130 = (($129) + 2)|0;
  $131 = $1;
  $132 = ((($131)) + 20|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + ($130<<2)|0);
  HEAPF32[$134>>2] = $128;
 }
 $135 = $1;
 $136 = +HEAPF32[$135>>2];
 $137 = $1;
 $138 = ((($137)) + 4|0);
 $139 = +HEAPF32[$138>>2];
 $140 = $136 * $139;
 $k = $140;
 $141 = $k;
 $142 = $0;
 $143 = ((($142)) + 116|0);
 $144 = +HEAPF32[$143>>2];
 $145 = $s;
 $146 = $144 * $145;
 $147 = $0;
 $148 = ((($147)) + 120|0);
 $149 = +HEAPF32[$148>>2];
 $150 = $c;
 $151 = $149 * $150;
 $152 = $146 - $151;
 $153 = $141 * $152;
 $154 = $1;
 $155 = ((($154)) + 28|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ((($156)) + 12|0);
 HEAPF32[$157>>2] = $153;
 $158 = $0;
 $159 = ((($158)) + 156|0);
 $160 = $0;
 $161 = $1;
 $162 = (__ZN17dxJointLimitMotor8addLimotEP7dxJointPNS0_5Info2EiPfi($159,$160,$161,4,$ax1,1)|0);
 $163 = (4 + ($162))|0;
 $row = $163;
 $164 = $0;
 $165 = ((($164)) + 196|0);
 $166 = $0;
 $167 = $1;
 $168 = $row;
 (__ZN17dxJointLimitMotor8addLimotEP7dxJointPNS0_5Info2EiPfi($165,$166,$167,$168,$ax2,1)|0);
 $169 = $0;
 $170 = ((($169)) + 240|0);
 $171 = +HEAPF32[$170>>2];
 $172 = $1;
 $173 = ((($172)) + 32|0);
 $174 = HEAP32[$173>>2]|0;
 HEAPF32[$174>>2] = $171;
 STACKTOP = sp;return;
}
function __ZL10amotorInitP13dxJointAMotor($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = ((($3)) + 56|0);
 HEAP32[$4>>2] = 0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(3);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = ((($8)) + 60|0);
  $10 = (($9) + ($7<<2)|0);
  HEAP32[$10>>2] = 0;
  $11 = $i;
  $12 = $0;
  $13 = ((($12)) + 72|0);
  $14 = (($13) + ($11<<4)|0);
  _dSetZero($14,4);
  $15 = $i;
  $16 = $0;
  $17 = ((($16)) + 120|0);
  $18 = (($17) + (($15*40)|0)|0);
  $19 = $0;
  $20 = HEAP32[$19>>2]|0;
  __ZN17dxJointLimitMotor4initEP7dxWorld($18,$20);
  $21 = $i;
  $22 = $0;
  $23 = ((($22)) + 240|0);
  $24 = (($23) + ($21<<2)|0);
  HEAPF32[$24>>2] = 0.0;
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 $27 = $0;
 $28 = ((($27)) + 252|0);
 _dSetZero($28,4);
 $29 = $0;
 $30 = ((($29)) + 268|0);
 _dSetZero($30,4);
 $31 = $0;
 $32 = ((($31)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 | 4;
 HEAP32[$32>>2] = $34;
 STACKTOP = sp;return;
}
function __ZL14amotorGetInfo1P13dxJointAMotorPN7dxJoint5Info1E($j,$info) {
 $j = $j|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ax = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ax = sp + 8|0;
 $0 = $j;
 $1 = $info;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(1);
 if ($8) {
  $9 = $0;
  __ZL23amotorComputeGlobalAxesP13dxJointAMotorPA4_f($9,$ax);
  $10 = $0;
  __ZL24amotorComputeEulerAnglesP13dxJointAMotorPA4_f($10,$ax);
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $0;
  $13 = ((($12)) + 52|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $0;
  $18 = ((($17)) + 120|0);
  $19 = (($18) + (($16*40)|0)|0);
  $20 = $i;
  $21 = $0;
  $22 = ((($21)) + 240|0);
  $23 = (($22) + ($20<<2)|0);
  $24 = +HEAPF32[$23>>2];
  $25 = (__ZN17dxJointLimitMotor19testRotationalLimitEf($19,$24)|0);
  $26 = ($25|0)!=(0);
  if ($26) {
   label = 7;
  } else {
   $27 = $i;
   $28 = $0;
   $29 = ((($28)) + 120|0);
   $30 = (($29) + (($27*40)|0)|0);
   $31 = ((($30)) + 4|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $32 > 0.0;
   if ($33) {
    label = 7;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $34 = $1;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[$34>>2] = $36;
  }
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 STACKTOP = sp;return;
}
function __ZL14amotorGetInfo2P13dxJointAMotorPN7dxJoint5Info2E($joint,$info) {
 $joint = $joint|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0;
 var $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0;
 var $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0;
 var $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0;
 var $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ax = 0, $ax0_cross_ax1 = 0, $ax1_cross_ax2 = 0, $axptr = 0, $i = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ax = sp + 56|0;
 $axptr = sp + 40|0;
 $ax0_cross_ax1 = sp + 24|0;
 $ax1_cross_ax2 = sp + 8|0;
 $0 = $joint;
 $1 = $info;
 $2 = $0;
 __ZL23amotorComputeGlobalAxesP13dxJointAMotorPA4_f($2,$ax);
 HEAP32[$axptr>>2] = $ax;
 $3 = ((($ax)) + 16|0);
 $4 = ((($axptr)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($ax)) + 32|0);
 $6 = ((($axptr)) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = $0;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = ((($ax)) + 4|0);
  $12 = +HEAPF32[$11>>2];
  $13 = ((($ax)) + 16|0);
  $14 = ((($13)) + 8|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $12 * $15;
  $17 = ((($ax)) + 8|0);
  $18 = +HEAPF32[$17>>2];
  $19 = ((($ax)) + 16|0);
  $20 = ((($19)) + 4|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $18 * $21;
  $23 = $16 - $22;
  HEAPF32[$ax0_cross_ax1>>2] = $23;
  $24 = ((($ax)) + 8|0);
  $25 = +HEAPF32[$24>>2];
  $26 = ((($ax)) + 16|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $25 * $27;
  $29 = +HEAPF32[$ax>>2];
  $30 = ((($ax)) + 16|0);
  $31 = ((($30)) + 8|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $29 * $32;
  $34 = $28 - $33;
  $35 = ((($ax0_cross_ax1)) + 4|0);
  HEAPF32[$35>>2] = $34;
  $36 = +HEAPF32[$ax>>2];
  $37 = ((($ax)) + 16|0);
  $38 = ((($37)) + 4|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $36 * $39;
  $41 = ((($ax)) + 4|0);
  $42 = +HEAPF32[$41>>2];
  $43 = ((($ax)) + 16|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $42 * $44;
  $46 = $40 - $45;
  $47 = ((($ax0_cross_ax1)) + 8|0);
  HEAPF32[$47>>2] = $46;
  $48 = ((($axptr)) + 8|0);
  HEAP32[$48>>2] = $ax0_cross_ax1;
  $49 = ((($ax)) + 16|0);
  $50 = ((($49)) + 4|0);
  $51 = +HEAPF32[$50>>2];
  $52 = ((($ax)) + 32|0);
  $53 = ((($52)) + 8|0);
  $54 = +HEAPF32[$53>>2];
  $55 = $51 * $54;
  $56 = ((($ax)) + 16|0);
  $57 = ((($56)) + 8|0);
  $58 = +HEAPF32[$57>>2];
  $59 = ((($ax)) + 32|0);
  $60 = ((($59)) + 4|0);
  $61 = +HEAPF32[$60>>2];
  $62 = $58 * $61;
  $63 = $55 - $62;
  HEAPF32[$ax1_cross_ax2>>2] = $63;
  $64 = ((($ax)) + 16|0);
  $65 = ((($64)) + 8|0);
  $66 = +HEAPF32[$65>>2];
  $67 = ((($ax)) + 32|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $66 * $68;
  $70 = ((($ax)) + 16|0);
  $71 = +HEAPF32[$70>>2];
  $72 = ((($ax)) + 32|0);
  $73 = ((($72)) + 8|0);
  $74 = +HEAPF32[$73>>2];
  $75 = $71 * $74;
  $76 = $69 - $75;
  $77 = ((($ax1_cross_ax2)) + 4|0);
  HEAPF32[$77>>2] = $76;
  $78 = ((($ax)) + 16|0);
  $79 = +HEAPF32[$78>>2];
  $80 = ((($ax)) + 32|0);
  $81 = ((($80)) + 4|0);
  $82 = +HEAPF32[$81>>2];
  $83 = $79 * $82;
  $84 = ((($ax)) + 16|0);
  $85 = ((($84)) + 4|0);
  $86 = +HEAPF32[$85>>2];
  $87 = ((($ax)) + 32|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $86 * $88;
  $90 = $83 - $89;
  $91 = ((($ax1_cross_ax2)) + 8|0);
  HEAPF32[$91>>2] = $90;
  HEAP32[$axptr>>2] = $ax1_cross_ax2;
 }
 $row = 0;
 $i = 0;
 while(1) {
  $92 = $i;
  $93 = $0;
  $94 = ((($93)) + 52|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($92|0)<($95|0);
  if (!($96)) {
   break;
  }
  $97 = $i;
  $98 = $0;
  $99 = ((($98)) + 120|0);
  $100 = (($99) + (($97*40)|0)|0);
  $101 = $0;
  $102 = $1;
  $103 = $row;
  $104 = $i;
  $105 = (($axptr) + ($104<<2)|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (__ZN17dxJointLimitMotor8addLimotEP7dxJointPNS0_5Info2EiPfi($100,$101,$102,$103,$106,1)|0);
  $108 = $row;
  $109 = (($108) + ($107))|0;
  $row = $109;
  $110 = $i;
  $111 = (($110) + 1)|0;
  $i = $111;
 }
 STACKTOP = sp;return;
}
function __ZL9fixedInitP12dxJointFixed($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 _dSetZero($2,4);
 STACKTOP = sp;return;
}
function __ZL13fixedGetInfo1P12dxJointFixedPN7dxJoint5Info1E($j,$info) {
 $j = $j|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $info;
 $2 = $1;
 HEAP32[$2>>2] = 6;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 6;
 STACKTOP = sp;return;
}
function __ZL13fixedGetInfo2P12dxJointFixedPN7dxJoint5Info2E($joint,$info) {
 $joint = $joint|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $e = 0, $i = 0, $j = 0, $j1 = 0, $k = 0.0, $ofs = 0, $qerr = 0, $s = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ofs = sp + 56|0;
 $qerr = sp + 24|0;
 $e = sp + 8|0;
 $0 = $joint;
 $1 = $info;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $s = $4;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAPF32[$7>>2] = 1.0;
 $8 = $s;
 $9 = (($8) + 1)|0;
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<2)|0);
 HEAPF32[$13>>2] = 1.0;
 $14 = $s;
 $15 = $14<<1;
 $16 = (($15) + 2)|0;
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($16<<2)|0);
 HEAPF32[$20>>2] = 1.0;
 $21 = $s;
 $22 = ($21*3)|0;
 $23 = $1;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAPF32[$26>>2] = 1.0;
 $27 = $s;
 $28 = $27<<2;
 $29 = (($28) + 1)|0;
 $30 = $1;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($29<<2)|0);
 HEAPF32[$33>>2] = 1.0;
 $34 = $s;
 $35 = ($34*5)|0;
 $36 = (($35) + 2)|0;
 $37 = $1;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($36<<2)|0);
 HEAPF32[$40>>2] = 1.0;
 $41 = $0;
 $42 = ((($41)) + 28|0);
 $43 = ((($42)) + 12|0);
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = $0;
  $48 = ((($47)) + 28|0);
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 180|0);
  $52 = $0;
  $53 = ((($52)) + 52|0);
  _dMULTIPLY0_331($ofs,$51,$53);
  $54 = ((($ofs)) + 8|0);
  $55 = +HEAPF32[$54>>2];
  $56 = -$55;
  $57 = $1;
  $58 = ((($57)) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + 4|0);
  HEAPF32[$60>>2] = $56;
  $61 = ((($ofs)) + 4|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $1;
  $64 = ((($63)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($65)) + 8|0);
  HEAPF32[$66>>2] = $62;
  $67 = ((($ofs)) + 8|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $s;
  $70 = (($69) + 0)|0;
  $71 = $1;
  $72 = ((($71)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($70<<2)|0);
  HEAPF32[$74>>2] = $68;
  $75 = +HEAPF32[$ofs>>2];
  $76 = -$75;
  $77 = $s;
  $78 = (($77) + 2)|0;
  $79 = $1;
  $80 = ((($79)) + 12|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + ($78<<2)|0);
  HEAPF32[$82>>2] = $76;
  $83 = ((($ofs)) + 4|0);
  $84 = +HEAPF32[$83>>2];
  $85 = -$84;
  $86 = $s;
  $87 = $86<<1;
  $88 = (($87) + 0)|0;
  $89 = $1;
  $90 = ((($89)) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + ($88<<2)|0);
  HEAPF32[$92>>2] = $85;
  $93 = +HEAPF32[$ofs>>2];
  $94 = $s;
  $95 = $94<<1;
  $96 = (($95) + 1)|0;
  $97 = $1;
  $98 = ((($97)) + 12|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + ($96<<2)|0);
  HEAPF32[$100>>2] = $93;
  $101 = $1;
  $102 = ((($101)) + 16|0);
  $103 = HEAP32[$102>>2]|0;
  HEAPF32[$103>>2] = -1.0;
  $104 = $s;
  $105 = (($104) + 1)|0;
  $106 = $1;
  $107 = ((($106)) + 16|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + ($105<<2)|0);
  HEAPF32[$109>>2] = -1.0;
  $110 = $s;
  $111 = $110<<1;
  $112 = (($111) + 2)|0;
  $113 = $1;
  $114 = ((($113)) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + ($112<<2)|0);
  HEAPF32[$116>>2] = -1.0;
  $117 = $s;
  $118 = ($117*3)|0;
  $119 = $1;
  $120 = ((($119)) + 20|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($121) + ($118<<2)|0);
  HEAPF32[$122>>2] = -1.0;
  $123 = $s;
  $124 = $123<<2;
  $125 = (($124) + 1)|0;
  $126 = $1;
  $127 = ((($126)) + 20|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + ($125<<2)|0);
  HEAPF32[$129>>2] = -1.0;
  $130 = $s;
  $131 = ($130*5)|0;
  $132 = (($131) + 2)|0;
  $133 = $1;
  $134 = ((($133)) + 20|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + ($132<<2)|0);
  HEAPF32[$136>>2] = -1.0;
 }
 $137 = $1;
 $138 = +HEAPF32[$137>>2];
 $139 = $1;
 $140 = ((($139)) + 4|0);
 $141 = +HEAPF32[$140>>2];
 $142 = $138 * $141;
 $k = $142;
 $143 = $0;
 $144 = ((($143)) + 28|0);
 $145 = ((($144)) + 12|0);
 $146 = ((($145)) + 4|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($147|0)!=(0|0);
 L4: do {
  if ($148) {
   $j = 0;
   while(1) {
    $149 = $j;
    $150 = ($149|0)<(3);
    if (!($150)) {
     break L4;
    }
    $151 = $k;
    $152 = $j;
    $153 = $0;
    $154 = ((($153)) + 28|0);
    $155 = ((($154)) + 12|0);
    $156 = ((($155)) + 4|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($157)) + 148|0);
    $159 = (($158) + ($152<<2)|0);
    $160 = +HEAPF32[$159>>2];
    $161 = $j;
    $162 = $0;
    $163 = ((($162)) + 28|0);
    $164 = ((($163)) + 4|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ((($165)) + 148|0);
    $167 = (($166) + ($161<<2)|0);
    $168 = +HEAPF32[$167>>2];
    $169 = $160 - $168;
    $170 = $j;
    $171 = (($ofs) + ($170<<2)|0);
    $172 = +HEAPF32[$171>>2];
    $173 = $169 + $172;
    $174 = $151 * $173;
    $175 = $j;
    $176 = $1;
    $177 = ((($176)) + 28|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($178) + ($175<<2)|0);
    HEAPF32[$179>>2] = $174;
    $180 = $j;
    $181 = (($180) + 1)|0;
    $j = $181;
   }
  } else {
   $j1 = 0;
   while(1) {
    $182 = $j1;
    $183 = ($182|0)<(3);
    if (!($183)) {
     break L4;
    }
    $184 = $k;
    $185 = $j1;
    $186 = $0;
    $187 = ((($186)) + 52|0);
    $188 = (($187) + ($185<<2)|0);
    $189 = +HEAPF32[$188>>2];
    $190 = $j1;
    $191 = $0;
    $192 = ((($191)) + 28|0);
    $193 = ((($192)) + 4|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = ((($194)) + 148|0);
    $196 = (($195) + ($190<<2)|0);
    $197 = +HEAPF32[$196>>2];
    $198 = $189 - $197;
    $199 = $184 * $198;
    $200 = $j1;
    $201 = $1;
    $202 = ((($201)) + 28|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = (($203) + ($200<<2)|0);
    HEAPF32[$204>>2] = $199;
    $205 = $j1;
    $206 = (($205) + 1)|0;
    $j1 = $206;
   }
  }
 } while(0);
 $207 = $0;
 $208 = ((($207)) + 28|0);
 $209 = ((($208)) + 12|0);
 $210 = ((($209)) + 4|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = ($211|0)!=(0|0);
 L14: do {
  if ($212) {
   $213 = $0;
   $214 = ((($213)) + 28|0);
   $215 = ((($214)) + 4|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ((($216)) + 164|0);
   $218 = $0;
   $219 = ((($218)) + 28|0);
   $220 = ((($219)) + 12|0);
   $221 = ((($220)) + 4|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = ((($222)) + 164|0);
   _dQMultiply1($qerr,$217,$223);
  } else {
   $224 = $0;
   $225 = ((($224)) + 28|0);
   $226 = ((($225)) + 4|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = ((($227)) + 164|0);
   $229 = +HEAPF32[$228>>2];
   HEAPF32[$qerr>>2] = $229;
   $i = 1;
   while(1) {
    $230 = $i;
    $231 = ($230|0)<(4);
    if (!($231)) {
     break L14;
    }
    $232 = $i;
    $233 = $0;
    $234 = ((($233)) + 28|0);
    $235 = ((($234)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = ((($236)) + 164|0);
    $238 = (($237) + ($232<<2)|0);
    $239 = +HEAPF32[$238>>2];
    $240 = -$239;
    $241 = $i;
    $242 = (($qerr) + ($241<<2)|0);
    HEAPF32[$242>>2] = $240;
    $243 = $i;
    $244 = (($243) + 1)|0;
    $i = $244;
   }
  }
 } while(0);
 $245 = +HEAPF32[$qerr>>2];
 $246 = $245 < 0.0;
 if (!($246)) {
  $259 = $0;
  $260 = ((($259)) + 28|0);
  $261 = ((($260)) + 4|0);
  $262 = HEAP32[$261>>2]|0;
  $263 = ((($262)) + 180|0);
  $264 = ((($qerr)) + 4|0);
  _dMULTIPLY0_331($e,$263,$264);
  $265 = $k;
  $266 = 2.0 * $265;
  $267 = +HEAPF32[$e>>2];
  $268 = $266 * $267;
  $269 = $1;
  $270 = ((($269)) + 28|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = ((($271)) + 12|0);
  HEAPF32[$272>>2] = $268;
  $273 = $k;
  $274 = 2.0 * $273;
  $275 = ((($e)) + 4|0);
  $276 = +HEAPF32[$275>>2];
  $277 = $274 * $276;
  $278 = $1;
  $279 = ((($278)) + 28|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = ((($280)) + 16|0);
  HEAPF32[$281>>2] = $277;
  $282 = $k;
  $283 = 2.0 * $282;
  $284 = ((($e)) + 8|0);
  $285 = +HEAPF32[$284>>2];
  $286 = $283 * $285;
  $287 = $1;
  $288 = ((($287)) + 28|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ((($289)) + 20|0);
  HEAPF32[$290>>2] = $286;
  STACKTOP = sp;return;
 }
 $247 = ((($qerr)) + 4|0);
 $248 = +HEAPF32[$247>>2];
 $249 = -$248;
 $250 = ((($qerr)) + 4|0);
 HEAPF32[$250>>2] = $249;
 $251 = ((($qerr)) + 8|0);
 $252 = +HEAPF32[$251>>2];
 $253 = -$252;
 $254 = ((($qerr)) + 8|0);
 HEAPF32[$254>>2] = $253;
 $255 = ((($qerr)) + 12|0);
 $256 = +HEAPF32[$255>>2];
 $257 = -$256;
 $258 = ((($qerr)) + 12|0);
 HEAPF32[$258>>2] = $257;
 $259 = $0;
 $260 = ((($259)) + 28|0);
 $261 = ((($260)) + 4|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = ((($262)) + 180|0);
 $264 = ((($qerr)) + 4|0);
 _dMULTIPLY0_331($e,$263,$264);
 $265 = $k;
 $266 = 2.0 * $265;
 $267 = +HEAPF32[$e>>2];
 $268 = $266 * $267;
 $269 = $1;
 $270 = ((($269)) + 28|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = ((($271)) + 12|0);
 HEAPF32[$272>>2] = $268;
 $273 = $k;
 $274 = 2.0 * $273;
 $275 = ((($e)) + 4|0);
 $276 = +HEAPF32[$275>>2];
 $277 = $274 * $276;
 $278 = $1;
 $279 = ((($278)) + 28|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = ((($280)) + 16|0);
 HEAPF32[$281>>2] = $277;
 $282 = $k;
 $283 = 2.0 * $282;
 $284 = ((($e)) + 8|0);
 $285 = +HEAPF32[$284>>2];
 $286 = $283 * $285;
 $287 = $1;
 $288 = ((($287)) + 28|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = ((($289)) + 20|0);
 HEAPF32[$290>>2] = $286;
 STACKTOP = sp;return;
}
function __ZL12nullGetInfo1P11dxJointNullPN7dxJoint5Info1E($j,$info) {
 $j = $j|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $info;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL12nullGetInfo2P11dxJointNullPN7dxJoint5Info2E($joint,$info) {
 $joint = $joint|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $joint;
 $1 = $info;
 _dDebug(0,5736,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZL23amotorComputeGlobalAxesP13dxJointAMotorPA4_f($joint,$ax) {
 $joint = $joint|0;
 $ax = $ax|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0;
 var $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $joint;
 $1 = $ax;
 $2 = $0;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  $6 = $1;
  $7 = $0;
  $8 = ((($7)) + 28|0);
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 180|0);
  $12 = $0;
  $13 = ((($12)) + 72|0);
  _dMULTIPLY0_331($6,$11,$13);
  $14 = $1;
  $15 = ((($14)) + 32|0);
  $16 = $0;
  $17 = ((($16)) + 28|0);
  $18 = ((($17)) + 12|0);
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 180|0);
  $22 = $0;
  $23 = ((($22)) + 72|0);
  $24 = ((($23)) + 32|0);
  _dMULTIPLY0_331($15,$21,$24);
  $25 = $1;
  $26 = ((($25)) + 32|0);
  $27 = ((($26)) + 4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $28 * $31;
  $33 = $1;
  $34 = ((($33)) + 32|0);
  $35 = ((($34)) + 8|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $1;
  $38 = ((($37)) + 4|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $36 * $39;
  $41 = $32 - $40;
  $42 = $1;
  $43 = ((($42)) + 16|0);
  HEAPF32[$43>>2] = $41;
  $44 = $1;
  $45 = ((($44)) + 32|0);
  $46 = ((($45)) + 8|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $1;
  $49 = +HEAPF32[$48>>2];
  $50 = $47 * $49;
  $51 = $1;
  $52 = ((($51)) + 32|0);
  $53 = +HEAPF32[$52>>2];
  $54 = $1;
  $55 = ((($54)) + 8|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $53 * $56;
  $58 = $50 - $57;
  $59 = $1;
  $60 = ((($59)) + 16|0);
  $61 = ((($60)) + 4|0);
  HEAPF32[$61>>2] = $58;
  $62 = $1;
  $63 = ((($62)) + 32|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $1;
  $66 = ((($65)) + 4|0);
  $67 = +HEAPF32[$66>>2];
  $68 = $64 * $67;
  $69 = $1;
  $70 = ((($69)) + 32|0);
  $71 = ((($70)) + 4|0);
  $72 = +HEAPF32[$71>>2];
  $73 = $1;
  $74 = +HEAPF32[$73>>2];
  $75 = $72 * $74;
  $76 = $68 - $75;
  $77 = $1;
  $78 = ((($77)) + 16|0);
  $79 = ((($78)) + 8|0);
  HEAPF32[$79>>2] = $76;
  $80 = $1;
  $81 = ((($80)) + 16|0);
  _dNormalize3($81);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $82 = $i;
  $83 = $0;
  $84 = ((($83)) + 52|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($82|0)<($85|0);
  if (!($86)) {
   break;
  }
  $87 = $i;
  $88 = $0;
  $89 = ((($88)) + 60|0);
  $90 = (($89) + ($87<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)==(1);
  if ($92) {
   $93 = $i;
   $94 = $1;
   $95 = (($94) + ($93<<4)|0);
   $96 = $0;
   $97 = ((($96)) + 28|0);
   $98 = ((($97)) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($99)) + 180|0);
   $101 = $i;
   $102 = $0;
   $103 = ((($102)) + 72|0);
   $104 = (($103) + ($101<<4)|0);
   _dMULTIPLY0_331($95,$100,$104);
  }
  $105 = $i;
  $106 = $0;
  $107 = ((($106)) + 60|0);
  $108 = (($107) + ($105<<2)|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)==(2);
  $111 = $i;
  if ($110) {
   $112 = $1;
   $113 = (($112) + ($111<<4)|0);
   $114 = $0;
   $115 = ((($114)) + 28|0);
   $116 = ((($115)) + 12|0);
   $117 = ((($116)) + 4|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ((($118)) + 180|0);
   $120 = $i;
   $121 = $0;
   $122 = ((($121)) + 72|0);
   $123 = (($122) + ($120<<4)|0);
   _dMULTIPLY0_331($113,$119,$123);
  } else {
   $124 = $0;
   $125 = ((($124)) + 72|0);
   $126 = (($125) + ($111<<4)|0);
   $127 = +HEAPF32[$126>>2];
   $128 = $i;
   $129 = $1;
   $130 = (($129) + ($128<<4)|0);
   HEAPF32[$130>>2] = $127;
   $131 = $i;
   $132 = $0;
   $133 = ((($132)) + 72|0);
   $134 = (($133) + ($131<<4)|0);
   $135 = ((($134)) + 4|0);
   $136 = +HEAPF32[$135>>2];
   $137 = $i;
   $138 = $1;
   $139 = (($138) + ($137<<4)|0);
   $140 = ((($139)) + 4|0);
   HEAPF32[$140>>2] = $136;
   $141 = $i;
   $142 = $0;
   $143 = ((($142)) + 72|0);
   $144 = (($143) + ($141<<4)|0);
   $145 = ((($144)) + 8|0);
   $146 = +HEAPF32[$145>>2];
   $147 = $i;
   $148 = $1;
   $149 = (($148) + ($147<<4)|0);
   $150 = ((($149)) + 8|0);
   HEAPF32[$150>>2] = $146;
  }
  $151 = $i;
  $152 = (($151) + 1)|0;
  $i = $152;
 }
 STACKTOP = sp;return;
}
function __ZL24amotorComputeEulerAnglesP13dxJointAMotorPA4_f($joint,$ax) {
 $joint = $joint|0;
 $ax = $ax|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0;
 var $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $q = 0, $ref1 = 0;
 var $ref2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref1 = sp + 32|0;
 $ref2 = sp + 16|0;
 $q = sp;
 $0 = $joint;
 $1 = $ax;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 180|0);
 $7 = $0;
 $8 = ((($7)) + 252|0);
 _dMULTIPLY0_331($ref1,$6,$8);
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = ((($10)) + 12|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 180|0);
 $15 = $0;
 $16 = ((($15)) + 268|0);
 _dMULTIPLY0_331($ref2,$14,$16);
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = ((($ref1)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $19 * $21;
 $23 = $1;
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF32[$24>>2];
 $26 = ((($ref1)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $25 * $27;
 $29 = $22 - $28;
 HEAPF32[$q>>2] = $29;
 $30 = $1;
 $31 = ((($30)) + 8|0);
 $32 = +HEAPF32[$31>>2];
 $33 = +HEAPF32[$ref1>>2];
 $34 = $32 * $33;
 $35 = $1;
 $36 = +HEAPF32[$35>>2];
 $37 = ((($ref1)) + 8|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $36 * $38;
 $40 = $34 - $39;
 $41 = ((($q)) + 4|0);
 HEAPF32[$41>>2] = $40;
 $42 = $1;
 $43 = +HEAPF32[$42>>2];
 $44 = ((($ref1)) + 4|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $43 * $45;
 $47 = $1;
 $48 = ((($47)) + 4|0);
 $49 = +HEAPF32[$48>>2];
 $50 = +HEAPF32[$ref1>>2];
 $51 = $49 * $50;
 $52 = $46 - $51;
 $53 = ((($q)) + 8|0);
 HEAPF32[$53>>2] = $52;
 $54 = $1;
 $55 = ((($54)) + 32|0);
 $56 = (+_dDOT($55,$q));
 $57 = $56;
 $58 = $1;
 $59 = ((($58)) + 32|0);
 $60 = (+_dDOT($59,$ref1));
 $61 = $60;
 $62 = (+Math_atan2((+$57),(+$61)));
 $63 = $62;
 $64 = -$63;
 $65 = $0;
 $66 = ((($65)) + 240|0);
 HEAPF32[$66>>2] = $64;
 $67 = $1;
 $68 = ((($67)) + 4|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $1;
 $71 = ((($70)) + 16|0);
 $72 = ((($71)) + 8|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $69 * $73;
 $75 = $1;
 $76 = ((($75)) + 8|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $1;
 $79 = ((($78)) + 16|0);
 $80 = ((($79)) + 4|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $77 * $81;
 $83 = $74 - $82;
 HEAPF32[$q>>2] = $83;
 $84 = $1;
 $85 = ((($84)) + 8|0);
 $86 = +HEAPF32[$85>>2];
 $87 = $1;
 $88 = ((($87)) + 16|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $86 * $89;
 $91 = $1;
 $92 = +HEAPF32[$91>>2];
 $93 = $1;
 $94 = ((($93)) + 16|0);
 $95 = ((($94)) + 8|0);
 $96 = +HEAPF32[$95>>2];
 $97 = $92 * $96;
 $98 = $90 - $97;
 $99 = ((($q)) + 4|0);
 HEAPF32[$99>>2] = $98;
 $100 = $1;
 $101 = +HEAPF32[$100>>2];
 $102 = $1;
 $103 = ((($102)) + 16|0);
 $104 = ((($103)) + 4|0);
 $105 = +HEAPF32[$104>>2];
 $106 = $101 * $105;
 $107 = $1;
 $108 = ((($107)) + 4|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $1;
 $111 = ((($110)) + 16|0);
 $112 = +HEAPF32[$111>>2];
 $113 = $109 * $112;
 $114 = $106 - $113;
 $115 = ((($q)) + 8|0);
 HEAPF32[$115>>2] = $114;
 $116 = $1;
 $117 = ((($116)) + 32|0);
 $118 = $1;
 $119 = (+_dDOT($117,$118));
 $120 = $119;
 $121 = $1;
 $122 = ((($121)) + 32|0);
 $123 = (+_dDOT($122,$q));
 $124 = $123;
 $125 = (+Math_atan2((+$120),(+$124)));
 $126 = $125;
 $127 = -$126;
 $128 = $0;
 $129 = ((($128)) + 240|0);
 $130 = ((($129)) + 4|0);
 HEAPF32[$130>>2] = $127;
 $131 = $1;
 $132 = ((($131)) + 16|0);
 $133 = ((($132)) + 4|0);
 $134 = +HEAPF32[$133>>2];
 $135 = $1;
 $136 = ((($135)) + 32|0);
 $137 = ((($136)) + 8|0);
 $138 = +HEAPF32[$137>>2];
 $139 = $134 * $138;
 $140 = $1;
 $141 = ((($140)) + 16|0);
 $142 = ((($141)) + 8|0);
 $143 = +HEAPF32[$142>>2];
 $144 = $1;
 $145 = ((($144)) + 32|0);
 $146 = ((($145)) + 4|0);
 $147 = +HEAPF32[$146>>2];
 $148 = $143 * $147;
 $149 = $139 - $148;
 HEAPF32[$q>>2] = $149;
 $150 = $1;
 $151 = ((($150)) + 16|0);
 $152 = ((($151)) + 8|0);
 $153 = +HEAPF32[$152>>2];
 $154 = $1;
 $155 = ((($154)) + 32|0);
 $156 = +HEAPF32[$155>>2];
 $157 = $153 * $156;
 $158 = $1;
 $159 = ((($158)) + 16|0);
 $160 = +HEAPF32[$159>>2];
 $161 = $1;
 $162 = ((($161)) + 32|0);
 $163 = ((($162)) + 8|0);
 $164 = +HEAPF32[$163>>2];
 $165 = $160 * $164;
 $166 = $157 - $165;
 $167 = ((($q)) + 4|0);
 HEAPF32[$167>>2] = $166;
 $168 = $1;
 $169 = ((($168)) + 16|0);
 $170 = +HEAPF32[$169>>2];
 $171 = $1;
 $172 = ((($171)) + 32|0);
 $173 = ((($172)) + 4|0);
 $174 = +HEAPF32[$173>>2];
 $175 = $170 * $174;
 $176 = $1;
 $177 = ((($176)) + 16|0);
 $178 = ((($177)) + 4|0);
 $179 = +HEAPF32[$178>>2];
 $180 = $1;
 $181 = ((($180)) + 32|0);
 $182 = +HEAPF32[$181>>2];
 $183 = $179 * $182;
 $184 = $175 - $183;
 $185 = ((($q)) + 8|0);
 HEAPF32[$185>>2] = $184;
 $186 = $1;
 $187 = ((($186)) + 16|0);
 $188 = (+_dDOT($ref2,$187));
 $189 = $188;
 $190 = (+_dDOT($ref2,$q));
 $191 = $190;
 $192 = (+Math_atan2((+$189),(+$191)));
 $193 = $192;
 $194 = -$193;
 $195 = $0;
 $196 = ((($195)) + 240|0);
 $197 = ((($196)) + 8|0);
 HEAPF32[$197>>2] = $194;
 STACKTOP = sp;return;
}
function __ZL8setBall2P7dxJointPNS_5Info2EPfS3_S3_f($joint,$info,$anchor1,$anchor2,$axis,$erp1) {
 $joint = $joint|0;
 $info = $info|0;
 $anchor1 = $anchor1|0;
 $anchor2 = $anchor2|0;
 $axis = $axis|0;
 $erp1 = +$erp1;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0.0;
 var $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0, $458 = 0.0;
 var $459 = 0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0.0;
 var $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0.0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0.0, $50 = 0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0.0, $506 = 0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $a1 = 0, $a2 = 0, $i = 0, $k = 0.0, $k1 = 0.0;
 var $q1 = 0, $q2 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a1 = sp + 64|0;
 $a2 = sp + 48|0;
 $q1 = sp + 24|0;
 $q2 = sp + 8|0;
 $0 = $joint;
 $1 = $info;
 $2 = $anchor1;
 $3 = $anchor2;
 $4 = $axis;
 $5 = $erp1;
 $6 = $1;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $s = $8;
 $9 = $4;
 _dPlaneSpace($9,$q1,$q2);
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(3);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = $4;
  $14 = (($13) + ($12<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $i;
  $17 = $1;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16<<2)|0);
  HEAPF32[$20>>2] = $15;
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = ($23|0)<(3);
  if (!($24)) {
   break;
  }
  $25 = $i;
  $26 = (($q1) + ($25<<2)|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $s;
  $29 = $i;
  $30 = (($28) + ($29))|0;
  $31 = $1;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<2)|0);
  HEAPF32[$34>>2] = $27;
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 $i = 0;
 while(1) {
  $37 = $i;
  $38 = ($37|0)<(3);
  if (!($38)) {
   break;
  }
  $39 = $i;
  $40 = (($q2) + ($39<<2)|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $s;
  $43 = $42<<1;
  $44 = $i;
  $45 = (($43) + ($44))|0;
  $46 = $1;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($45<<2)|0);
  HEAPF32[$49>>2] = $41;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $52 = $0;
 $53 = ((($52)) + 28|0);
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 180|0);
 $57 = $2;
 _dMULTIPLY0_331($a1,$56,$57);
 $58 = ((($a1)) + 4|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $4;
 $61 = ((($60)) + 8|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $59 * $62;
 $64 = ((($a1)) + 8|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $4;
 $67 = ((($66)) + 4|0);
 $68 = +HEAPF32[$67>>2];
 $69 = $65 * $68;
 $70 = $63 - $69;
 $71 = $1;
 $72 = ((($71)) + 12|0);
 $73 = HEAP32[$72>>2]|0;
 HEAPF32[$73>>2] = $70;
 $74 = ((($a1)) + 8|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $4;
 $77 = +HEAPF32[$76>>2];
 $78 = $75 * $77;
 $79 = +HEAPF32[$a1>>2];
 $80 = $4;
 $81 = ((($80)) + 8|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $79 * $82;
 $84 = $78 - $83;
 $85 = $1;
 $86 = ((($85)) + 12|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($87)) + 4|0);
 HEAPF32[$88>>2] = $84;
 $89 = +HEAPF32[$a1>>2];
 $90 = $4;
 $91 = ((($90)) + 4|0);
 $92 = +HEAPF32[$91>>2];
 $93 = $89 * $92;
 $94 = ((($a1)) + 4|0);
 $95 = +HEAPF32[$94>>2];
 $96 = $4;
 $97 = +HEAPF32[$96>>2];
 $98 = $95 * $97;
 $99 = $93 - $98;
 $100 = $1;
 $101 = ((($100)) + 12|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($102)) + 8|0);
 HEAPF32[$103>>2] = $99;
 $104 = ((($a1)) + 4|0);
 $105 = +HEAPF32[$104>>2];
 $106 = ((($q1)) + 8|0);
 $107 = +HEAPF32[$106>>2];
 $108 = $105 * $107;
 $109 = ((($a1)) + 8|0);
 $110 = +HEAPF32[$109>>2];
 $111 = ((($q1)) + 4|0);
 $112 = +HEAPF32[$111>>2];
 $113 = $110 * $112;
 $114 = $108 - $113;
 $115 = $1;
 $116 = ((($115)) + 12|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $s;
 $119 = (($117) + ($118<<2)|0);
 HEAPF32[$119>>2] = $114;
 $120 = ((($a1)) + 8|0);
 $121 = +HEAPF32[$120>>2];
 $122 = +HEAPF32[$q1>>2];
 $123 = $121 * $122;
 $124 = +HEAPF32[$a1>>2];
 $125 = ((($q1)) + 8|0);
 $126 = +HEAPF32[$125>>2];
 $127 = $124 * $126;
 $128 = $123 - $127;
 $129 = $1;
 $130 = ((($129)) + 12|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $s;
 $133 = (($131) + ($132<<2)|0);
 $134 = ((($133)) + 4|0);
 HEAPF32[$134>>2] = $128;
 $135 = +HEAPF32[$a1>>2];
 $136 = ((($q1)) + 4|0);
 $137 = +HEAPF32[$136>>2];
 $138 = $135 * $137;
 $139 = ((($a1)) + 4|0);
 $140 = +HEAPF32[$139>>2];
 $141 = +HEAPF32[$q1>>2];
 $142 = $140 * $141;
 $143 = $138 - $142;
 $144 = $1;
 $145 = ((($144)) + 12|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = $s;
 $148 = (($146) + ($147<<2)|0);
 $149 = ((($148)) + 8|0);
 HEAPF32[$149>>2] = $143;
 $150 = ((($a1)) + 4|0);
 $151 = +HEAPF32[$150>>2];
 $152 = ((($q2)) + 8|0);
 $153 = +HEAPF32[$152>>2];
 $154 = $151 * $153;
 $155 = ((($a1)) + 8|0);
 $156 = +HEAPF32[$155>>2];
 $157 = ((($q2)) + 4|0);
 $158 = +HEAPF32[$157>>2];
 $159 = $156 * $158;
 $160 = $154 - $159;
 $161 = $1;
 $162 = ((($161)) + 12|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = $s;
 $165 = $164<<1;
 $166 = (($163) + ($165<<2)|0);
 HEAPF32[$166>>2] = $160;
 $167 = ((($a1)) + 8|0);
 $168 = +HEAPF32[$167>>2];
 $169 = +HEAPF32[$q2>>2];
 $170 = $168 * $169;
 $171 = +HEAPF32[$a1>>2];
 $172 = ((($q2)) + 8|0);
 $173 = +HEAPF32[$172>>2];
 $174 = $171 * $173;
 $175 = $170 - $174;
 $176 = $1;
 $177 = ((($176)) + 12|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = $s;
 $180 = $179<<1;
 $181 = (($178) + ($180<<2)|0);
 $182 = ((($181)) + 4|0);
 HEAPF32[$182>>2] = $175;
 $183 = +HEAPF32[$a1>>2];
 $184 = ((($q2)) + 4|0);
 $185 = +HEAPF32[$184>>2];
 $186 = $183 * $185;
 $187 = ((($a1)) + 4|0);
 $188 = +HEAPF32[$187>>2];
 $189 = +HEAPF32[$q2>>2];
 $190 = $188 * $189;
 $191 = $186 - $190;
 $192 = $1;
 $193 = ((($192)) + 12|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = $s;
 $196 = $195<<1;
 $197 = (($194) + ($196<<2)|0);
 $198 = ((($197)) + 8|0);
 HEAPF32[$198>>2] = $191;
 $199 = $0;
 $200 = ((($199)) + 28|0);
 $201 = ((($200)) + 12|0);
 $202 = ((($201)) + 4|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = ($203|0)!=(0|0);
 if ($204) {
  $i = 0;
  while(1) {
   $205 = $i;
   $206 = ($205|0)<(3);
   if (!($206)) {
    break;
   }
   $207 = $i;
   $208 = $4;
   $209 = (($208) + ($207<<2)|0);
   $210 = +HEAPF32[$209>>2];
   $211 = -$210;
   $212 = $i;
   $213 = $1;
   $214 = ((($213)) + 16|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = (($215) + ($212<<2)|0);
   HEAPF32[$216>>2] = $211;
   $217 = $i;
   $218 = (($217) + 1)|0;
   $i = $218;
  }
  $i = 0;
  while(1) {
   $219 = $i;
   $220 = ($219|0)<(3);
   if (!($220)) {
    break;
   }
   $221 = $i;
   $222 = (($q1) + ($221<<2)|0);
   $223 = +HEAPF32[$222>>2];
   $224 = -$223;
   $225 = $s;
   $226 = $i;
   $227 = (($225) + ($226))|0;
   $228 = $1;
   $229 = ((($228)) + 16|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($230) + ($227<<2)|0);
   HEAPF32[$231>>2] = $224;
   $232 = $i;
   $233 = (($232) + 1)|0;
   $i = $233;
  }
  $i = 0;
  while(1) {
   $234 = $i;
   $235 = ($234|0)<(3);
   if (!($235)) {
    break;
   }
   $236 = $i;
   $237 = (($q2) + ($236<<2)|0);
   $238 = +HEAPF32[$237>>2];
   $239 = -$238;
   $240 = $s;
   $241 = $240<<1;
   $242 = $i;
   $243 = (($241) + ($242))|0;
   $244 = $1;
   $245 = ((($244)) + 16|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = (($246) + ($243<<2)|0);
   HEAPF32[$247>>2] = $239;
   $248 = $i;
   $249 = (($248) + 1)|0;
   $i = $249;
  }
  $250 = $0;
  $251 = ((($250)) + 28|0);
  $252 = ((($251)) + 12|0);
  $253 = ((($252)) + 4|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = ((($254)) + 180|0);
  $256 = $3;
  _dMULTIPLY0_331($a2,$255,$256);
  $257 = ((($a2)) + 4|0);
  $258 = +HEAPF32[$257>>2];
  $259 = $4;
  $260 = ((($259)) + 8|0);
  $261 = +HEAPF32[$260>>2];
  $262 = $258 * $261;
  $263 = ((($a2)) + 8|0);
  $264 = +HEAPF32[$263>>2];
  $265 = $4;
  $266 = ((($265)) + 4|0);
  $267 = +HEAPF32[$266>>2];
  $268 = $264 * $267;
  $269 = $262 - $268;
  $270 = -$269;
  $271 = $1;
  $272 = ((($271)) + 20|0);
  $273 = HEAP32[$272>>2]|0;
  HEAPF32[$273>>2] = $270;
  $274 = ((($a2)) + 8|0);
  $275 = +HEAPF32[$274>>2];
  $276 = $4;
  $277 = +HEAPF32[$276>>2];
  $278 = $275 * $277;
  $279 = +HEAPF32[$a2>>2];
  $280 = $4;
  $281 = ((($280)) + 8|0);
  $282 = +HEAPF32[$281>>2];
  $283 = $279 * $282;
  $284 = $278 - $283;
  $285 = -$284;
  $286 = $1;
  $287 = ((($286)) + 20|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = ((($288)) + 4|0);
  HEAPF32[$289>>2] = $285;
  $290 = +HEAPF32[$a2>>2];
  $291 = $4;
  $292 = ((($291)) + 4|0);
  $293 = +HEAPF32[$292>>2];
  $294 = $290 * $293;
  $295 = ((($a2)) + 4|0);
  $296 = +HEAPF32[$295>>2];
  $297 = $4;
  $298 = +HEAPF32[$297>>2];
  $299 = $296 * $298;
  $300 = $294 - $299;
  $301 = -$300;
  $302 = $1;
  $303 = ((($302)) + 20|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = ((($304)) + 8|0);
  HEAPF32[$305>>2] = $301;
  $306 = ((($a2)) + 4|0);
  $307 = +HEAPF32[$306>>2];
  $308 = ((($q1)) + 8|0);
  $309 = +HEAPF32[$308>>2];
  $310 = $307 * $309;
  $311 = ((($a2)) + 8|0);
  $312 = +HEAPF32[$311>>2];
  $313 = ((($q1)) + 4|0);
  $314 = +HEAPF32[$313>>2];
  $315 = $312 * $314;
  $316 = $310 - $315;
  $317 = -$316;
  $318 = $1;
  $319 = ((($318)) + 20|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = $s;
  $322 = (($320) + ($321<<2)|0);
  HEAPF32[$322>>2] = $317;
  $323 = ((($a2)) + 8|0);
  $324 = +HEAPF32[$323>>2];
  $325 = +HEAPF32[$q1>>2];
  $326 = $324 * $325;
  $327 = +HEAPF32[$a2>>2];
  $328 = ((($q1)) + 8|0);
  $329 = +HEAPF32[$328>>2];
  $330 = $327 * $329;
  $331 = $326 - $330;
  $332 = -$331;
  $333 = $1;
  $334 = ((($333)) + 20|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = $s;
  $337 = (($335) + ($336<<2)|0);
  $338 = ((($337)) + 4|0);
  HEAPF32[$338>>2] = $332;
  $339 = +HEAPF32[$a2>>2];
  $340 = ((($q1)) + 4|0);
  $341 = +HEAPF32[$340>>2];
  $342 = $339 * $341;
  $343 = ((($a2)) + 4|0);
  $344 = +HEAPF32[$343>>2];
  $345 = +HEAPF32[$q1>>2];
  $346 = $344 * $345;
  $347 = $342 - $346;
  $348 = -$347;
  $349 = $1;
  $350 = ((($349)) + 20|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = $s;
  $353 = (($351) + ($352<<2)|0);
  $354 = ((($353)) + 8|0);
  HEAPF32[$354>>2] = $348;
  $355 = ((($a2)) + 4|0);
  $356 = +HEAPF32[$355>>2];
  $357 = ((($q2)) + 8|0);
  $358 = +HEAPF32[$357>>2];
  $359 = $356 * $358;
  $360 = ((($a2)) + 8|0);
  $361 = +HEAPF32[$360>>2];
  $362 = ((($q2)) + 4|0);
  $363 = +HEAPF32[$362>>2];
  $364 = $361 * $363;
  $365 = $359 - $364;
  $366 = -$365;
  $367 = $1;
  $368 = ((($367)) + 20|0);
  $369 = HEAP32[$368>>2]|0;
  $370 = $s;
  $371 = $370<<1;
  $372 = (($369) + ($371<<2)|0);
  HEAPF32[$372>>2] = $366;
  $373 = ((($a2)) + 8|0);
  $374 = +HEAPF32[$373>>2];
  $375 = +HEAPF32[$q2>>2];
  $376 = $374 * $375;
  $377 = +HEAPF32[$a2>>2];
  $378 = ((($q2)) + 8|0);
  $379 = +HEAPF32[$378>>2];
  $380 = $377 * $379;
  $381 = $376 - $380;
  $382 = -$381;
  $383 = $1;
  $384 = ((($383)) + 20|0);
  $385 = HEAP32[$384>>2]|0;
  $386 = $s;
  $387 = $386<<1;
  $388 = (($385) + ($387<<2)|0);
  $389 = ((($388)) + 4|0);
  HEAPF32[$389>>2] = $382;
  $390 = +HEAPF32[$a2>>2];
  $391 = ((($q2)) + 4|0);
  $392 = +HEAPF32[$391>>2];
  $393 = $390 * $392;
  $394 = ((($a2)) + 4|0);
  $395 = +HEAPF32[$394>>2];
  $396 = +HEAPF32[$q2>>2];
  $397 = $395 * $396;
  $398 = $393 - $397;
  $399 = -$398;
  $400 = $1;
  $401 = ((($400)) + 20|0);
  $402 = HEAP32[$401>>2]|0;
  $403 = $s;
  $404 = $403<<1;
  $405 = (($402) + ($404<<2)|0);
  $406 = ((($405)) + 8|0);
  HEAPF32[$406>>2] = $399;
 }
 $407 = $1;
 $408 = +HEAPF32[$407>>2];
 $409 = $5;
 $410 = $408 * $409;
 $k1 = $410;
 $411 = $1;
 $412 = +HEAPF32[$411>>2];
 $413 = $1;
 $414 = ((($413)) + 4|0);
 $415 = +HEAPF32[$414>>2];
 $416 = $412 * $415;
 $k = $416;
 $i = 0;
 while(1) {
  $417 = $i;
  $418 = ($417|0)<(3);
  if (!($418)) {
   break;
  }
  $419 = $i;
  $420 = $0;
  $421 = ((($420)) + 28|0);
  $422 = ((($421)) + 4|0);
  $423 = HEAP32[$422>>2]|0;
  $424 = ((($423)) + 148|0);
  $425 = (($424) + ($419<<2)|0);
  $426 = +HEAPF32[$425>>2];
  $427 = $i;
  $428 = (($a1) + ($427<<2)|0);
  $429 = +HEAPF32[$428>>2];
  $430 = $429 + $426;
  HEAPF32[$428>>2] = $430;
  $431 = $i;
  $432 = (($431) + 1)|0;
  $i = $432;
 }
 $433 = $0;
 $434 = ((($433)) + 28|0);
 $435 = ((($434)) + 12|0);
 $436 = ((($435)) + 4|0);
 $437 = HEAP32[$436>>2]|0;
 $438 = ($437|0)!=(0|0);
 if (!($438)) {
  $484 = $k1;
  $485 = $4;
  $486 = $3;
  $487 = (+_dDOT($485,$486));
  $488 = $4;
  $489 = (+_dDOT($488,$a1));
  $490 = $487 - $489;
  $491 = $484 * $490;
  $492 = $1;
  $493 = ((($492)) + 28|0);
  $494 = HEAP32[$493>>2]|0;
  HEAPF32[$494>>2] = $491;
  $495 = $k;
  $496 = $3;
  $497 = (+_dDOT($q1,$496));
  $498 = (+_dDOT($q1,$a1));
  $499 = $497 - $498;
  $500 = $495 * $499;
  $501 = $1;
  $502 = ((($501)) + 28|0);
  $503 = HEAP32[$502>>2]|0;
  $504 = ((($503)) + 4|0);
  HEAPF32[$504>>2] = $500;
  $505 = $k;
  $506 = $3;
  $507 = (+_dDOT($q2,$506));
  $508 = (+_dDOT($q2,$a1));
  $509 = $507 - $508;
  $510 = $505 * $509;
  $511 = $1;
  $512 = ((($511)) + 28|0);
  $513 = HEAP32[$512>>2]|0;
  $514 = ((($513)) + 8|0);
  HEAPF32[$514>>2] = $510;
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $439 = $i;
  $440 = ($439|0)<(3);
  if (!($440)) {
   break;
  }
  $441 = $i;
  $442 = $0;
  $443 = ((($442)) + 28|0);
  $444 = ((($443)) + 12|0);
  $445 = ((($444)) + 4|0);
  $446 = HEAP32[$445>>2]|0;
  $447 = ((($446)) + 148|0);
  $448 = (($447) + ($441<<2)|0);
  $449 = +HEAPF32[$448>>2];
  $450 = $i;
  $451 = (($a2) + ($450<<2)|0);
  $452 = +HEAPF32[$451>>2];
  $453 = $452 + $449;
  HEAPF32[$451>>2] = $453;
  $454 = $i;
  $455 = (($454) + 1)|0;
  $i = $455;
 }
 $456 = $k1;
 $457 = $4;
 $458 = (+_dDOT($457,$a2));
 $459 = $4;
 $460 = (+_dDOT($459,$a1));
 $461 = $458 - $460;
 $462 = $456 * $461;
 $463 = $1;
 $464 = ((($463)) + 28|0);
 $465 = HEAP32[$464>>2]|0;
 HEAPF32[$465>>2] = $462;
 $466 = $k;
 $467 = (+_dDOT($q1,$a2));
 $468 = (+_dDOT($q1,$a1));
 $469 = $467 - $468;
 $470 = $466 * $469;
 $471 = $1;
 $472 = ((($471)) + 28|0);
 $473 = HEAP32[$472>>2]|0;
 $474 = ((($473)) + 4|0);
 HEAPF32[$474>>2] = $470;
 $475 = $k;
 $476 = (+_dDOT($q2,$a2));
 $477 = (+_dDOT($q2,$a1));
 $478 = $476 - $477;
 $479 = $475 * $478;
 $480 = $1;
 $481 = ((($480)) + 28|0);
 $482 = HEAP32[$481>>2]|0;
 $483 = ((($482)) + 8|0);
 HEAPF32[$483>>2] = $479;
 STACKTOP = sp;return;
}
function __ZL7setBallP7dxJointPNS_5Info2EPfS3_($joint,$info,$anchor1,$anchor2) {
 $joint = $joint|0;
 $info = $info|0;
 $anchor1 = $anchor1|0;
 $anchor2 = $anchor2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0;
 var $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a1 = 0, $a2 = 0, $j = 0, $j1 = 0, $k = 0.0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a1 = sp + 32|0;
 $a2 = sp + 16|0;
 $0 = $joint;
 $1 = $info;
 $2 = $anchor1;
 $3 = $anchor2;
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $s = $6;
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 HEAPF32[$9>>2] = 1.0;
 $10 = $s;
 $11 = (($10) + 1)|0;
 $12 = $1;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($11<<2)|0);
 HEAPF32[$15>>2] = 1.0;
 $16 = $s;
 $17 = $16<<1;
 $18 = (($17) + 2)|0;
 $19 = $1;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18<<2)|0);
 HEAPF32[$22>>2] = 1.0;
 $23 = $0;
 $24 = ((($23)) + 28|0);
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 180|0);
 $28 = $2;
 _dMULTIPLY0_331($a1,$27,$28);
 $29 = ((($a1)) + 8|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $1;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 4|0);
 HEAPF32[$34>>2] = $30;
 $35 = ((($a1)) + 4|0);
 $36 = +HEAPF32[$35>>2];
 $37 = -$36;
 $38 = $1;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 8|0);
 HEAPF32[$41>>2] = $37;
 $42 = ((($a1)) + 8|0);
 $43 = +HEAPF32[$42>>2];
 $44 = -$43;
 $45 = $s;
 $46 = (($45) + 0)|0;
 $47 = $1;
 $48 = ((($47)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + ($46<<2)|0);
 HEAPF32[$50>>2] = $44;
 $51 = +HEAPF32[$a1>>2];
 $52 = $s;
 $53 = (($52) + 2)|0;
 $54 = $1;
 $55 = ((($54)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($53<<2)|0);
 HEAPF32[$57>>2] = $51;
 $58 = ((($a1)) + 4|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $s;
 $61 = $60<<1;
 $62 = (($61) + 0)|0;
 $63 = $1;
 $64 = ((($63)) + 12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + ($62<<2)|0);
 HEAPF32[$66>>2] = $59;
 $67 = +HEAPF32[$a1>>2];
 $68 = -$67;
 $69 = $s;
 $70 = $69<<1;
 $71 = (($70) + 1)|0;
 $72 = $1;
 $73 = ((($72)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($71<<2)|0);
 HEAPF32[$75>>2] = $68;
 $76 = $0;
 $77 = ((($76)) + 28|0);
 $78 = ((($77)) + 12|0);
 $79 = ((($78)) + 4|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = $1;
  $83 = ((($82)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  HEAPF32[$84>>2] = -1.0;
  $85 = $s;
  $86 = (($85) + 1)|0;
  $87 = $1;
  $88 = ((($87)) + 16|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + ($86<<2)|0);
  HEAPF32[$90>>2] = -1.0;
  $91 = $s;
  $92 = $91<<1;
  $93 = (($92) + 2)|0;
  $94 = $1;
  $95 = ((($94)) + 16|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + ($93<<2)|0);
  HEAPF32[$97>>2] = -1.0;
  $98 = $0;
  $99 = ((($98)) + 28|0);
  $100 = ((($99)) + 12|0);
  $101 = ((($100)) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($102)) + 180|0);
  $104 = $3;
  _dMULTIPLY0_331($a2,$103,$104);
  $105 = ((($a2)) + 8|0);
  $106 = +HEAPF32[$105>>2];
  $107 = -$106;
  $108 = $1;
  $109 = ((($108)) + 20|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($110)) + 4|0);
  HEAPF32[$111>>2] = $107;
  $112 = ((($a2)) + 4|0);
  $113 = +HEAPF32[$112>>2];
  $114 = $1;
  $115 = ((($114)) + 20|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ((($116)) + 8|0);
  HEAPF32[$117>>2] = $113;
  $118 = ((($a2)) + 8|0);
  $119 = +HEAPF32[$118>>2];
  $120 = $s;
  $121 = (($120) + 0)|0;
  $122 = $1;
  $123 = ((($122)) + 20|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + ($121<<2)|0);
  HEAPF32[$125>>2] = $119;
  $126 = +HEAPF32[$a2>>2];
  $127 = -$126;
  $128 = $s;
  $129 = (($128) + 2)|0;
  $130 = $1;
  $131 = ((($130)) + 20|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + ($129<<2)|0);
  HEAPF32[$133>>2] = $127;
  $134 = ((($a2)) + 4|0);
  $135 = +HEAPF32[$134>>2];
  $136 = -$135;
  $137 = $s;
  $138 = $137<<1;
  $139 = (($138) + 0)|0;
  $140 = $1;
  $141 = ((($140)) + 20|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (($142) + ($139<<2)|0);
  HEAPF32[$143>>2] = $136;
  $144 = +HEAPF32[$a2>>2];
  $145 = $s;
  $146 = $145<<1;
  $147 = (($146) + 1)|0;
  $148 = $1;
  $149 = ((($148)) + 20|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($150) + ($147<<2)|0);
  HEAPF32[$151>>2] = $144;
 }
 $152 = $1;
 $153 = +HEAPF32[$152>>2];
 $154 = $1;
 $155 = ((($154)) + 4|0);
 $156 = +HEAPF32[$155>>2];
 $157 = $153 * $156;
 $k = $157;
 $158 = $0;
 $159 = ((($158)) + 28|0);
 $160 = ((($159)) + 12|0);
 $161 = ((($160)) + 4|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)!=(0|0);
 if ($163) {
  $j = 0;
  while(1) {
   $164 = $j;
   $165 = ($164|0)<(3);
   if (!($165)) {
    break;
   }
   $166 = $k;
   $167 = $j;
   $168 = (($a2) + ($167<<2)|0);
   $169 = +HEAPF32[$168>>2];
   $170 = $j;
   $171 = $0;
   $172 = ((($171)) + 28|0);
   $173 = ((($172)) + 12|0);
   $174 = ((($173)) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ((($175)) + 148|0);
   $177 = (($176) + ($170<<2)|0);
   $178 = +HEAPF32[$177>>2];
   $179 = $169 + $178;
   $180 = $j;
   $181 = (($a1) + ($180<<2)|0);
   $182 = +HEAPF32[$181>>2];
   $183 = $179 - $182;
   $184 = $j;
   $185 = $0;
   $186 = ((($185)) + 28|0);
   $187 = ((($186)) + 4|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = ((($188)) + 148|0);
   $190 = (($189) + ($184<<2)|0);
   $191 = +HEAPF32[$190>>2];
   $192 = $183 - $191;
   $193 = $166 * $192;
   $194 = $j;
   $195 = $1;
   $196 = ((($195)) + 28|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = (($197) + ($194<<2)|0);
   HEAPF32[$198>>2] = $193;
   $199 = $j;
   $200 = (($199) + 1)|0;
   $j = $200;
  }
  STACKTOP = sp;return;
 } else {
  $j1 = 0;
  while(1) {
   $201 = $j1;
   $202 = ($201|0)<(3);
   if (!($202)) {
    break;
   }
   $203 = $k;
   $204 = $j1;
   $205 = $3;
   $206 = (($205) + ($204<<2)|0);
   $207 = +HEAPF32[$206>>2];
   $208 = $j1;
   $209 = (($a1) + ($208<<2)|0);
   $210 = +HEAPF32[$209>>2];
   $211 = $207 - $210;
   $212 = $j1;
   $213 = $0;
   $214 = ((($213)) + 28|0);
   $215 = ((($214)) + 4|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ((($216)) + 148|0);
   $218 = (($217) + ($212<<2)|0);
   $219 = +HEAPF32[$218>>2];
   $220 = $211 - $219;
   $221 = $203 * $220;
   $222 = $j1;
   $223 = $1;
   $224 = ((($223)) + 28|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = (($225) + ($222<<2)|0);
   HEAPF32[$226>>2] = $221;
   $227 = $j1;
   $228 = (($227) + 1)|0;
   $j1 = $228;
  }
  STACKTOP = sp;return;
 }
}
function _dDOT41($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 16|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = ((($15)) + 32|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 STACKTOP = sp;return (+$22);
}
function _dSimpleSpaceCreate() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (__ZN5dBasenwEj(12)|0);
 __ZN13dxSimpleSpaceC2Ev($0);
 $w = $0;
 $1 = $w;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 2989;
 $3 = $w;
 $4 = ((($3)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = $w;
 STACKTOP = sp;return ($5|0);
}
function __ZN13dxSimpleSpace7destroyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 5795;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $g = $4;
 while(1) {
  $5 = $g;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $g;
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $n = $9;
  $10 = $g;
  _dGeomDestroy($10);
  $11 = $n;
  $g = $11;
 }
 $12 = ($1|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 __ZN5dBasedlEPvj($1,12);
 STACKTOP = sp;return;
}
function __ZN13dxSimpleSpace3addEP6dxGeom($this,$obj) {
 $this = $this|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $obj;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 5803;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  HEAP32[$vararg_buffer2>>2] = 5803;
  _dDebug(2,5807,$vararg_buffer2);
 }
 $14 = ((($2)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ((($16)) + 24|0);
 HEAP32[$17>>2] = $15;
 $18 = $1;
 $19 = ((($2)) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = $1;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN13dxSimpleSpace6removeEP6dxGeom($this,$geom_to_remove) {
 $this = $this|0;
 $geom_to_remove = $geom_to_remove|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, $last = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $geom_to_remove;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 5844;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  HEAP32[$vararg_buffer2>>2] = 5844;
  _dDebug(2,5851,$vararg_buffer2);
 }
 $last = 0;
 $10 = ((($2)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $g = $11;
 while(1) {
  $12 = $g;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   label = 13;
   break;
  }
  $14 = $g;
  $15 = $1;
  $16 = ($14|0)==($15|0);
  if ($16) {
   break;
  }
  $29 = $g;
  $last = $29;
  $30 = $g;
  $31 = ((($30)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $g = $32;
 }
 if ((label|0) == 13) {
  STACKTOP = sp;return;
 }
 $17 = $last;
 $18 = ($17|0)!=(0|0);
 $19 = $g;
 $20 = ((($19)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 if ($18) {
  $22 = $last;
  $23 = ((($22)) + 24|0);
  HEAP32[$23>>2] = $21;
 } else {
  $24 = ((($2)) + 8|0);
  HEAP32[$24>>2] = $21;
 }
 $25 = $1;
 $26 = ((($25)) + 24|0);
 HEAP32[$26>>2] = 0;
 $27 = $1;
 $28 = ((($27)) + 20|0);
 HEAP32[$28>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN13dxSimpleSpace7collideEPvPFvS0_P6dxGeomS2_E($this,$data,$callback) {
 $this = $this|0;
 $data = $data|0;
 $callback = $callback|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $bounds = 0, $g1 = 0, $g2 = 0, $i = 0, $j = 0, $n = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $data;
 $2 = $callback;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 5884;
  _dDebug(2,6111,$vararg_buffer);
 }
 $n = 0;
 $7 = ((($3)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $g1 = $8;
 while(1) {
  $9 = $g1;
  $10 = ($9|0)!=(0|0);
  $11 = $n;
  if (!($10)) {
   break;
  }
  $12 = (($11) + 1)|0;
  $n = $12;
  $13 = $g1;
  $14 = ((($13)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $g1 = $15;
 }
 $16 = ($11*6)|0;
 $17 = $16<<2;
 $18 = (($17) + 15)|0;
 $$alloca_mul = $18;
 $19 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $20 = $19;
 $21 = (($20) - 1)|0;
 $22 = $21 | 15;
 $23 = (($22) + 1)|0;
 $24 = $23;
 $bounds = $24;
 $i = 0;
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $g1 = $26;
 while(1) {
  $27 = $g1;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   break;
  }
  $29 = $g1;
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $g1;
  $34 = $bounds;
  $35 = $i;
  $36 = (($34) + ($35<<2)|0);
  FUNCTION_TABLE_vii[$32 & 127]($33,$36);
  $37 = $bounds;
  $38 = $i;
  $39 = (($37) + ($38<<2)|0);
  $40 = $g1;
  $41 = ((($40)) + 28|0);
  HEAP32[$41>>2] = $39;
  $42 = $i;
  $43 = (($42) + 6)|0;
  $i = $43;
  $44 = $g1;
  $45 = ((($44)) + 24|0);
  $46 = HEAP32[$45>>2]|0;
  $g1 = $46;
 }
 $i = 0;
 $47 = ((($3)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $g1 = $48;
 while(1) {
  $49 = $g1;
  $50 = ($49|0)!=(0|0);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = (($51) + 6)|0;
  $j = $52;
  $53 = $g1;
  $54 = ((($53)) + 24|0);
  $55 = HEAP32[$54>>2]|0;
  $g2 = $55;
  while(1) {
   $56 = $g2;
   $57 = ($56|0)!=(0|0);
   if (!($57)) {
    break;
   }
   $58 = $bounds;
   $59 = $i;
   $60 = (($58) + ($59<<2)|0);
   $61 = $bounds;
   $62 = $j;
   $63 = (($61) + ($62<<2)|0);
   $64 = $g1;
   $65 = $g2;
   $66 = $1;
   $67 = $2;
   __ZL12collideAABBsPfS_P6dxGeomS1_PvPFvS2_S1_S1_E($60,$63,$64,$65,$66,$67);
   $68 = $j;
   $69 = (($68) + 6)|0;
   $j = $69;
   $70 = $g2;
   $71 = ((($70)) + 24|0);
   $72 = HEAP32[$71>>2]|0;
   $g2 = $72;
  }
  $73 = $i;
  $74 = (($73) + 6)|0;
  $i = $74;
  $75 = $g1;
  $76 = ((($75)) + 24|0);
  $77 = HEAP32[$76>>2]|0;
  $g1 = $77;
 }
 $78 = ((($3)) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $g1 = $79;
 while(1) {
  $80 = $g1;
  $81 = ($80|0)!=(0|0);
  if (!($81)) {
   break;
  }
  $82 = $g1;
  $83 = ((($82)) + 28|0);
  HEAP32[$83>>2] = 0;
  $84 = $g1;
  $85 = ((($84)) + 24|0);
  $86 = HEAP32[$85>>2]|0;
  $g1 = $86;
 }
 STACKTOP = sp;return;
}
function _dHashSpaceCreate() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (__ZN5dBasenwEj(20)|0);
 __ZN11dxHashSpaceC2Ev($0);
 $w = $0;
 $1 = $w;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 47806;
 $3 = $w;
 $4 = ((($3)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = $w;
 $6 = ((($5)) + 12|0);
 HEAP32[$6>>2] = -3;
 $7 = $w;
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = 10;
 $9 = $w;
 STACKTOP = sp;return ($9|0);
}
function __ZN11dxHashSpace7destroyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 5795;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $g = $4;
 while(1) {
  $5 = $g;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $g;
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $n = $9;
  $10 = $g;
  _dGeomDestroy($10);
  $11 = $n;
  $g = $11;
 }
 $12 = ($1|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 __ZN5dBasedlEPvj($1,20);
 STACKTOP = sp;return;
}
function _dHashSpaceSetLevels($space,$minlevel,$maxlevel) {
 $space = $space|0;
 $minlevel = $minlevel|0;
 $maxlevel = $maxlevel|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hspace = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $space;
 $1 = $minlevel;
 $2 = $maxlevel;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)<=($4|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 5931;
  _dDebug(2,5892,$vararg_buffer);
 }
 $6 = $0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(47806);
 if (!($9)) {
  HEAP32[$vararg_buffer1>>2] = 5931;
  _dDebug(2,5951,$vararg_buffer1);
 }
 $10 = $0;
 $hspace = $10;
 $11 = $1;
 $12 = $hspace;
 $13 = ((($12)) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = $hspace;
 $16 = ((($15)) + 16|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return;
}
function __ZN11dxHashSpace3addEP6dxGeom($this,$obj) {
 $this = $this|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $obj;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 5803;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  HEAP32[$vararg_buffer2>>2] = 5803;
  _dDebug(2,5807,$vararg_buffer2);
 }
 $14 = ((($2)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ((($16)) + 24|0);
 HEAP32[$17>>2] = $15;
 $18 = $1;
 $19 = ((($2)) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = $1;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN11dxHashSpace6removeEP6dxGeom($this,$geom_to_remove) {
 $this = $this|0;
 $geom_to_remove = $geom_to_remove|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, $last = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $geom_to_remove;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 5844;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $1;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  HEAP32[$vararg_buffer2>>2] = 5844;
  _dDebug(2,5851,$vararg_buffer2);
 }
 $last = 0;
 $10 = ((($2)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $g = $11;
 while(1) {
  $12 = $g;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   label = 13;
   break;
  }
  $14 = $g;
  $15 = $1;
  $16 = ($14|0)==($15|0);
  if ($16) {
   break;
  }
  $29 = $g;
  $last = $29;
  $30 = $g;
  $31 = ((($30)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $g = $32;
 }
 if ((label|0) == 13) {
  STACKTOP = sp;return;
 }
 $17 = $last;
 $18 = ($17|0)!=(0|0);
 $19 = $g;
 $20 = ((($19)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 if ($18) {
  $22 = $last;
  $23 = ((($22)) + 24|0);
  HEAP32[$23>>2] = $21;
 } else {
  $24 = ((($2)) + 8|0);
  HEAP32[$24>>2] = $21;
 }
 $25 = $1;
 $26 = ((($25)) + 24|0);
 HEAP32[$26>>2] = 0;
 $27 = $1;
 $28 = ((($27)) + 20|0);
 HEAP32[$28>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN11dxHashSpace7collideEPvPFvS0_P6dxGeomS2_E($this,$data,$callback) {
 $this = $this|0;
 $data = $data|0;
 $callback = $callback|0;
 var $$alloca_mul = 0, $$alloca_mul10 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $aabb = 0, $aabb1 = 0, $aabb2 = 0, $aabb28 = 0, $big_boxes = 0, $cellsize = 0.0, $db = 0, $dbounds = 0, $first_aabb = 0, $geom = 0, $hi = 0, $hi6 = 0, $i = 0, $level = 0, $level2 = 0, $mask = 0, $maxlevel = 0, $n = 0, $node = 0, $node7 = 0;
 var $ntotal = 0, $or$cond = 0, $sz = 0, $table = 0, $tested = 0, $tested_rowsize = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr5 = 0, $xi = 0, $xi3 = 0, $yi = 0, $yi4 = 0, $zi = 0, $zi5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $db = sp + 48|0;
 $0 = $this;
 $1 = $data;
 $2 = $callback;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 5884;
  _dDebug(2,6111,$vararg_buffer);
 }
 $n = 0;
 $ntotal = 0;
 $first_aabb = 0;
 $big_boxes = 0;
 $7 = ((($3)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - 1)|0;
 $maxlevel = $9;
 $10 = ((($3)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $geom = $11;
 while(1) {
  $12 = $geom;
  $13 = ($12|0)!=(0|0);
  $14 = $ntotal;
  if (!($13)) {
   break;
  }
  $15 = (($14) + 1)|0;
  $ntotal = $15;
  $16 = STACKTOP; STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
  $17 = $16;
  $18 = (($17) - 1)|0;
  $19 = $18 | 15;
  $20 = (($19) + 1)|0;
  $21 = $20;
  $aabb1 = $21;
  $22 = $geom;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $geom;
  $27 = $aabb1;
  $28 = ((($27)) + 4|0);
  FUNCTION_TABLE_vii[$25 & 127]($26,$28);
  $29 = $aabb1;
  $30 = ((($29)) + 4|0);
  $31 = $geom;
  $32 = ((($31)) + 28|0);
  HEAP32[$32>>2] = $30;
  $33 = $geom;
  $34 = $aabb1;
  $35 = ((($34)) + 56|0);
  HEAP32[$35>>2] = $33;
  $36 = $aabb1;
  $37 = ((($36)) + 4|0);
  $38 = (__ZL9findLevelPf($37)|0);
  $level = $38;
  $39 = $level;
  $40 = ((($3)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)<($41|0);
  if ($42) {
   $43 = ((($3)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $level = $44;
  }
  $45 = $level;
  $46 = ((($3)) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)<=($47|0);
  if ($48) {
   $49 = $first_aabb;
   $50 = $aabb1;
   HEAP32[$50>>2] = $49;
   $51 = $aabb1;
   $first_aabb = $51;
   $52 = $level;
   $53 = $aabb1;
   $54 = ((($53)) + 28|0);
   HEAP32[$54>>2] = $52;
   $55 = $level;
   $56 = $maxlevel;
   $57 = ($55|0)>($56|0);
   if ($57) {
    $58 = $level;
    $maxlevel = $58;
   }
   $59 = $level;
   $60 = (+_ldexp(1.0,$59));
   $61 = $60;
   $cellsize = $61;
   $i = 0;
   while(1) {
    $62 = $i;
    $63 = ($62|0)<(6);
    if (!($63)) {
     break;
    }
    $64 = $i;
    $65 = $aabb1;
    $66 = ((($65)) + 4|0);
    $67 = (($66) + ($64<<2)|0);
    $68 = +HEAPF32[$67>>2];
    $69 = $cellsize;
    $70 = $68 / $69;
    $71 = $70;
    $72 = (+Math_floor((+$71)));
    $73 = (~~(($72)));
    $74 = $i;
    $75 = $aabb1;
    $76 = ((($75)) + 32|0);
    $77 = (($76) + ($74<<2)|0);
    HEAP32[$77>>2] = $73;
    $78 = $i;
    $79 = (($78) + 1)|0;
    $i = $79;
   }
   $80 = $n;
   $81 = $aabb1;
   $82 = ((($81)) + 60|0);
   HEAP32[$82>>2] = $80;
   $83 = $n;
   $84 = (($83) + 1)|0;
   $n = $84;
  } else {
   $85 = $big_boxes;
   $86 = $aabb1;
   HEAP32[$86>>2] = $85;
   $87 = $aabb1;
   $big_boxes = $87;
  }
  $88 = $geom;
  $89 = ((($88)) + 24|0);
  $90 = HEAP32[$89>>2]|0;
  $geom = $90;
 }
 $91 = ($14|0)<(2);
 if ($91) {
  STACKTOP = sp;return;
 }
 $92 = $n;
 $93 = (($92) + 7)|0;
 $94 = $93 >> 3;
 $tested_rowsize = $94;
 $95 = $n;
 $96 = $tested_rowsize;
 $97 = Math_imul($95, $96)|0;
 $$alloca_mul = $97;
 $98 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $tested = $98;
 $99 = $tested;
 $100 = $n;
 $101 = $tested_rowsize;
 $102 = Math_imul($100, $101)|0;
 _memset(($99|0),0,($102|0))|0;
 $i = 0;
 while(1) {
  $103 = $i;
  $104 = ($103|0)<(31);
  if (!($104)) {
   break;
  }
  $105 = $i;
  $106 = (392 + ($105<<2)|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $n;
  $109 = $108<<3;
  $110 = ($107|0)>=($109|0);
  if ($110) {
   break;
  }
  $111 = $i;
  $112 = (($111) + 1)|0;
  $i = $112;
 }
 $113 = $i;
 $114 = ($113|0)>=(31);
 if ($114) {
  $i = 30;
 }
 $115 = $i;
 $116 = (392 + ($115<<2)|0);
 $117 = HEAP32[$116>>2]|0;
 $sz = $117;
 $118 = $sz;
 $119 = $118<<2;
 $120 = (($119) + 15)|0;
 $$alloca_mul10 = $120;
 $121 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul10)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $122 = $121;
 $123 = (($122) - 1)|0;
 $124 = $123 | 15;
 $125 = (($124) + 1)|0;
 $126 = $125;
 $table = $126;
 $i = 0;
 while(1) {
  $127 = $i;
  $128 = $sz;
  $129 = ($127|0)<($128|0);
  if (!($129)) {
   break;
  }
  $130 = $i;
  $131 = $table;
  $132 = (($131) + ($130<<2)|0);
  HEAP32[$132>>2] = 0;
  $133 = $i;
  $134 = (($133) + 1)|0;
  $i = $134;
 }
 $135 = $first_aabb;
 $aabb = $135;
 while(1) {
  $136 = $aabb;
  $137 = ($136|0)!=(0|0);
  if (!($137)) {
   break;
  }
  $138 = $aabb;
  $139 = ((($138)) + 32|0);
  $dbounds = $139;
  $140 = $dbounds;
  $141 = HEAP32[$140>>2]|0;
  $xi = $141;
  while(1) {
   $142 = $xi;
   $143 = $dbounds;
   $144 = ((($143)) + 4|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($142|0)<=($145|0);
   if (!($146)) {
    break;
   }
   $147 = $dbounds;
   $148 = ((($147)) + 8|0);
   $149 = HEAP32[$148>>2]|0;
   $yi = $149;
   while(1) {
    $150 = $yi;
    $151 = $dbounds;
    $152 = ((($151)) + 12|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ($150|0)<=($153|0);
    if (!($154)) {
     break;
    }
    $155 = $dbounds;
    $156 = ((($155)) + 16|0);
    $157 = HEAP32[$156>>2]|0;
    $zi = $157;
    while(1) {
     $158 = $zi;
     $159 = $dbounds;
     $160 = ((($159)) + 20|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($158|0)<=($161|0);
     if (!($162)) {
      break;
     }
     $163 = $aabb;
     $164 = ((($163)) + 28|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = $xi;
     $167 = $yi;
     $168 = $zi;
     $169 = (__ZL17getVirtualAddressiiii($165,$166,$167,$168)|0);
     $170 = $sz;
     $171 = (($169>>>0) % ($170>>>0))&-1;
     $hi = $171;
     $172 = STACKTOP; STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
     $node = $172;
     $173 = $xi;
     $174 = $node;
     $175 = ((($174)) + 4|0);
     HEAP32[$175>>2] = $173;
     $176 = $yi;
     $177 = $node;
     $178 = ((($177)) + 8|0);
     HEAP32[$178>>2] = $176;
     $179 = $zi;
     $180 = $node;
     $181 = ((($180)) + 12|0);
     HEAP32[$181>>2] = $179;
     $182 = $aabb;
     $183 = $node;
     $184 = ((($183)) + 16|0);
     HEAP32[$184>>2] = $182;
     $185 = $hi;
     $186 = $table;
     $187 = (($186) + ($185<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = $node;
     HEAP32[$189>>2] = $188;
     $190 = $node;
     $191 = $hi;
     $192 = $table;
     $193 = (($192) + ($191<<2)|0);
     HEAP32[$193>>2] = $190;
     $194 = $zi;
     $195 = (($194) + 1)|0;
     $zi = $195;
    }
    $196 = $yi;
    $197 = (($196) + 1)|0;
    $yi = $197;
   }
   $198 = $xi;
   $199 = (($198) + 1)|0;
   $xi = $199;
  }
  $200 = $aabb;
  $201 = HEAP32[$200>>2]|0;
  $aabb = $201;
 }
 $202 = $first_aabb;
 $aabb = $202;
 while(1) {
  $203 = $aabb;
  $204 = ($203|0)!=(0|0);
  if (!($204)) {
   break;
  }
  $i = 0;
  while(1) {
   $205 = $i;
   $206 = ($205|0)<(6);
   if (!($206)) {
    break;
   }
   $207 = $i;
   $208 = $aabb;
   $209 = ((($208)) + 32|0);
   $210 = (($209) + ($207<<2)|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = $i;
   $213 = (($db) + ($212<<2)|0);
   HEAP32[$213>>2] = $211;
   $214 = $i;
   $215 = (($214) + 1)|0;
   $i = $215;
  }
  $216 = $aabb;
  $217 = ((($216)) + 28|0);
  $218 = HEAP32[$217>>2]|0;
  $level2 = $218;
  while(1) {
   $219 = $level2;
   $220 = $maxlevel;
   $221 = ($219|0)<=($220|0);
   if (!($221)) {
    break;
   }
   $222 = HEAP32[$db>>2]|0;
   $xi3 = $222;
   while(1) {
    $223 = $xi3;
    $224 = ((($db)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = ($223|0)<=($225|0);
    if (!($226)) {
     break;
    }
    $227 = ((($db)) + 8|0);
    $228 = HEAP32[$227>>2]|0;
    $yi4 = $228;
    while(1) {
     $229 = $yi4;
     $230 = ((($db)) + 12|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = ($229|0)<=($231|0);
     if (!($232)) {
      break;
     }
     $233 = ((($db)) + 16|0);
     $234 = HEAP32[$233>>2]|0;
     $zi5 = $234;
     while(1) {
      $235 = $zi5;
      $236 = ((($db)) + 20|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = ($235|0)<=($237|0);
      if (!($238)) {
       break;
      }
      $239 = $level2;
      $240 = $xi3;
      $241 = $yi4;
      $242 = $zi5;
      $243 = (__ZL17getVirtualAddressiiii($239,$240,$241,$242)|0);
      $244 = $sz;
      $245 = (($243>>>0) % ($244>>>0))&-1;
      $hi6 = $245;
      $246 = $hi6;
      $247 = $table;
      $248 = (($247) + ($246<<2)|0);
      $249 = HEAP32[$248>>2]|0;
      $node7 = $249;
      while(1) {
       $250 = $node7;
       $251 = ($250|0)!=(0|0);
       if (!($251)) {
        break;
       }
       $252 = $node7;
       $253 = ((($252)) + 16|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = $aabb;
       $256 = ($254|0)==($255|0);
       do {
        if (!($256)) {
         $257 = $node7;
         $258 = ((($257)) + 16|0);
         $259 = HEAP32[$258>>2]|0;
         $260 = ((($259)) + 28|0);
         $261 = HEAP32[$260>>2]|0;
         $262 = $level2;
         $263 = ($261|0)==($262|0);
         if ($263) {
          $264 = $node7;
          $265 = ((($264)) + 4|0);
          $266 = HEAP32[$265>>2]|0;
          $267 = $xi3;
          $268 = ($266|0)==($267|0);
          if ($268) {
           $269 = $node7;
           $270 = ((($269)) + 8|0);
           $271 = HEAP32[$270>>2]|0;
           $272 = $yi4;
           $273 = ($271|0)==($272|0);
           if ($273) {
            $274 = $node7;
            $275 = ((($274)) + 12|0);
            $276 = HEAP32[$275>>2]|0;
            $277 = $zi5;
            $278 = ($276|0)==($277|0);
            if (!($278)) {
             break;
            }
            $279 = $aabb;
            $280 = ((($279)) + 60|0);
            $281 = HEAP32[$280>>2]|0;
            $282 = $node7;
            $283 = ((($282)) + 16|0);
            $284 = HEAP32[$283>>2]|0;
            $285 = ((($284)) + 60|0);
            $286 = HEAP32[$285>>2]|0;
            $287 = ($281|0)<=($286|0);
            if ($287) {
             $288 = $aabb;
             $289 = ((($288)) + 60|0);
             $290 = HEAP32[$289>>2]|0;
             $291 = $tested_rowsize;
             $292 = Math_imul($290, $291)|0;
             $293 = $node7;
             $294 = ((($293)) + 16|0);
             $295 = HEAP32[$294>>2]|0;
             $296 = ((($295)) + 60|0);
             $297 = HEAP32[$296>>2]|0;
             $298 = $297 >> 3;
             $299 = (($292) + ($298))|0;
             $i = $299;
             $300 = $node7;
             $301 = ((($300)) + 16|0);
             $302 = HEAP32[$301>>2]|0;
             $303 = ((($302)) + 60|0);
             $304 = HEAP32[$303>>2]|0;
             $305 = $304 & 7;
             $306 = 1 << $305;
             $307 = $306&255;
             $mask = $307;
            } else {
             $308 = $node7;
             $309 = ((($308)) + 16|0);
             $310 = HEAP32[$309>>2]|0;
             $311 = ((($310)) + 60|0);
             $312 = HEAP32[$311>>2]|0;
             $313 = $tested_rowsize;
             $314 = Math_imul($312, $313)|0;
             $315 = $aabb;
             $316 = ((($315)) + 60|0);
             $317 = HEAP32[$316>>2]|0;
             $318 = $317 >> 3;
             $319 = (($314) + ($318))|0;
             $i = $319;
             $320 = $aabb;
             $321 = ((($320)) + 60|0);
             $322 = HEAP32[$321>>2]|0;
             $323 = $322 & 7;
             $324 = 1 << $323;
             $325 = $324&255;
             $mask = $325;
            }
            $326 = $i;
            $327 = ($326|0)>=(0);
            if ($327) {
             $328 = $i;
             $329 = $tested_rowsize;
             $330 = $n;
             $331 = Math_imul($329, $330)|0;
             $332 = ($328|0)<($331|0);
             if (!($332)) {
              label = 63;
             }
            } else {
             label = 63;
            }
            if ((label|0) == 63) {
             label = 0;
             HEAP32[$vararg_buffer2>>2] = 5884;
             $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
             HEAP32[$vararg_ptr5>>2] = 6045;
             _dDebug(1,5980,$vararg_buffer2);
            }
            $333 = $i;
            $334 = $tested;
            $335 = (($334) + ($333)|0);
            $336 = HEAP8[$335>>0]|0;
            $337 = $336&255;
            $338 = $mask;
            $339 = $338&255;
            $340 = $337 & $339;
            $341 = ($340|0)==(0);
            if ($341) {
             $342 = $aabb;
             $343 = ((($342)) + 4|0);
             $344 = $node7;
             $345 = ((($344)) + 16|0);
             $346 = HEAP32[$345>>2]|0;
             $347 = ((($346)) + 4|0);
             $348 = $aabb;
             $349 = ((($348)) + 56|0);
             $350 = HEAP32[$349>>2]|0;
             $351 = $node7;
             $352 = ((($351)) + 16|0);
             $353 = HEAP32[$352>>2]|0;
             $354 = ((($353)) + 56|0);
             $355 = HEAP32[$354>>2]|0;
             $356 = $1;
             $357 = $2;
             __ZL12collideAABBsPfS_P6dxGeomS1_PvPFvS2_S1_S1_E($343,$347,$350,$355,$356,$357);
            }
            $358 = $mask;
            $359 = $358&255;
            $360 = $i;
            $361 = $tested;
            $362 = (($361) + ($360)|0);
            $363 = HEAP8[$362>>0]|0;
            $364 = $363&255;
            $365 = $364 | $359;
            $366 = $365&255;
            HEAP8[$362>>0] = $366;
           }
          }
         }
        }
       } while(0);
       $367 = $node7;
       $368 = HEAP32[$367>>2]|0;
       $node7 = $368;
      }
      $369 = $zi5;
      $370 = (($369) + 1)|0;
      $zi5 = $370;
     }
     $371 = $yi4;
     $372 = (($371) + 1)|0;
     $yi4 = $372;
    }
    $373 = $xi3;
    $374 = (($373) + 1)|0;
    $xi3 = $374;
   }
   $i = 0;
   while(1) {
    $375 = $i;
    $376 = ($375|0)<(6);
    if (!($376)) {
     break;
    }
    $377 = $i;
    $378 = (($db) + ($377<<2)|0);
    $379 = HEAP32[$378>>2]|0;
    $380 = $379 >> 1;
    HEAP32[$378>>2] = $380;
    $381 = $i;
    $382 = (($381) + 1)|0;
    $i = $382;
   }
   $383 = $level2;
   $384 = (($383) + 1)|0;
   $level2 = $384;
  }
  $385 = $aabb;
  $386 = HEAP32[$385>>2]|0;
  $aabb = $386;
 }
 $387 = $first_aabb;
 $aabb = $387;
 while(1) {
  $388 = $aabb;
  $389 = ($388|0)!=(0|0);
  $390 = $big_boxes;
  if (!($389)) {
   break;
  }
  $aabb2 = $390;
  while(1) {
   $391 = $aabb2;
   $392 = ($391|0)!=(0|0);
   $393 = $aabb;
   if (!($392)) {
    break;
   }
   $394 = ((($393)) + 4|0);
   $395 = $aabb2;
   $396 = ((($395)) + 4|0);
   $397 = $aabb;
   $398 = ((($397)) + 56|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = $aabb2;
   $401 = ((($400)) + 56|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = $1;
   $404 = $2;
   __ZL12collideAABBsPfS_P6dxGeomS1_PvPFvS2_S1_S1_E($394,$396,$399,$402,$403,$404);
   $405 = $aabb2;
   $406 = HEAP32[$405>>2]|0;
   $aabb2 = $406;
  }
  $407 = HEAP32[$393>>2]|0;
  $aabb = $407;
 }
 $aabb = $390;
 while(1) {
  $408 = $aabb;
  $409 = ($408|0)!=(0|0);
  if (!($409)) {
   break;
  }
  $410 = $aabb;
  $411 = HEAP32[$410>>2]|0;
  $aabb28 = $411;
  while(1) {
   $412 = $aabb28;
   $413 = ($412|0)!=(0|0);
   $414 = $aabb;
   if (!($413)) {
    break;
   }
   $415 = ((($414)) + 4|0);
   $416 = $aabb28;
   $417 = ((($416)) + 4|0);
   $418 = $aabb;
   $419 = ((($418)) + 56|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = $aabb28;
   $422 = ((($421)) + 56|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = $1;
   $425 = $2;
   __ZL12collideAABBsPfS_P6dxGeomS1_PvPFvS2_S1_S1_E($415,$417,$420,$423,$424,$425);
   $426 = $aabb28;
   $427 = HEAP32[$426>>2]|0;
   $aabb28 = $427;
  }
  $428 = HEAP32[$414>>2]|0;
  $aabb = $428;
 }
 $429 = ((($3)) + 8|0);
 $430 = HEAP32[$429>>2]|0;
 $geom = $430;
 while(1) {
  $431 = $geom;
  $432 = ($431|0)!=(0|0);
  if (!($432)) {
   break;
  }
  $433 = $geom;
  $434 = ((($433)) + 28|0);
  HEAP32[$434>>2] = 0;
  $435 = $geom;
  $436 = ((($435)) + 24|0);
  $437 = HEAP32[$436>>2]|0;
  $geom = $437;
 }
 STACKTOP = sp;return;
}
function _dSpaceDestroy($space) {
 $space = $space|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $space;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 127]($1);
 STACKTOP = sp;return;
}
function _dSpaceAdd($space,$g) {
 $space = $space|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $space;
 $1 = $g;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 FUNCTION_TABLE_vii[$5 & 127]($2,$6);
 STACKTOP = sp;return;
}
function _dSpaceRemove($space,$g) {
 $space = $space|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $space;
 $1 = $g;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 FUNCTION_TABLE_vii[$5 & 127]($2,$6);
 STACKTOP = sp;return;
}
function _dSpaceCollide($space,$data,$callback) {
 $space = $space|0;
 $data = $data|0;
 $callback = $callback|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $space;
 $1 = $data;
 $2 = $callback;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = $2;
 FUNCTION_TABLE_viii[$6 & 63]($3,$7,$8);
 STACKTOP = sp;return;
}
function __ZN13dxSimpleSpaceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7dxSpaceC2Ev($1);
 $2 = 352;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZL12collideAABBsPfS_P6dxGeomS1_PvPFvS2_S1_S1_E($bounds1,$bounds2,$g1,$g2,$data,$callback) {
 $bounds1 = $bounds1|0;
 $bounds2 = $bounds2|0;
 $g1 = $g1|0;
 $g2 = $g2|0;
 $data = $data|0;
 $callback = $callback|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bounds1;
 $1 = $bounds2;
 $2 = $g1;
 $3 = $g2;
 $4 = $data;
 $5 = $callback;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)==($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   STACKTOP = sp;return;
  }
 }
 $17 = $0;
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = ((($19)) + 4|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $18 > $21;
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = $0;
 $24 = ((($23)) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = +HEAPF32[$26>>2];
 $28 = $25 < $27;
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = $0;
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $1;
 $33 = ((($32)) + 12|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $31 > $34;
 if ($35) {
  STACKTOP = sp;return;
 }
 $36 = $0;
 $37 = ((($36)) + 12|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $1;
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $38 < $41;
 if ($42) {
  STACKTOP = sp;return;
 }
 $43 = $0;
 $44 = ((($43)) + 16|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $1;
 $47 = ((($46)) + 20|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $45 > $48;
 if ($49) {
  STACKTOP = sp;return;
 }
 $50 = $0;
 $51 = ((($50)) + 20|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $1;
 $54 = ((($53)) + 16|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $52 < $55;
 if ($56) {
  STACKTOP = sp;return;
 }
 $57 = $2;
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)!=(0|0);
 if ($61) {
  $62 = $2;
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $2;
  $67 = $3;
  $68 = $1;
  $69 = (FUNCTION_TABLE_iiii[$65 & 63]($66,$67,$68)|0);
  $70 = ($69|0)==(0);
  if ($70) {
   STACKTOP = sp;return;
  }
 }
 $71 = $3;
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($72)) + 8|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0|0);
 if ($75) {
  $76 = $3;
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $3;
  $81 = $2;
  $82 = $0;
  $83 = (FUNCTION_TABLE_iiii[$79 & 63]($80,$81,$82)|0);
  $84 = ($83|0)==(0);
  if ($84) {
   STACKTOP = sp;return;
  }
 }
 $85 = $5;
 $86 = $4;
 $87 = $2;
 $88 = $3;
 FUNCTION_TABLE_viii[$85 & 63]($86,$87,$88);
 STACKTOP = sp;return;
}
function __ZN11dxHashSpaceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7dxSpaceC2Ev($1);
 $2 = 376;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZL9findLevelPf($bounds) {
 $bounds = $bounds|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $level = 0, $q = 0.0, $q2 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $level = sp;
 $1 = $bounds;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 - $6;
 $q = $7;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $10 - $13;
 $q2 = $14;
 $15 = $q2;
 $16 = $q;
 $17 = $15 > $16;
 if ($17) {
  $18 = $q2;
  $q = $18;
 }
 $19 = $1;
 $20 = ((($19)) + 20|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $1;
 $23 = ((($22)) + 16|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $21 - $24;
 $q2 = $25;
 $26 = $q2;
 $27 = $q;
 $28 = $26 > $27;
 if ($28) {
  $29 = $q2;
  $q = $29;
 }
 $30 = $q;
 $31 = +HEAPF32[180>>2];
 $32 = $30 == $31;
 if ($32) {
  $0 = 2147483647;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 } else {
  $33 = $q;
  $34 = $33;
  (+_frexp($34,$level));
  $35 = HEAP32[$level>>2]|0;
  $0 = $35;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function __ZL17getVirtualAddressiiii($level,$x,$y,$z) {
 $level = $level|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $level;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4*1000)|0;
 $6 = $1;
 $7 = ($6*100)|0;
 $8 = (($5) + ($7))|0;
 $9 = $2;
 $10 = ($9*10)|0;
 $11 = (($8) + ($10))|0;
 $12 = $3;
 $13 = (($11) + ($12))|0;
 STACKTOP = sp;return ($13|0);
}
function __ZN7dxSpaceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 524;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function _dBoxBox($p1,$R1,$side1,$p2,$R2,$side2,$normal,$depth,$code,$maxc,$contact,$skip) {
 $p1 = $p1|0;
 $R1 = $R1|0;
 $side1 = $side1|0;
 $p2 = $p2|0;
 $R2 = $R2|0;
 $side2 = $side2|0;
 $normal = $normal|0;
 $depth = $depth|0;
 $code = $code|0;
 $maxc = $maxc|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $1000 = 0, $1001 = 0, $1002 = 0.0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0.0, $1010 = 0.0, $1011 = 0.0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0.0, $1016 = 0.0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0.0, $1020 = 0, $1021 = 0.0, $1022 = 0.0, $1023 = 0, $1024 = 0, $1025 = 0.0, $1026 = 0.0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0.0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0.0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0.0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0.0, $1044 = 0, $1045 = 0.0, $1046 = 0, $1047 = 0, $1048 = 0.0, $1049 = 0.0, $105 = 0.0, $1050 = 0.0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0.0, $1056 = 0.0, $1057 = 0, $1058 = 0, $1059 = 0.0, $106 = 0.0, $1060 = 0.0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0.0, $1067 = 0, $1068 = 0.0, $1069 = 0;
 var $107 = 0.0, $1070 = 0, $1071 = 0.0, $1072 = 0.0, $1073 = 0.0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0.0, $108 = 0.0, $1080 = 0.0, $1081 = 0, $1082 = 0, $1083 = 0.0, $1084 = 0.0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0.0, $1090 = 0.0, $1091 = 0, $1092 = 0.0, $1093 = 0, $1094 = 0, $1095 = 0.0, $1096 = 0.0, $1097 = 0.0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0.0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0.0, $1104 = 0.0;
 var $1105 = 0, $1106 = 0, $1107 = 0.0, $1108 = 0.0, $1109 = 0, $111 = 0.0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0.0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0.0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0.0, $1124 = 0, $1125 = 0.0, $1126 = 0, $1127 = 0, $1128 = 0.0, $1129 = 0.0, $113 = 0.0, $1130 = 0.0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0.0, $1136 = 0.0, $1137 = 0, $1138 = 0, $1139 = 0.0, $114 = 0.0, $1140 = 0.0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0.0, $1147 = 0, $1148 = 0.0, $1149 = 0, $115 = 0.0, $1150 = 0, $1151 = 0.0, $1152 = 0.0, $1153 = 0.0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0.0;
 var $116 = 0.0, $1160 = 0.0, $1161 = 0, $1162 = 0, $1163 = 0.0, $1164 = 0.0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0.0, $1170 = 0.0, $1171 = 0, $1172 = 0.0, $1173 = 0, $1174 = 0, $1175 = 0.0, $1176 = 0.0, $1177 = 0.0;
 var $1178 = 0, $1179 = 0, $118 = 0.0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0.0, $1184 = 0.0, $1185 = 0, $1186 = 0, $1187 = 0.0, $1188 = 0.0, $1189 = 0, $119 = 0.0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0.0, $1200 = 0, $1201 = 0, $1202 = 0.0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0.0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0.0, $1219 = 0, $122 = 0.0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0.0, $1228 = 0.0, $1229 = 0.0, $123 = 0.0, $1230 = 0;
 var $1231 = 0, $1232 = 0.0, $1233 = 0.0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0.0, $1240 = 0.0, $1241 = 0.0, $1242 = 0.0, $1243 = 0, $1244 = 0, $1245 = 0.0, $1246 = 0.0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0.0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0.0, $1254 = 0, $1255 = 0, $1256 = 0.0, $1257 = 0.0, $1258 = 0.0, $1259 = 0, $126 = 0.0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0.0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0.0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0.0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0.0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0.0, $1284 = 0, $1285 = 0.0;
 var $1286 = 0, $1287 = 0, $1288 = 0.0, $1289 = 0.0, $129 = 0.0, $1290 = 0.0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0.0, $1296 = 0.0, $1297 = 0, $1298 = 0, $1299 = 0.0, $13 = 0, $130 = 0.0, $1300 = 0.0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0.0, $1307 = 0, $1308 = 0.0, $1309 = 0, $131 = 0.0, $1310 = 0, $1311 = 0.0, $1312 = 0.0, $1313 = 0.0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0.0, $132 = 0.0, $1320 = 0.0;
 var $1321 = 0, $1322 = 0, $1323 = 0.0, $1324 = 0.0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0.0, $1330 = 0.0, $1331 = 0, $1332 = 0.0, $1333 = 0, $1334 = 0, $1335 = 0.0, $1336 = 0.0, $1337 = 0.0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0.0, $1344 = 0.0, $1345 = 0, $1346 = 0, $1347 = 0.0, $1348 = 0.0, $1349 = 0, $135 = 0.0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0.0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0.0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0.0, $1364 = 0, $1365 = 0.0, $1366 = 0, $1367 = 0, $1368 = 0.0, $1369 = 0.0, $137 = 0.0, $1370 = 0.0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0.0;
 var $1376 = 0.0, $1377 = 0, $1378 = 0, $1379 = 0.0, $138 = 0.0, $1380 = 0.0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0.0, $1387 = 0, $1388 = 0.0, $1389 = 0, $139 = 0.0, $1390 = 0, $1391 = 0.0, $1392 = 0.0, $1393 = 0.0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0.0, $14 = 0.0, $140 = 0.0, $1400 = 0.0, $1401 = 0, $1402 = 0, $1403 = 0.0, $1404 = 0.0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0.0, $1410 = 0.0;
 var $1411 = 0, $1412 = 0.0, $1413 = 0, $1414 = 0, $1415 = 0.0, $1416 = 0.0, $1417 = 0.0, $1418 = 0, $1419 = 0, $142 = 0.0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0.0, $1424 = 0.0, $1425 = 0, $1426 = 0, $1427 = 0.0, $1428 = 0.0, $1429 = 0;
 var $143 = 0.0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0.0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0.0, $1440 = 0, $1441 = 0, $1442 = 0.0, $1443 = 0, $1444 = 0, $1445 = 0, $145 = 0.0, $146 = 0.0;
 var $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0;
 var $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0;
 var $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0;
 var $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0;
 var $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0;
 var $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0;
 var $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0;
 var $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0;
 var $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0;
 var $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0;
 var $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0;
 var $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0;
 var $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0.0, $433 = 0.0, $434 = 0.0;
 var $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0;
 var $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0, $47 = 0.0, $470 = 0.0;
 var $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0;
 var $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0;
 var $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0, $522 = 0.0, $523 = 0.0, $524 = 0.0;
 var $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0, $54 = 0, $540 = 0, $541 = 0.0, $542 = 0.0;
 var $543 = 0.0, $544 = 0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0.0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0.0, $560 = 0.0;
 var $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0;
 var $58 = 0, $580 = 0, $581 = 0.0, $582 = 0.0, $583 = 0.0, $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0.0, $589 = 0.0, $59 = 0.0, $590 = 0.0, $591 = 0.0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0.0;
 var $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0.0, $612 = 0.0, $613 = 0, $614 = 0.0;
 var $615 = 0.0, $616 = 0.0, $617 = 0, $618 = 0.0, $619 = 0.0, $62 = 0, $620 = 0.0, $621 = 0.0, $622 = 0, $623 = 0, $624 = 0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0, $629 = 0.0, $63 = 0.0, $630 = 0.0, $631 = 0.0, $632 = 0.0;
 var $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0;
 var $651 = 0.0, $652 = 0.0, $653 = 0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0, $669 = 0.0;
 var $67 = 0.0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0, $682 = 0.0, $683 = 0.0, $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0.0;
 var $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0.0, $693 = 0.0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0.0, $703 = 0.0, $704 = 0.0;
 var $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0.0, $71 = 0.0, $710 = 0.0, $711 = 0.0, $712 = 0.0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0.0;
 var $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0, $727 = 0.0, $728 = 0.0, $729 = 0.0, $73 = 0, $730 = 0.0, $731 = 0.0, $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0.0;
 var $741 = 0, $742 = 0.0, $743 = 0.0, $744 = 0.0, $745 = 0.0, $746 = 0.0, $747 = 0, $748 = 0.0, $749 = 0.0, $75 = 0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0, $755 = 0.0, $756 = 0.0, $757 = 0.0, $758 = 0.0, $759 = 0;
 var $76 = 0.0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0, $764 = 0.0, $765 = 0.0, $766 = 0.0, $767 = 0.0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0.0, $776 = 0.0, $777 = 0.0;
 var $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0.0, $781 = 0.0, $782 = 0.0, $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0.0, $79 = 0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0.0, $794 = 0.0, $795 = 0.0;
 var $796 = 0.0, $797 = 0.0, $798 = 0.0, $799 = 0, $8 = 0, $80 = 0, $800 = 0.0, $801 = 0.0, $802 = 0.0, $803 = 0.0, $804 = 0.0, $805 = 0.0, $806 = 0.0, $807 = 0.0, $808 = 0.0, $809 = 0.0, $81 = 0.0, $810 = 0.0, $811 = 0.0, $812 = 0.0;
 var $813 = 0.0, $814 = 0, $815 = 0.0, $816 = 0.0, $817 = 0.0, $818 = 0.0, $819 = 0.0, $82 = 0, $820 = 0, $821 = 0.0, $822 = 0.0, $823 = 0.0, $824 = 0.0, $825 = 0.0, $826 = 0.0, $827 = 0.0, $828 = 0.0, $829 = 0, $83 = 0, $830 = 0.0;
 var $831 = 0.0, $832 = 0, $833 = 0, $834 = 0.0, $835 = 0.0, $836 = 0.0, $837 = 0.0, $838 = 0.0, $839 = 0.0, $84 = 0, $840 = 0.0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0.0, $846 = 0.0, $847 = 0.0, $848 = 0.0, $849 = 0.0;
 var $85 = 0.0, $850 = 0.0, $851 = 0.0, $852 = 0.0, $853 = 0.0, $854 = 0.0, $855 = 0.0, $856 = 0.0, $857 = 0.0, $858 = 0.0, $859 = 0.0, $86 = 0, $860 = 0.0, $861 = 0.0, $862 = 0.0, $863 = 0.0, $864 = 0.0, $865 = 0.0, $866 = 0.0, $867 = 0.0;
 var $868 = 0.0, $869 = 0.0, $87 = 0, $870 = 0.0, $871 = 0.0, $872 = 0, $873 = 0.0, $874 = 0.0, $875 = 0.0, $876 = 0.0, $877 = 0.0, $878 = 0.0, $879 = 0.0, $88 = 0, $880 = 0.0, $881 = 0.0, $882 = 0.0, $883 = 0.0, $884 = 0.0, $885 = 0.0;
 var $886 = 0.0, $887 = 0, $888 = 0.0, $889 = 0.0, $89 = 0, $890 = 0.0, $891 = 0.0, $892 = 0.0, $893 = 0, $894 = 0.0, $895 = 0.0, $896 = 0.0, $897 = 0.0, $898 = 0.0, $899 = 0.0, $9 = 0, $90 = 0.0, $900 = 0.0, $901 = 0.0, $902 = 0;
 var $903 = 0.0, $904 = 0.0, $905 = 0, $906 = 0, $907 = 0.0, $908 = 0.0, $909 = 0.0, $91 = 0, $910 = 0.0, $911 = 0.0, $912 = 0.0, $913 = 0.0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0.0, $919 = 0.0, $92 = 0, $920 = 0.0;
 var $921 = 0.0, $922 = 0.0, $923 = 0.0, $924 = 0.0, $925 = 0.0, $926 = 0.0, $927 = 0.0, $928 = 0.0, $929 = 0.0, $93 = 0, $930 = 0.0, $931 = 0.0, $932 = 0.0, $933 = 0.0, $934 = 0.0, $935 = 0.0, $936 = 0.0, $937 = 0.0, $938 = 0.0, $939 = 0.0;
 var $94 = 0, $940 = 0.0, $941 = 0.0, $942 = 0.0, $943 = 0.0, $944 = 0.0, $945 = 0, $946 = 0.0, $947 = 0.0, $948 = 0.0, $949 = 0.0, $95 = 0.0, $950 = 0.0, $951 = 0.0, $952 = 0.0, $953 = 0.0, $954 = 0.0, $955 = 0.0, $956 = 0.0, $957 = 0.0;
 var $958 = 0.0, $959 = 0.0, $96 = 0.0, $960 = 0, $961 = 0.0, $962 = 0.0, $963 = 0.0, $964 = 0.0, $965 = 0.0, $966 = 0, $967 = 0.0, $968 = 0.0, $969 = 0.0, $97 = 0.0, $970 = 0.0, $971 = 0.0, $972 = 0.0, $973 = 0.0, $974 = 0.0, $975 = 0;
 var $976 = 0.0, $977 = 0.0, $978 = 0, $979 = 0, $98 = 0.0, $980 = 0.0, $981 = 0.0, $982 = 0.0, $983 = 0.0, $984 = 0.0, $985 = 0.0, $986 = 0.0, $987 = 0, $988 = 0, $989 = 0, $99 = 0.0, $990 = 0, $991 = 0, $992 = 0, $993 = 0.0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0.0, $998 = 0, $999 = 0, $A1 = 0.0, $A2 = 0.0, $A3 = 0.0, $B1 = 0.0, $B2 = 0.0, $B3 = 0.0, $Q11 = 0.0, $Q12 = 0.0, $Q13 = 0.0, $Q21 = 0.0, $Q22 = 0.0, $Q23 = 0.0, $Q31 = 0.0, $Q32 = 0.0;
 var $Q33 = 0.0, $R11 = 0.0, $R12 = 0.0, $R13 = 0.0, $R21 = 0.0, $R22 = 0.0, $R23 = 0.0, $R31 = 0.0, $R32 = 0.0, $R33 = 0.0, $alpha = 0, $beta = 0, $i = 0, $invert_normal = 0, $l = 0.0, $normalC = 0, $normalR = 0, $p = 0, $pa = 0, $pb = 0;
 var $pp = 0, $s = 0.0, $s2 = 0.0, $sign = 0.0, $sign1 = 0.0, $sign2 = 0.0, $ua = 0, $ub = 0, $vertex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp + 256|0;
 $pp = sp + 240|0;
 $normalC = sp + 224|0;
 $pa = sp + 88|0;
 $pb = sp + 64|0;
 $alpha = sp + 60|0;
 $beta = sp + 56|0;
 $ua = sp + 40|0;
 $ub = sp + 24|0;
 $vertex = sp + 8|0;
 $1 = $p1;
 $2 = $R1;
 $3 = $side1;
 $4 = $p2;
 $5 = $R2;
 $6 = $side2;
 $7 = $normal;
 $8 = $depth;
 $9 = $code;
 $10 = $maxc;
 $11 = $contact;
 $12 = $skip;
 $normalR = 0;
 $13 = $4;
 $14 = +HEAPF32[$13>>2];
 $15 = $1;
 $16 = +HEAPF32[$15>>2];
 $17 = $14 - $16;
 HEAPF32[$p>>2] = $17;
 $18 = $4;
 $19 = ((($18)) + 4|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $1;
 $22 = ((($21)) + 4|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $20 - $23;
 $25 = ((($p)) + 4|0);
 HEAPF32[$25>>2] = $24;
 $26 = $4;
 $27 = ((($26)) + 8|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $1;
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $28 - $31;
 $33 = ((($p)) + 8|0);
 HEAPF32[$33>>2] = $32;
 $34 = $2;
 _dMULTIPLY1_331($pp,$34,$p);
 $35 = $3;
 $36 = +HEAPF32[$35>>2];
 $37 = $36 * 0.5;
 $A1 = $37;
 $38 = $3;
 $39 = ((($38)) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $40 * 0.5;
 $A2 = $41;
 $42 = $3;
 $43 = ((($42)) + 8|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $44 * 0.5;
 $A3 = $45;
 $46 = $6;
 $47 = +HEAPF32[$46>>2];
 $48 = $47 * 0.5;
 $B1 = $48;
 $49 = $6;
 $50 = ((($49)) + 4|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $51 * 0.5;
 $B2 = $52;
 $53 = $6;
 $54 = ((($53)) + 8|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $55 * 0.5;
 $B3 = $56;
 $57 = $2;
 $58 = $5;
 $59 = (+_dDOT44($57,$58));
 $R11 = $59;
 $60 = $2;
 $61 = $5;
 $62 = ((($61)) + 4|0);
 $63 = (+_dDOT44($60,$62));
 $R12 = $63;
 $64 = $2;
 $65 = $5;
 $66 = ((($65)) + 8|0);
 $67 = (+_dDOT44($64,$66));
 $R13 = $67;
 $68 = $2;
 $69 = ((($68)) + 4|0);
 $70 = $5;
 $71 = (+_dDOT44($69,$70));
 $R21 = $71;
 $72 = $2;
 $73 = ((($72)) + 4|0);
 $74 = $5;
 $75 = ((($74)) + 4|0);
 $76 = (+_dDOT44($73,$75));
 $R22 = $76;
 $77 = $2;
 $78 = ((($77)) + 4|0);
 $79 = $5;
 $80 = ((($79)) + 8|0);
 $81 = (+_dDOT44($78,$80));
 $R23 = $81;
 $82 = $2;
 $83 = ((($82)) + 8|0);
 $84 = $5;
 $85 = (+_dDOT44($83,$84));
 $R31 = $85;
 $86 = $2;
 $87 = ((($86)) + 8|0);
 $88 = $5;
 $89 = ((($88)) + 4|0);
 $90 = (+_dDOT44($87,$89));
 $R32 = $90;
 $91 = $2;
 $92 = ((($91)) + 8|0);
 $93 = $5;
 $94 = ((($93)) + 8|0);
 $95 = (+_dDOT44($92,$94));
 $R33 = $95;
 $96 = $R11;
 $97 = $96;
 $98 = (+Math_abs((+$97)));
 $99 = $98;
 $Q11 = $99;
 $100 = $R12;
 $101 = $100;
 $102 = (+Math_abs((+$101)));
 $103 = $102;
 $Q12 = $103;
 $104 = $R13;
 $105 = $104;
 $106 = (+Math_abs((+$105)));
 $107 = $106;
 $Q13 = $107;
 $108 = $R21;
 $109 = $108;
 $110 = (+Math_abs((+$109)));
 $111 = $110;
 $Q21 = $111;
 $112 = $R22;
 $113 = $112;
 $114 = (+Math_abs((+$113)));
 $115 = $114;
 $Q22 = $115;
 $116 = $R23;
 $117 = $116;
 $118 = (+Math_abs((+$117)));
 $119 = $118;
 $Q23 = $119;
 $120 = $R31;
 $121 = $120;
 $122 = (+Math_abs((+$121)));
 $123 = $122;
 $Q31 = $123;
 $124 = $R32;
 $125 = $124;
 $126 = (+Math_abs((+$125)));
 $127 = $126;
 $Q32 = $127;
 $128 = $R33;
 $129 = $128;
 $130 = (+Math_abs((+$129)));
 $131 = $130;
 $Q33 = $131;
 $132 = +HEAPF32[180>>2];
 $133 = -$132;
 $s = $133;
 $invert_normal = 0;
 $134 = $9;
 HEAP32[$134>>2] = 0;
 $135 = +HEAPF32[$pp>>2];
 $136 = $135;
 $137 = (+Math_abs((+$136)));
 $138 = $137;
 $139 = $A1;
 $140 = $B1;
 $141 = $Q11;
 $142 = $140 * $141;
 $143 = $139 + $142;
 $144 = $B2;
 $145 = $Q12;
 $146 = $144 * $145;
 $147 = $143 + $146;
 $148 = $B3;
 $149 = $Q13;
 $150 = $148 * $149;
 $151 = $147 + $150;
 $152 = $138 - $151;
 $s2 = $152;
 $153 = $s2;
 $154 = $153 > 0.0;
 if ($154) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $155 = $s2;
 $156 = $s;
 $157 = $155 > $156;
 if ($157) {
  $158 = $s2;
  $s = $158;
  $159 = $2;
  $normalR = $159;
  $160 = +HEAPF32[$pp>>2];
  $161 = $160 < 0.0;
  $162 = $161&1;
  $invert_normal = $162;
  $163 = $9;
  HEAP32[$163>>2] = 1;
 }
 $164 = ((($pp)) + 4|0);
 $165 = +HEAPF32[$164>>2];
 $166 = $165;
 $167 = (+Math_abs((+$166)));
 $168 = $167;
 $169 = $A2;
 $170 = $B1;
 $171 = $Q21;
 $172 = $170 * $171;
 $173 = $169 + $172;
 $174 = $B2;
 $175 = $Q22;
 $176 = $174 * $175;
 $177 = $173 + $176;
 $178 = $B3;
 $179 = $Q23;
 $180 = $178 * $179;
 $181 = $177 + $180;
 $182 = $168 - $181;
 $s2 = $182;
 $183 = $s2;
 $184 = $183 > 0.0;
 if ($184) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $185 = $s2;
 $186 = $s;
 $187 = $185 > $186;
 if ($187) {
  $188 = $s2;
  $s = $188;
  $189 = $2;
  $190 = ((($189)) + 4|0);
  $normalR = $190;
  $191 = ((($pp)) + 4|0);
  $192 = +HEAPF32[$191>>2];
  $193 = $192 < 0.0;
  $194 = $193&1;
  $invert_normal = $194;
  $195 = $9;
  HEAP32[$195>>2] = 2;
 }
 $196 = ((($pp)) + 8|0);
 $197 = +HEAPF32[$196>>2];
 $198 = $197;
 $199 = (+Math_abs((+$198)));
 $200 = $199;
 $201 = $A3;
 $202 = $B1;
 $203 = $Q31;
 $204 = $202 * $203;
 $205 = $201 + $204;
 $206 = $B2;
 $207 = $Q32;
 $208 = $206 * $207;
 $209 = $205 + $208;
 $210 = $B3;
 $211 = $Q33;
 $212 = $210 * $211;
 $213 = $209 + $212;
 $214 = $200 - $213;
 $s2 = $214;
 $215 = $s2;
 $216 = $215 > 0.0;
 if ($216) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $217 = $s2;
 $218 = $s;
 $219 = $217 > $218;
 if ($219) {
  $220 = $s2;
  $s = $220;
  $221 = $2;
  $222 = ((($221)) + 8|0);
  $normalR = $222;
  $223 = ((($pp)) + 8|0);
  $224 = +HEAPF32[$223>>2];
  $225 = $224 < 0.0;
  $226 = $225&1;
  $invert_normal = $226;
  $227 = $9;
  HEAP32[$227>>2] = 3;
 }
 $228 = $5;
 $229 = (+_dDOT41($228,$p));
 $230 = $229;
 $231 = (+Math_abs((+$230)));
 $232 = $231;
 $233 = $A1;
 $234 = $Q11;
 $235 = $233 * $234;
 $236 = $A2;
 $237 = $Q21;
 $238 = $236 * $237;
 $239 = $235 + $238;
 $240 = $A3;
 $241 = $Q31;
 $242 = $240 * $241;
 $243 = $239 + $242;
 $244 = $B1;
 $245 = $243 + $244;
 $246 = $232 - $245;
 $s2 = $246;
 $247 = $s2;
 $248 = $247 > 0.0;
 if ($248) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $249 = $s2;
 $250 = $s;
 $251 = $249 > $250;
 if ($251) {
  $252 = $s2;
  $s = $252;
  $253 = $5;
  $normalR = $253;
  $254 = $5;
  $255 = (+_dDOT41($254,$p));
  $256 = $255 < 0.0;
  $257 = $256&1;
  $invert_normal = $257;
  $258 = $9;
  HEAP32[$258>>2] = 4;
 }
 $259 = $5;
 $260 = ((($259)) + 4|0);
 $261 = (+_dDOT41($260,$p));
 $262 = $261;
 $263 = (+Math_abs((+$262)));
 $264 = $263;
 $265 = $A1;
 $266 = $Q12;
 $267 = $265 * $266;
 $268 = $A2;
 $269 = $Q22;
 $270 = $268 * $269;
 $271 = $267 + $270;
 $272 = $A3;
 $273 = $Q32;
 $274 = $272 * $273;
 $275 = $271 + $274;
 $276 = $B2;
 $277 = $275 + $276;
 $278 = $264 - $277;
 $s2 = $278;
 $279 = $s2;
 $280 = $279 > 0.0;
 if ($280) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $281 = $s2;
 $282 = $s;
 $283 = $281 > $282;
 if ($283) {
  $284 = $s2;
  $s = $284;
  $285 = $5;
  $286 = ((($285)) + 4|0);
  $normalR = $286;
  $287 = $5;
  $288 = ((($287)) + 4|0);
  $289 = (+_dDOT41($288,$p));
  $290 = $289 < 0.0;
  $291 = $290&1;
  $invert_normal = $291;
  $292 = $9;
  HEAP32[$292>>2] = 5;
 }
 $293 = $5;
 $294 = ((($293)) + 8|0);
 $295 = (+_dDOT41($294,$p));
 $296 = $295;
 $297 = (+Math_abs((+$296)));
 $298 = $297;
 $299 = $A1;
 $300 = $Q13;
 $301 = $299 * $300;
 $302 = $A2;
 $303 = $Q23;
 $304 = $302 * $303;
 $305 = $301 + $304;
 $306 = $A3;
 $307 = $Q33;
 $308 = $306 * $307;
 $309 = $305 + $308;
 $310 = $B3;
 $311 = $309 + $310;
 $312 = $298 - $311;
 $s2 = $312;
 $313 = $s2;
 $314 = $313 > 0.0;
 if ($314) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $315 = $s2;
 $316 = $s;
 $317 = $315 > $316;
 if ($317) {
  $318 = $s2;
  $s = $318;
  $319 = $5;
  $320 = ((($319)) + 8|0);
  $normalR = $320;
  $321 = $5;
  $322 = ((($321)) + 8|0);
  $323 = (+_dDOT41($322,$p));
  $324 = $323 < 0.0;
  $325 = $324&1;
  $invert_normal = $325;
  $326 = $9;
  HEAP32[$326>>2] = 6;
 }
 $327 = ((($pp)) + 8|0);
 $328 = +HEAPF32[$327>>2];
 $329 = $R21;
 $330 = $328 * $329;
 $331 = ((($pp)) + 4|0);
 $332 = +HEAPF32[$331>>2];
 $333 = $R31;
 $334 = $332 * $333;
 $335 = $330 - $334;
 $336 = $335;
 $337 = (+Math_abs((+$336)));
 $338 = $337;
 $339 = $A2;
 $340 = $Q31;
 $341 = $339 * $340;
 $342 = $A3;
 $343 = $Q21;
 $344 = $342 * $343;
 $345 = $341 + $344;
 $346 = $B2;
 $347 = $Q13;
 $348 = $346 * $347;
 $349 = $345 + $348;
 $350 = $B3;
 $351 = $Q12;
 $352 = $350 * $351;
 $353 = $349 + $352;
 $354 = $338 - $353;
 $s2 = $354;
 $355 = $s2;
 $356 = $355 > 0.0;
 if ($356) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $357 = $R31;
 $358 = -$357;
 $359 = $R31;
 $360 = -$359;
 $361 = $358 * $360;
 $362 = 0.0 + $361;
 $363 = $R21;
 $364 = $R21;
 $365 = $363 * $364;
 $366 = $362 + $365;
 $367 = $366;
 $368 = (+Math_sqrt((+$367)));
 $369 = $368;
 $l = $369;
 $370 = $l;
 $371 = $370 > 0.0;
 if ($371) {
  $372 = $l;
  $373 = $s2;
  $374 = $373 / $372;
  $s2 = $374;
  $375 = $s2;
  $376 = $s;
  $377 = $375 > $376;
  if ($377) {
   $378 = $s2;
   $s = $378;
   $normalR = 0;
   $379 = $l;
   $380 = 0.0 / $379;
   HEAPF32[$normalC>>2] = $380;
   $381 = $R31;
   $382 = -$381;
   $383 = $l;
   $384 = $382 / $383;
   $385 = ((($normalC)) + 4|0);
   HEAPF32[$385>>2] = $384;
   $386 = $R21;
   $387 = $l;
   $388 = $386 / $387;
   $389 = ((($normalC)) + 8|0);
   HEAPF32[$389>>2] = $388;
   $390 = ((($pp)) + 8|0);
   $391 = +HEAPF32[$390>>2];
   $392 = $R21;
   $393 = $391 * $392;
   $394 = ((($pp)) + 4|0);
   $395 = +HEAPF32[$394>>2];
   $396 = $R31;
   $397 = $395 * $396;
   $398 = $393 - $397;
   $399 = $398 < 0.0;
   $400 = $399&1;
   $invert_normal = $400;
   $401 = $9;
   HEAP32[$401>>2] = 7;
  }
 }
 $402 = ((($pp)) + 8|0);
 $403 = +HEAPF32[$402>>2];
 $404 = $R22;
 $405 = $403 * $404;
 $406 = ((($pp)) + 4|0);
 $407 = +HEAPF32[$406>>2];
 $408 = $R32;
 $409 = $407 * $408;
 $410 = $405 - $409;
 $411 = $410;
 $412 = (+Math_abs((+$411)));
 $413 = $412;
 $414 = $A2;
 $415 = $Q32;
 $416 = $414 * $415;
 $417 = $A3;
 $418 = $Q22;
 $419 = $417 * $418;
 $420 = $416 + $419;
 $421 = $B1;
 $422 = $Q13;
 $423 = $421 * $422;
 $424 = $420 + $423;
 $425 = $B3;
 $426 = $Q11;
 $427 = $425 * $426;
 $428 = $424 + $427;
 $429 = $413 - $428;
 $s2 = $429;
 $430 = $s2;
 $431 = $430 > 0.0;
 if ($431) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $432 = $R32;
 $433 = -$432;
 $434 = $R32;
 $435 = -$434;
 $436 = $433 * $435;
 $437 = 0.0 + $436;
 $438 = $R22;
 $439 = $R22;
 $440 = $438 * $439;
 $441 = $437 + $440;
 $442 = $441;
 $443 = (+Math_sqrt((+$442)));
 $444 = $443;
 $l = $444;
 $445 = $l;
 $446 = $445 > 0.0;
 if ($446) {
  $447 = $l;
  $448 = $s2;
  $449 = $448 / $447;
  $s2 = $449;
  $450 = $s2;
  $451 = $s;
  $452 = $450 > $451;
  if ($452) {
   $453 = $s2;
   $s = $453;
   $normalR = 0;
   $454 = $l;
   $455 = 0.0 / $454;
   HEAPF32[$normalC>>2] = $455;
   $456 = $R32;
   $457 = -$456;
   $458 = $l;
   $459 = $457 / $458;
   $460 = ((($normalC)) + 4|0);
   HEAPF32[$460>>2] = $459;
   $461 = $R22;
   $462 = $l;
   $463 = $461 / $462;
   $464 = ((($normalC)) + 8|0);
   HEAPF32[$464>>2] = $463;
   $465 = ((($pp)) + 8|0);
   $466 = +HEAPF32[$465>>2];
   $467 = $R22;
   $468 = $466 * $467;
   $469 = ((($pp)) + 4|0);
   $470 = +HEAPF32[$469>>2];
   $471 = $R32;
   $472 = $470 * $471;
   $473 = $468 - $472;
   $474 = $473 < 0.0;
   $475 = $474&1;
   $invert_normal = $475;
   $476 = $9;
   HEAP32[$476>>2] = 8;
  }
 }
 $477 = ((($pp)) + 8|0);
 $478 = +HEAPF32[$477>>2];
 $479 = $R23;
 $480 = $478 * $479;
 $481 = ((($pp)) + 4|0);
 $482 = +HEAPF32[$481>>2];
 $483 = $R33;
 $484 = $482 * $483;
 $485 = $480 - $484;
 $486 = $485;
 $487 = (+Math_abs((+$486)));
 $488 = $487;
 $489 = $A2;
 $490 = $Q33;
 $491 = $489 * $490;
 $492 = $A3;
 $493 = $Q23;
 $494 = $492 * $493;
 $495 = $491 + $494;
 $496 = $B1;
 $497 = $Q12;
 $498 = $496 * $497;
 $499 = $495 + $498;
 $500 = $B2;
 $501 = $Q11;
 $502 = $500 * $501;
 $503 = $499 + $502;
 $504 = $488 - $503;
 $s2 = $504;
 $505 = $s2;
 $506 = $505 > 0.0;
 if ($506) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $507 = $R33;
 $508 = -$507;
 $509 = $R33;
 $510 = -$509;
 $511 = $508 * $510;
 $512 = 0.0 + $511;
 $513 = $R23;
 $514 = $R23;
 $515 = $513 * $514;
 $516 = $512 + $515;
 $517 = $516;
 $518 = (+Math_sqrt((+$517)));
 $519 = $518;
 $l = $519;
 $520 = $l;
 $521 = $520 > 0.0;
 if ($521) {
  $522 = $l;
  $523 = $s2;
  $524 = $523 / $522;
  $s2 = $524;
  $525 = $s2;
  $526 = $s;
  $527 = $525 > $526;
  if ($527) {
   $528 = $s2;
   $s = $528;
   $normalR = 0;
   $529 = $l;
   $530 = 0.0 / $529;
   HEAPF32[$normalC>>2] = $530;
   $531 = $R33;
   $532 = -$531;
   $533 = $l;
   $534 = $532 / $533;
   $535 = ((($normalC)) + 4|0);
   HEAPF32[$535>>2] = $534;
   $536 = $R23;
   $537 = $l;
   $538 = $536 / $537;
   $539 = ((($normalC)) + 8|0);
   HEAPF32[$539>>2] = $538;
   $540 = ((($pp)) + 8|0);
   $541 = +HEAPF32[$540>>2];
   $542 = $R23;
   $543 = $541 * $542;
   $544 = ((($pp)) + 4|0);
   $545 = +HEAPF32[$544>>2];
   $546 = $R33;
   $547 = $545 * $546;
   $548 = $543 - $547;
   $549 = $548 < 0.0;
   $550 = $549&1;
   $invert_normal = $550;
   $551 = $9;
   HEAP32[$551>>2] = 9;
  }
 }
 $552 = +HEAPF32[$pp>>2];
 $553 = $R31;
 $554 = $552 * $553;
 $555 = ((($pp)) + 8|0);
 $556 = +HEAPF32[$555>>2];
 $557 = $R11;
 $558 = $556 * $557;
 $559 = $554 - $558;
 $560 = $559;
 $561 = (+Math_abs((+$560)));
 $562 = $561;
 $563 = $A1;
 $564 = $Q31;
 $565 = $563 * $564;
 $566 = $A3;
 $567 = $Q11;
 $568 = $566 * $567;
 $569 = $565 + $568;
 $570 = $B2;
 $571 = $Q23;
 $572 = $570 * $571;
 $573 = $569 + $572;
 $574 = $B3;
 $575 = $Q22;
 $576 = $574 * $575;
 $577 = $573 + $576;
 $578 = $562 - $577;
 $s2 = $578;
 $579 = $s2;
 $580 = $579 > 0.0;
 if ($580) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $581 = $R31;
 $582 = $R31;
 $583 = $581 * $582;
 $584 = $583 + 0.0;
 $585 = $R11;
 $586 = -$585;
 $587 = $R11;
 $588 = -$587;
 $589 = $586 * $588;
 $590 = $584 + $589;
 $591 = $590;
 $592 = (+Math_sqrt((+$591)));
 $593 = $592;
 $l = $593;
 $594 = $l;
 $595 = $594 > 0.0;
 do {
  if ($595) {
   $596 = $l;
   $597 = $s2;
   $598 = $597 / $596;
   $s2 = $598;
   $599 = $s2;
   $600 = $s;
   $601 = $599 > $600;
   if (!($601)) {
    break;
   }
   $602 = $s2;
   $s = $602;
   $normalR = 0;
   $603 = $R31;
   $604 = $l;
   $605 = $603 / $604;
   HEAPF32[$normalC>>2] = $605;
   $606 = $l;
   $607 = 0.0 / $606;
   $608 = ((($normalC)) + 4|0);
   HEAPF32[$608>>2] = $607;
   $609 = $R11;
   $610 = -$609;
   $611 = $l;
   $612 = $610 / $611;
   $613 = ((($normalC)) + 8|0);
   HEAPF32[$613>>2] = $612;
   $614 = +HEAPF32[$pp>>2];
   $615 = $R31;
   $616 = $614 * $615;
   $617 = ((($pp)) + 8|0);
   $618 = +HEAPF32[$617>>2];
   $619 = $R11;
   $620 = $618 * $619;
   $621 = $616 - $620;
   $622 = $621 < 0.0;
   $623 = $622&1;
   $invert_normal = $623;
   $624 = $9;
   HEAP32[$624>>2] = 10;
  }
 } while(0);
 $625 = +HEAPF32[$pp>>2];
 $626 = $R32;
 $627 = $625 * $626;
 $628 = ((($pp)) + 8|0);
 $629 = +HEAPF32[$628>>2];
 $630 = $R12;
 $631 = $629 * $630;
 $632 = $627 - $631;
 $633 = $632;
 $634 = (+Math_abs((+$633)));
 $635 = $634;
 $636 = $A1;
 $637 = $Q32;
 $638 = $636 * $637;
 $639 = $A3;
 $640 = $Q12;
 $641 = $639 * $640;
 $642 = $638 + $641;
 $643 = $B1;
 $644 = $Q23;
 $645 = $643 * $644;
 $646 = $642 + $645;
 $647 = $B3;
 $648 = $Q21;
 $649 = $647 * $648;
 $650 = $646 + $649;
 $651 = $635 - $650;
 $s2 = $651;
 $652 = $s2;
 $653 = $652 > 0.0;
 if ($653) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $654 = $R32;
 $655 = $R32;
 $656 = $654 * $655;
 $657 = $656 + 0.0;
 $658 = $R12;
 $659 = -$658;
 $660 = $R12;
 $661 = -$660;
 $662 = $659 * $661;
 $663 = $657 + $662;
 $664 = $663;
 $665 = (+Math_sqrt((+$664)));
 $666 = $665;
 $l = $666;
 $667 = $l;
 $668 = $667 > 0.0;
 do {
  if ($668) {
   $669 = $l;
   $670 = $s2;
   $671 = $670 / $669;
   $s2 = $671;
   $672 = $s2;
   $673 = $s;
   $674 = $672 > $673;
   if (!($674)) {
    break;
   }
   $675 = $s2;
   $s = $675;
   $normalR = 0;
   $676 = $R32;
   $677 = $l;
   $678 = $676 / $677;
   HEAPF32[$normalC>>2] = $678;
   $679 = $l;
   $680 = 0.0 / $679;
   $681 = ((($normalC)) + 4|0);
   HEAPF32[$681>>2] = $680;
   $682 = $R12;
   $683 = -$682;
   $684 = $l;
   $685 = $683 / $684;
   $686 = ((($normalC)) + 8|0);
   HEAPF32[$686>>2] = $685;
   $687 = +HEAPF32[$pp>>2];
   $688 = $R32;
   $689 = $687 * $688;
   $690 = ((($pp)) + 8|0);
   $691 = +HEAPF32[$690>>2];
   $692 = $R12;
   $693 = $691 * $692;
   $694 = $689 - $693;
   $695 = $694 < 0.0;
   $696 = $695&1;
   $invert_normal = $696;
   $697 = $9;
   HEAP32[$697>>2] = 11;
  }
 } while(0);
 $698 = +HEAPF32[$pp>>2];
 $699 = $R33;
 $700 = $698 * $699;
 $701 = ((($pp)) + 8|0);
 $702 = +HEAPF32[$701>>2];
 $703 = $R13;
 $704 = $702 * $703;
 $705 = $700 - $704;
 $706 = $705;
 $707 = (+Math_abs((+$706)));
 $708 = $707;
 $709 = $A1;
 $710 = $Q33;
 $711 = $709 * $710;
 $712 = $A3;
 $713 = $Q13;
 $714 = $712 * $713;
 $715 = $711 + $714;
 $716 = $B1;
 $717 = $Q22;
 $718 = $716 * $717;
 $719 = $715 + $718;
 $720 = $B2;
 $721 = $Q21;
 $722 = $720 * $721;
 $723 = $719 + $722;
 $724 = $708 - $723;
 $s2 = $724;
 $725 = $s2;
 $726 = $725 > 0.0;
 if ($726) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $727 = $R33;
 $728 = $R33;
 $729 = $727 * $728;
 $730 = $729 + 0.0;
 $731 = $R13;
 $732 = -$731;
 $733 = $R13;
 $734 = -$733;
 $735 = $732 * $734;
 $736 = $730 + $735;
 $737 = $736;
 $738 = (+Math_sqrt((+$737)));
 $739 = $738;
 $l = $739;
 $740 = $l;
 $741 = $740 > 0.0;
 do {
  if ($741) {
   $742 = $l;
   $743 = $s2;
   $744 = $743 / $742;
   $s2 = $744;
   $745 = $s2;
   $746 = $s;
   $747 = $745 > $746;
   if (!($747)) {
    break;
   }
   $748 = $s2;
   $s = $748;
   $normalR = 0;
   $749 = $R33;
   $750 = $l;
   $751 = $749 / $750;
   HEAPF32[$normalC>>2] = $751;
   $752 = $l;
   $753 = 0.0 / $752;
   $754 = ((($normalC)) + 4|0);
   HEAPF32[$754>>2] = $753;
   $755 = $R13;
   $756 = -$755;
   $757 = $l;
   $758 = $756 / $757;
   $759 = ((($normalC)) + 8|0);
   HEAPF32[$759>>2] = $758;
   $760 = +HEAPF32[$pp>>2];
   $761 = $R33;
   $762 = $760 * $761;
   $763 = ((($pp)) + 8|0);
   $764 = +HEAPF32[$763>>2];
   $765 = $R13;
   $766 = $764 * $765;
   $767 = $762 - $766;
   $768 = $767 < 0.0;
   $769 = $768&1;
   $invert_normal = $769;
   $770 = $9;
   HEAP32[$770>>2] = 12;
  }
 } while(0);
 $771 = ((($pp)) + 4|0);
 $772 = +HEAPF32[$771>>2];
 $773 = $R11;
 $774 = $772 * $773;
 $775 = +HEAPF32[$pp>>2];
 $776 = $R21;
 $777 = $775 * $776;
 $778 = $774 - $777;
 $779 = $778;
 $780 = (+Math_abs((+$779)));
 $781 = $780;
 $782 = $A1;
 $783 = $Q21;
 $784 = $782 * $783;
 $785 = $A2;
 $786 = $Q11;
 $787 = $785 * $786;
 $788 = $784 + $787;
 $789 = $B2;
 $790 = $Q33;
 $791 = $789 * $790;
 $792 = $788 + $791;
 $793 = $B3;
 $794 = $Q32;
 $795 = $793 * $794;
 $796 = $792 + $795;
 $797 = $781 - $796;
 $s2 = $797;
 $798 = $s2;
 $799 = $798 > 0.0;
 if ($799) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $800 = $R21;
 $801 = -$800;
 $802 = $R21;
 $803 = -$802;
 $804 = $801 * $803;
 $805 = $R11;
 $806 = $R11;
 $807 = $805 * $806;
 $808 = $804 + $807;
 $809 = $808 + 0.0;
 $810 = $809;
 $811 = (+Math_sqrt((+$810)));
 $812 = $811;
 $l = $812;
 $813 = $l;
 $814 = $813 > 0.0;
 do {
  if ($814) {
   $815 = $l;
   $816 = $s2;
   $817 = $816 / $815;
   $s2 = $817;
   $818 = $s2;
   $819 = $s;
   $820 = $818 > $819;
   if (!($820)) {
    break;
   }
   $821 = $s2;
   $s = $821;
   $normalR = 0;
   $822 = $R21;
   $823 = -$822;
   $824 = $l;
   $825 = $823 / $824;
   HEAPF32[$normalC>>2] = $825;
   $826 = $R11;
   $827 = $l;
   $828 = $826 / $827;
   $829 = ((($normalC)) + 4|0);
   HEAPF32[$829>>2] = $828;
   $830 = $l;
   $831 = 0.0 / $830;
   $832 = ((($normalC)) + 8|0);
   HEAPF32[$832>>2] = $831;
   $833 = ((($pp)) + 4|0);
   $834 = +HEAPF32[$833>>2];
   $835 = $R11;
   $836 = $834 * $835;
   $837 = +HEAPF32[$pp>>2];
   $838 = $R21;
   $839 = $837 * $838;
   $840 = $836 - $839;
   $841 = $840 < 0.0;
   $842 = $841&1;
   $invert_normal = $842;
   $843 = $9;
   HEAP32[$843>>2] = 13;
  }
 } while(0);
 $844 = ((($pp)) + 4|0);
 $845 = +HEAPF32[$844>>2];
 $846 = $R12;
 $847 = $845 * $846;
 $848 = +HEAPF32[$pp>>2];
 $849 = $R22;
 $850 = $848 * $849;
 $851 = $847 - $850;
 $852 = $851;
 $853 = (+Math_abs((+$852)));
 $854 = $853;
 $855 = $A1;
 $856 = $Q22;
 $857 = $855 * $856;
 $858 = $A2;
 $859 = $Q12;
 $860 = $858 * $859;
 $861 = $857 + $860;
 $862 = $B1;
 $863 = $Q33;
 $864 = $862 * $863;
 $865 = $861 + $864;
 $866 = $B3;
 $867 = $Q31;
 $868 = $866 * $867;
 $869 = $865 + $868;
 $870 = $854 - $869;
 $s2 = $870;
 $871 = $s2;
 $872 = $871 > 0.0;
 if ($872) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $873 = $R22;
 $874 = -$873;
 $875 = $R22;
 $876 = -$875;
 $877 = $874 * $876;
 $878 = $R12;
 $879 = $R12;
 $880 = $878 * $879;
 $881 = $877 + $880;
 $882 = $881 + 0.0;
 $883 = $882;
 $884 = (+Math_sqrt((+$883)));
 $885 = $884;
 $l = $885;
 $886 = $l;
 $887 = $886 > 0.0;
 do {
  if ($887) {
   $888 = $l;
   $889 = $s2;
   $890 = $889 / $888;
   $s2 = $890;
   $891 = $s2;
   $892 = $s;
   $893 = $891 > $892;
   if (!($893)) {
    break;
   }
   $894 = $s2;
   $s = $894;
   $normalR = 0;
   $895 = $R22;
   $896 = -$895;
   $897 = $l;
   $898 = $896 / $897;
   HEAPF32[$normalC>>2] = $898;
   $899 = $R12;
   $900 = $l;
   $901 = $899 / $900;
   $902 = ((($normalC)) + 4|0);
   HEAPF32[$902>>2] = $901;
   $903 = $l;
   $904 = 0.0 / $903;
   $905 = ((($normalC)) + 8|0);
   HEAPF32[$905>>2] = $904;
   $906 = ((($pp)) + 4|0);
   $907 = +HEAPF32[$906>>2];
   $908 = $R12;
   $909 = $907 * $908;
   $910 = +HEAPF32[$pp>>2];
   $911 = $R22;
   $912 = $910 * $911;
   $913 = $909 - $912;
   $914 = $913 < 0.0;
   $915 = $914&1;
   $invert_normal = $915;
   $916 = $9;
   HEAP32[$916>>2] = 14;
  }
 } while(0);
 $917 = ((($pp)) + 4|0);
 $918 = +HEAPF32[$917>>2];
 $919 = $R13;
 $920 = $918 * $919;
 $921 = +HEAPF32[$pp>>2];
 $922 = $R23;
 $923 = $921 * $922;
 $924 = $920 - $923;
 $925 = $924;
 $926 = (+Math_abs((+$925)));
 $927 = $926;
 $928 = $A1;
 $929 = $Q23;
 $930 = $928 * $929;
 $931 = $A2;
 $932 = $Q13;
 $933 = $931 * $932;
 $934 = $930 + $933;
 $935 = $B1;
 $936 = $Q32;
 $937 = $935 * $936;
 $938 = $934 + $937;
 $939 = $B2;
 $940 = $Q31;
 $941 = $939 * $940;
 $942 = $938 + $941;
 $943 = $927 - $942;
 $s2 = $943;
 $944 = $s2;
 $945 = $944 > 0.0;
 if ($945) {
  $0 = 0;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $946 = $R23;
 $947 = -$946;
 $948 = $R23;
 $949 = -$948;
 $950 = $947 * $949;
 $951 = $R13;
 $952 = $R13;
 $953 = $951 * $952;
 $954 = $950 + $953;
 $955 = $954 + 0.0;
 $956 = $955;
 $957 = (+Math_sqrt((+$956)));
 $958 = $957;
 $l = $958;
 $959 = $l;
 $960 = $959 > 0.0;
 do {
  if ($960) {
   $961 = $l;
   $962 = $s2;
   $963 = $962 / $961;
   $s2 = $963;
   $964 = $s2;
   $965 = $s;
   $966 = $964 > $965;
   if (!($966)) {
    break;
   }
   $967 = $s2;
   $s = $967;
   $normalR = 0;
   $968 = $R23;
   $969 = -$968;
   $970 = $l;
   $971 = $969 / $970;
   HEAPF32[$normalC>>2] = $971;
   $972 = $R13;
   $973 = $l;
   $974 = $972 / $973;
   $975 = ((($normalC)) + 4|0);
   HEAPF32[$975>>2] = $974;
   $976 = $l;
   $977 = 0.0 / $976;
   $978 = ((($normalC)) + 8|0);
   HEAPF32[$978>>2] = $977;
   $979 = ((($pp)) + 4|0);
   $980 = +HEAPF32[$979>>2];
   $981 = $R13;
   $982 = $980 * $981;
   $983 = +HEAPF32[$pp>>2];
   $984 = $R23;
   $985 = $983 * $984;
   $986 = $982 - $985;
   $987 = $986 < 0.0;
   $988 = $987&1;
   $invert_normal = $988;
   $989 = $9;
   HEAP32[$989>>2] = 15;
  }
 } while(0);
 $990 = $normalR;
 $991 = ($990|0)!=(0|0);
 if ($991) {
  $992 = $normalR;
  $993 = +HEAPF32[$992>>2];
  $994 = $7;
  HEAPF32[$994>>2] = $993;
  $995 = $normalR;
  $996 = ((($995)) + 16|0);
  $997 = +HEAPF32[$996>>2];
  $998 = $7;
  $999 = ((($998)) + 4|0);
  HEAPF32[$999>>2] = $997;
  $1000 = $normalR;
  $1001 = ((($1000)) + 32|0);
  $1002 = +HEAPF32[$1001>>2];
  $1003 = $7;
  $1004 = ((($1003)) + 8|0);
  HEAPF32[$1004>>2] = $1002;
 } else {
  $1005 = $7;
  $1006 = $2;
  _dMULTIPLY0_331($1005,$1006,$normalC);
 }
 $1007 = $invert_normal;
 $1008 = ($1007|0)!=(0);
 if ($1008) {
  $1009 = $7;
  $1010 = +HEAPF32[$1009>>2];
  $1011 = -$1010;
  $1012 = $7;
  HEAPF32[$1012>>2] = $1011;
  $1013 = $7;
  $1014 = ((($1013)) + 4|0);
  $1015 = +HEAPF32[$1014>>2];
  $1016 = -$1015;
  $1017 = $7;
  $1018 = ((($1017)) + 4|0);
  HEAPF32[$1018>>2] = $1016;
  $1019 = $7;
  $1020 = ((($1019)) + 8|0);
  $1021 = +HEAPF32[$1020>>2];
  $1022 = -$1021;
  $1023 = $7;
  $1024 = ((($1023)) + 8|0);
  HEAPF32[$1024>>2] = $1022;
 }
 $1025 = $s;
 $1026 = -$1025;
 $1027 = $8;
 HEAPF32[$1027>>2] = $1026;
 $1028 = $9;
 $1029 = HEAP32[$1028>>2]|0;
 $1030 = ($1029|0)>(6);
 if (!($1030)) {
  $1268 = $9;
  $1269 = HEAP32[$1268>>2]|0;
  $1270 = ($1269|0)<=(3);
  $i = 0;
  L124: do {
   if ($1270) {
    while(1) {
     $1271 = $i;
     $1272 = ($1271|0)<(3);
     if (!($1272)) {
      break;
     }
     $1273 = $i;
     $1274 = $4;
     $1275 = (($1274) + ($1273<<2)|0);
     $1276 = +HEAPF32[$1275>>2];
     $1277 = $i;
     $1278 = (($vertex) + ($1277<<2)|0);
     HEAPF32[$1278>>2] = $1276;
     $1279 = $i;
     $1280 = (($1279) + 1)|0;
     $i = $1280;
    }
    $1281 = $7;
    $1282 = $5;
    $1283 = (+_dDOT14($1281,$1282));
    $1284 = $1283 > 0.0;
    $1285 = $1284 ? -1.0 : 1.0;
    $sign1 = $1285;
    $i = 0;
    while(1) {
     $1286 = $i;
     $1287 = ($1286|0)<(3);
     if (!($1287)) {
      break;
     }
     $1288 = $sign1;
     $1289 = $B1;
     $1290 = $1288 * $1289;
     $1291 = $i;
     $1292 = $1291<<2;
     $1293 = $5;
     $1294 = (($1293) + ($1292<<2)|0);
     $1295 = +HEAPF32[$1294>>2];
     $1296 = $1290 * $1295;
     $1297 = $i;
     $1298 = (($vertex) + ($1297<<2)|0);
     $1299 = +HEAPF32[$1298>>2];
     $1300 = $1299 + $1296;
     HEAPF32[$1298>>2] = $1300;
     $1301 = $i;
     $1302 = (($1301) + 1)|0;
     $i = $1302;
    }
    $1303 = $7;
    $1304 = $5;
    $1305 = ((($1304)) + 4|0);
    $1306 = (+_dDOT14($1303,$1305));
    $1307 = $1306 > 0.0;
    $1308 = $1307 ? -1.0 : 1.0;
    $sign1 = $1308;
    $i = 0;
    while(1) {
     $1309 = $i;
     $1310 = ($1309|0)<(3);
     if (!($1310)) {
      break;
     }
     $1311 = $sign1;
     $1312 = $B2;
     $1313 = $1311 * $1312;
     $1314 = $i;
     $1315 = $1314<<2;
     $1316 = (($1315) + 1)|0;
     $1317 = $5;
     $1318 = (($1317) + ($1316<<2)|0);
     $1319 = +HEAPF32[$1318>>2];
     $1320 = $1313 * $1319;
     $1321 = $i;
     $1322 = (($vertex) + ($1321<<2)|0);
     $1323 = +HEAPF32[$1322>>2];
     $1324 = $1323 + $1320;
     HEAPF32[$1322>>2] = $1324;
     $1325 = $i;
     $1326 = (($1325) + 1)|0;
     $i = $1326;
    }
    $1327 = $7;
    $1328 = $5;
    $1329 = ((($1328)) + 8|0);
    $1330 = (+_dDOT14($1327,$1329));
    $1331 = $1330 > 0.0;
    $1332 = $1331 ? -1.0 : 1.0;
    $sign1 = $1332;
    $i = 0;
    while(1) {
     $1333 = $i;
     $1334 = ($1333|0)<(3);
     if (!($1334)) {
      break L124;
     }
     $1335 = $sign1;
     $1336 = $B3;
     $1337 = $1335 * $1336;
     $1338 = $i;
     $1339 = $1338<<2;
     $1340 = (($1339) + 2)|0;
     $1341 = $5;
     $1342 = (($1341) + ($1340<<2)|0);
     $1343 = +HEAPF32[$1342>>2];
     $1344 = $1337 * $1343;
     $1345 = $i;
     $1346 = (($vertex) + ($1345<<2)|0);
     $1347 = +HEAPF32[$1346>>2];
     $1348 = $1347 + $1344;
     HEAPF32[$1346>>2] = $1348;
     $1349 = $i;
     $1350 = (($1349) + 1)|0;
     $i = $1350;
    }
   } else {
    while(1) {
     $1351 = $i;
     $1352 = ($1351|0)<(3);
     if (!($1352)) {
      break;
     }
     $1353 = $i;
     $1354 = $1;
     $1355 = (($1354) + ($1353<<2)|0);
     $1356 = +HEAPF32[$1355>>2];
     $1357 = $i;
     $1358 = (($vertex) + ($1357<<2)|0);
     HEAPF32[$1358>>2] = $1356;
     $1359 = $i;
     $1360 = (($1359) + 1)|0;
     $i = $1360;
    }
    $1361 = $7;
    $1362 = $2;
    $1363 = (+_dDOT14($1361,$1362));
    $1364 = $1363 > 0.0;
    $1365 = $1364 ? 1.0 : -1.0;
    $sign2 = $1365;
    $i = 0;
    while(1) {
     $1366 = $i;
     $1367 = ($1366|0)<(3);
     if (!($1367)) {
      break;
     }
     $1368 = $sign2;
     $1369 = $A1;
     $1370 = $1368 * $1369;
     $1371 = $i;
     $1372 = $1371<<2;
     $1373 = $2;
     $1374 = (($1373) + ($1372<<2)|0);
     $1375 = +HEAPF32[$1374>>2];
     $1376 = $1370 * $1375;
     $1377 = $i;
     $1378 = (($vertex) + ($1377<<2)|0);
     $1379 = +HEAPF32[$1378>>2];
     $1380 = $1379 + $1376;
     HEAPF32[$1378>>2] = $1380;
     $1381 = $i;
     $1382 = (($1381) + 1)|0;
     $i = $1382;
    }
    $1383 = $7;
    $1384 = $2;
    $1385 = ((($1384)) + 4|0);
    $1386 = (+_dDOT14($1383,$1385));
    $1387 = $1386 > 0.0;
    $1388 = $1387 ? 1.0 : -1.0;
    $sign2 = $1388;
    $i = 0;
    while(1) {
     $1389 = $i;
     $1390 = ($1389|0)<(3);
     if (!($1390)) {
      break;
     }
     $1391 = $sign2;
     $1392 = $A2;
     $1393 = $1391 * $1392;
     $1394 = $i;
     $1395 = $1394<<2;
     $1396 = (($1395) + 1)|0;
     $1397 = $2;
     $1398 = (($1397) + ($1396<<2)|0);
     $1399 = +HEAPF32[$1398>>2];
     $1400 = $1393 * $1399;
     $1401 = $i;
     $1402 = (($vertex) + ($1401<<2)|0);
     $1403 = +HEAPF32[$1402>>2];
     $1404 = $1403 + $1400;
     HEAPF32[$1402>>2] = $1404;
     $1405 = $i;
     $1406 = (($1405) + 1)|0;
     $i = $1406;
    }
    $1407 = $7;
    $1408 = $2;
    $1409 = ((($1408)) + 8|0);
    $1410 = (+_dDOT14($1407,$1409));
    $1411 = $1410 > 0.0;
    $1412 = $1411 ? 1.0 : -1.0;
    $sign2 = $1412;
    $i = 0;
    while(1) {
     $1413 = $i;
     $1414 = ($1413|0)<(3);
     if (!($1414)) {
      break L124;
     }
     $1415 = $sign2;
     $1416 = $A3;
     $1417 = $1415 * $1416;
     $1418 = $i;
     $1419 = $1418<<2;
     $1420 = (($1419) + 2)|0;
     $1421 = $2;
     $1422 = (($1421) + ($1420<<2)|0);
     $1423 = +HEAPF32[$1422>>2];
     $1424 = $1417 * $1423;
     $1425 = $i;
     $1426 = (($vertex) + ($1425<<2)|0);
     $1427 = +HEAPF32[$1426>>2];
     $1428 = $1427 + $1424;
     HEAPF32[$1426>>2] = $1428;
     $1429 = $i;
     $1430 = (($1429) + 1)|0;
     $i = $1430;
    }
   }
  } while(0);
  $i = 0;
  while(1) {
   $1431 = $i;
   $1432 = ($1431|0)<(3);
   if (!($1432)) {
    break;
   }
   $1433 = $i;
   $1434 = (($vertex) + ($1433<<2)|0);
   $1435 = +HEAPF32[$1434>>2];
   $1436 = $i;
   $1437 = $11;
   $1438 = (($1437) + ($1436<<2)|0);
   HEAPF32[$1438>>2] = $1435;
   $1439 = $i;
   $1440 = (($1439) + 1)|0;
   $i = $1440;
  }
  $1441 = $8;
  $1442 = +HEAPF32[$1441>>2];
  $1443 = $11;
  $1444 = ((($1443)) + 32|0);
  HEAPF32[$1444>>2] = $1442;
  $0 = 1;
  $1445 = $0;
  STACKTOP = sp;return ($1445|0);
 }
 $i = 0;
 while(1) {
  $1031 = $i;
  $1032 = ($1031|0)<(3);
  if (!($1032)) {
   break;
  }
  $1033 = $i;
  $1034 = $1;
  $1035 = (($1034) + ($1033<<2)|0);
  $1036 = +HEAPF32[$1035>>2];
  $1037 = $i;
  $1038 = (($pa) + ($1037<<2)|0);
  HEAPF32[$1038>>2] = $1036;
  $1039 = $i;
  $1040 = (($1039) + 1)|0;
  $i = $1040;
 }
 $1041 = $7;
 $1042 = $2;
 $1043 = (+_dDOT14($1041,$1042));
 $1044 = $1043 > 0.0;
 $1045 = $1044 ? 1.0 : -1.0;
 $sign = $1045;
 $i = 0;
 while(1) {
  $1046 = $i;
  $1047 = ($1046|0)<(3);
  if (!($1047)) {
   break;
  }
  $1048 = $sign;
  $1049 = $A1;
  $1050 = $1048 * $1049;
  $1051 = $i;
  $1052 = $1051<<2;
  $1053 = $2;
  $1054 = (($1053) + ($1052<<2)|0);
  $1055 = +HEAPF32[$1054>>2];
  $1056 = $1050 * $1055;
  $1057 = $i;
  $1058 = (($pa) + ($1057<<2)|0);
  $1059 = +HEAPF32[$1058>>2];
  $1060 = $1059 + $1056;
  HEAPF32[$1058>>2] = $1060;
  $1061 = $i;
  $1062 = (($1061) + 1)|0;
  $i = $1062;
 }
 $1063 = $7;
 $1064 = $2;
 $1065 = ((($1064)) + 4|0);
 $1066 = (+_dDOT14($1063,$1065));
 $1067 = $1066 > 0.0;
 $1068 = $1067 ? 1.0 : -1.0;
 $sign = $1068;
 $i = 0;
 while(1) {
  $1069 = $i;
  $1070 = ($1069|0)<(3);
  if (!($1070)) {
   break;
  }
  $1071 = $sign;
  $1072 = $A2;
  $1073 = $1071 * $1072;
  $1074 = $i;
  $1075 = $1074<<2;
  $1076 = (($1075) + 1)|0;
  $1077 = $2;
  $1078 = (($1077) + ($1076<<2)|0);
  $1079 = +HEAPF32[$1078>>2];
  $1080 = $1073 * $1079;
  $1081 = $i;
  $1082 = (($pa) + ($1081<<2)|0);
  $1083 = +HEAPF32[$1082>>2];
  $1084 = $1083 + $1080;
  HEAPF32[$1082>>2] = $1084;
  $1085 = $i;
  $1086 = (($1085) + 1)|0;
  $i = $1086;
 }
 $1087 = $7;
 $1088 = $2;
 $1089 = ((($1088)) + 8|0);
 $1090 = (+_dDOT14($1087,$1089));
 $1091 = $1090 > 0.0;
 $1092 = $1091 ? 1.0 : -1.0;
 $sign = $1092;
 $i = 0;
 while(1) {
  $1093 = $i;
  $1094 = ($1093|0)<(3);
  if (!($1094)) {
   break;
  }
  $1095 = $sign;
  $1096 = $A3;
  $1097 = $1095 * $1096;
  $1098 = $i;
  $1099 = $1098<<2;
  $1100 = (($1099) + 2)|0;
  $1101 = $2;
  $1102 = (($1101) + ($1100<<2)|0);
  $1103 = +HEAPF32[$1102>>2];
  $1104 = $1097 * $1103;
  $1105 = $i;
  $1106 = (($pa) + ($1105<<2)|0);
  $1107 = +HEAPF32[$1106>>2];
  $1108 = $1107 + $1104;
  HEAPF32[$1106>>2] = $1108;
  $1109 = $i;
  $1110 = (($1109) + 1)|0;
  $i = $1110;
 }
 $i = 0;
 while(1) {
  $1111 = $i;
  $1112 = ($1111|0)<(3);
  if (!($1112)) {
   break;
  }
  $1113 = $i;
  $1114 = $4;
  $1115 = (($1114) + ($1113<<2)|0);
  $1116 = +HEAPF32[$1115>>2];
  $1117 = $i;
  $1118 = (($pb) + ($1117<<2)|0);
  HEAPF32[$1118>>2] = $1116;
  $1119 = $i;
  $1120 = (($1119) + 1)|0;
  $i = $1120;
 }
 $1121 = $7;
 $1122 = $5;
 $1123 = (+_dDOT14($1121,$1122));
 $1124 = $1123 > 0.0;
 $1125 = $1124 ? -1.0 : 1.0;
 $sign = $1125;
 $i = 0;
 while(1) {
  $1126 = $i;
  $1127 = ($1126|0)<(3);
  if (!($1127)) {
   break;
  }
  $1128 = $sign;
  $1129 = $B1;
  $1130 = $1128 * $1129;
  $1131 = $i;
  $1132 = $1131<<2;
  $1133 = $5;
  $1134 = (($1133) + ($1132<<2)|0);
  $1135 = +HEAPF32[$1134>>2];
  $1136 = $1130 * $1135;
  $1137 = $i;
  $1138 = (($pb) + ($1137<<2)|0);
  $1139 = +HEAPF32[$1138>>2];
  $1140 = $1139 + $1136;
  HEAPF32[$1138>>2] = $1140;
  $1141 = $i;
  $1142 = (($1141) + 1)|0;
  $i = $1142;
 }
 $1143 = $7;
 $1144 = $5;
 $1145 = ((($1144)) + 4|0);
 $1146 = (+_dDOT14($1143,$1145));
 $1147 = $1146 > 0.0;
 $1148 = $1147 ? -1.0 : 1.0;
 $sign = $1148;
 $i = 0;
 while(1) {
  $1149 = $i;
  $1150 = ($1149|0)<(3);
  if (!($1150)) {
   break;
  }
  $1151 = $sign;
  $1152 = $B2;
  $1153 = $1151 * $1152;
  $1154 = $i;
  $1155 = $1154<<2;
  $1156 = (($1155) + 1)|0;
  $1157 = $5;
  $1158 = (($1157) + ($1156<<2)|0);
  $1159 = +HEAPF32[$1158>>2];
  $1160 = $1153 * $1159;
  $1161 = $i;
  $1162 = (($pb) + ($1161<<2)|0);
  $1163 = +HEAPF32[$1162>>2];
  $1164 = $1163 + $1160;
  HEAPF32[$1162>>2] = $1164;
  $1165 = $i;
  $1166 = (($1165) + 1)|0;
  $i = $1166;
 }
 $1167 = $7;
 $1168 = $5;
 $1169 = ((($1168)) + 8|0);
 $1170 = (+_dDOT14($1167,$1169));
 $1171 = $1170 > 0.0;
 $1172 = $1171 ? -1.0 : 1.0;
 $sign = $1172;
 $i = 0;
 while(1) {
  $1173 = $i;
  $1174 = ($1173|0)<(3);
  if (!($1174)) {
   break;
  }
  $1175 = $sign;
  $1176 = $B3;
  $1177 = $1175 * $1176;
  $1178 = $i;
  $1179 = $1178<<2;
  $1180 = (($1179) + 2)|0;
  $1181 = $5;
  $1182 = (($1181) + ($1180<<2)|0);
  $1183 = +HEAPF32[$1182>>2];
  $1184 = $1177 * $1183;
  $1185 = $i;
  $1186 = (($pb) + ($1185<<2)|0);
  $1187 = +HEAPF32[$1186>>2];
  $1188 = $1187 + $1184;
  HEAPF32[$1186>>2] = $1188;
  $1189 = $i;
  $1190 = (($1189) + 1)|0;
  $i = $1190;
 }
 $i = 0;
 while(1) {
  $1191 = $i;
  $1192 = ($1191|0)<(3);
  if (!($1192)) {
   break;
  }
  $1193 = $9;
  $1194 = HEAP32[$1193>>2]|0;
  $1195 = (($1194) - 7)|0;
  $1196 = (($1195|0) / 3)&-1;
  $1197 = $i;
  $1198 = $1197<<2;
  $1199 = (($1196) + ($1198))|0;
  $1200 = $2;
  $1201 = (($1200) + ($1199<<2)|0);
  $1202 = +HEAPF32[$1201>>2];
  $1203 = $i;
  $1204 = (($ua) + ($1203<<2)|0);
  HEAPF32[$1204>>2] = $1202;
  $1205 = $i;
  $1206 = (($1205) + 1)|0;
  $i = $1206;
 }
 $i = 0;
 while(1) {
  $1207 = $i;
  $1208 = ($1207|0)<(3);
  if (!($1208)) {
   break;
  }
  $1209 = $9;
  $1210 = HEAP32[$1209>>2]|0;
  $1211 = (($1210) - 7)|0;
  $1212 = (($1211|0) % 3)&-1;
  $1213 = $i;
  $1214 = $1213<<2;
  $1215 = (($1212) + ($1214))|0;
  $1216 = $5;
  $1217 = (($1216) + ($1215<<2)|0);
  $1218 = +HEAPF32[$1217>>2];
  $1219 = $i;
  $1220 = (($ub) + ($1219<<2)|0);
  HEAPF32[$1220>>2] = $1218;
  $1221 = $i;
  $1222 = (($1221) + 1)|0;
  $i = $1222;
 }
 __ZL19lineClosestApproachPKfS0_S0_S0_PfS1_($pa,$ua,$pb,$ub,$alpha,$beta);
 $i = 0;
 while(1) {
  $1223 = $i;
  $1224 = ($1223|0)<(3);
  if (!($1224)) {
   break;
  }
  $1225 = $i;
  $1226 = (($ua) + ($1225<<2)|0);
  $1227 = +HEAPF32[$1226>>2];
  $1228 = +HEAPF32[$alpha>>2];
  $1229 = $1227 * $1228;
  $1230 = $i;
  $1231 = (($pa) + ($1230<<2)|0);
  $1232 = +HEAPF32[$1231>>2];
  $1233 = $1232 + $1229;
  HEAPF32[$1231>>2] = $1233;
  $1234 = $i;
  $1235 = (($1234) + 1)|0;
  $i = $1235;
 }
 $i = 0;
 while(1) {
  $1236 = $i;
  $1237 = ($1236|0)<(3);
  if (!($1237)) {
   break;
  }
  $1238 = $i;
  $1239 = (($ub) + ($1238<<2)|0);
  $1240 = +HEAPF32[$1239>>2];
  $1241 = +HEAPF32[$beta>>2];
  $1242 = $1240 * $1241;
  $1243 = $i;
  $1244 = (($pb) + ($1243<<2)|0);
  $1245 = +HEAPF32[$1244>>2];
  $1246 = $1245 + $1242;
  HEAPF32[$1244>>2] = $1246;
  $1247 = $i;
  $1248 = (($1247) + 1)|0;
  $i = $1248;
 }
 $i = 0;
 while(1) {
  $1249 = $i;
  $1250 = ($1249|0)<(3);
  if (!($1250)) {
   break;
  }
  $1251 = $i;
  $1252 = (($pa) + ($1251<<2)|0);
  $1253 = +HEAPF32[$1252>>2];
  $1254 = $i;
  $1255 = (($pb) + ($1254<<2)|0);
  $1256 = +HEAPF32[$1255>>2];
  $1257 = $1253 + $1256;
  $1258 = 0.5 * $1257;
  $1259 = $i;
  $1260 = $11;
  $1261 = (($1260) + ($1259<<2)|0);
  HEAPF32[$1261>>2] = $1258;
  $1262 = $i;
  $1263 = (($1262) + 1)|0;
  $i = $1263;
 }
 $1264 = $8;
 $1265 = +HEAPF32[$1264>>2];
 $1266 = $11;
 $1267 = ((($1266)) + 32|0);
 HEAPF32[$1267>>2] = $1265;
 $0 = 1;
 $1445 = $0;
 STACKTOP = sp;return ($1445|0);
}
function _dCreateGeomClass($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $gc = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $c;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>=(0);
  if ($5) {
   $6 = $0;
   $7 = ((($6)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $0;
    $11 = ((($10)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)!=(0|0);
    if (!($13)) {
     label = 5;
    }
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  HEAP32[$vararg_buffer>>2] = 6094;
  _dDebug(2,6071,$vararg_buffer);
 }
 __ZL19initCollisionArraysv();
 $14 = HEAP32[564>>2]|0;
 $15 = (__ZNK10dArrayBase4sizeEv($14)|0);
 $n = $15;
 $16 = (_dAlloc(24)|0);
 $gc = $16;
 $17 = $gc;
 _dAllocDontReport($17);
 $18 = $0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $gc;
 HEAP32[$21>>2] = $20;
 $22 = $0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $gc;
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = $24;
 $27 = $0;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $gc;
 $31 = ((($30)) + 8|0);
 HEAP32[$31>>2] = $29;
 $32 = $0;
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $gc;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = $34;
 $37 = $n;
 $38 = $gc;
 $39 = ((($38)) + 16|0);
 HEAP32[$39>>2] = $37;
 $40 = $0;
 $41 = HEAP32[$40>>2]|0;
 $42 = (32 + ($41))|0;
 $43 = $gc;
 $44 = ((($43)) + 20|0);
 HEAP32[$44>>2] = $42;
 $45 = HEAP32[564>>2]|0;
 $46 = $gc;
 __ZN6dArrayIP11dxGeomClassE4pushES1_($45,$46);
 $47 = HEAP32[568>>2]|0;
 $48 = $n;
 $49 = (($48) + 1)|0;
 $50 = $n;
 $51 = (($50) + 1)|0;
 $52 = Math_imul($49, $51)|0;
 __ZN6dArrayI14dColliderEntryE7setSizeEi($47,$52);
 $53 = HEAP32[568>>2]|0;
 $54 = (__ZNK6dArrayI14dColliderEntryE4dataEv($53)|0);
 $55 = $n;
 $56 = (($55) + 1)|0;
 $57 = $n;
 $58 = (($57) + 1)|0;
 $59 = Math_imul($56, $58)|0;
 $60 = $59<<3;
 _memset(($54|0),0,($60|0))|0;
 $61 = $n;
 STACKTOP = sp;return ($61|0);
}
function _dCollide($o1,$o2,$flags,$contact,$skip) {
 $o1 = $o1|0;
 $o2 = $o2|0;
 $flags = $flags|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $a1 = 0, $a2 = 0, $c = 0, $c1 = 0, $c2 = 0, $colliders2 = 0, $count = 0, $fn = 0, $i = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $swap = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $o1;
 $2 = $o2;
 $3 = $flags;
 $4 = $contact;
 $5 = $skip;
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 $or$cond = $7 & $9;
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 $or$cond3 = $or$cond & $11;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 6135;
  _dDebug(2,6111,$vararg_buffer);
 }
 $12 = HEAP32[564>>2]|0;
 $13 = ($12|0)!=(0|0);
 $14 = HEAP32[568>>2]|0;
 $15 = ($14|0)!=(0|0);
 $or$cond5 = $13 & $15;
 if (!($or$cond5)) {
  HEAP32[$vararg_buffer6>>2] = 6135;
  _dDebug(2,6144,$vararg_buffer6);
 }
 $16 = $1;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18|0)==($21|0);
 if ($22) {
  $23 = $1;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $0 = 0;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
 }
 $27 = HEAP32[568>>2]|0;
 $28 = (__ZNK6dArrayI14dColliderEntryE4dataEv($27)|0);
 $colliders2 = $28;
 $29 = $1;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $c1 = $32;
 $33 = $2;
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $c2 = $36;
 $37 = $c1;
 $38 = HEAP32[564>>2]|0;
 $39 = (__ZNK10dArrayBase4sizeEv($38)|0);
 $40 = Math_imul($37, $39)|0;
 $41 = $c2;
 $42 = (($40) + ($41))|0;
 $a1 = $42;
 $43 = $c2;
 $44 = HEAP32[564>>2]|0;
 $45 = (__ZNK10dArrayBase4sizeEv($44)|0);
 $46 = Math_imul($43, $45)|0;
 $47 = $c1;
 $48 = (($46) + ($47))|0;
 $a2 = $48;
 $swap = 0;
 $49 = $a1;
 $50 = $colliders2;
 $51 = (($50) + ($49<<3)|0);
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(2);
 if (!($54)) {
  $55 = $a2;
  $56 = $colliders2;
  $57 = (($56) + ($55<<3)|0);
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(2);
  if (!($60)) {
   $61 = $a1;
   $62 = $colliders2;
   $63 = (($62) + ($61<<3)|0);
   $64 = HEAP32[$63>>2]|0;
   $fn = $64;
   $65 = ($64|0)!=(0|0);
   do {
    if ($65) {
     $66 = $a1;
     $67 = $colliders2;
     $68 = (($67) + ($66<<3)|0);
     $69 = ((($68)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $swap = $70;
     $71 = $swap;
     $72 = ($71|0)!=(0);
     $73 = $fn;
     if ($72) {
      $74 = $2;
      $75 = $1;
      $76 = $3;
      $77 = $4;
      $78 = $5;
      $79 = (FUNCTION_TABLE_iiiiii[$73 & 127]($74,$75,$76,$77,$78)|0);
      $count = $79;
      break;
     } else {
      $80 = $1;
      $81 = $2;
      $82 = $3;
      $83 = $4;
      $84 = $5;
      $85 = (FUNCTION_TABLE_iiiiii[$73 & 127]($80,$81,$82,$83,$84)|0);
      $count = $85;
      break;
     }
    } else {
     $86 = HEAP32[564>>2]|0;
     $87 = $c1;
     $88 = (__ZNK6dArrayIP11dxGeomClassEixEi($86,$87)|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = HEAP32[$89>>2]|0;
     $91 = $c2;
     $92 = (FUNCTION_TABLE_ii[$90 & 127]($91)|0);
     $fn = $92;
     $93 = ($92|0)!=(0|0);
     if ($93) {
      $94 = $fn;
      $95 = $a2;
      $96 = $colliders2;
      $97 = (($96) + ($95<<3)|0);
      HEAP32[$97>>2] = $94;
      $98 = $a2;
      $99 = $colliders2;
      $100 = (($99) + ($98<<3)|0);
      $101 = ((($100)) + 4|0);
      HEAP32[$101>>2] = 1;
      $102 = $fn;
      $103 = $a1;
      $104 = $colliders2;
      $105 = (($104) + ($103<<3)|0);
      HEAP32[$105>>2] = $102;
      $106 = $a1;
      $107 = $colliders2;
      $108 = (($107) + ($106<<3)|0);
      $109 = ((($108)) + 4|0);
      HEAP32[$109>>2] = 0;
      $110 = $fn;
      $111 = $1;
      $112 = $2;
      $113 = $3;
      $114 = $4;
      $115 = $5;
      $116 = (FUNCTION_TABLE_iiiiii[$110 & 127]($111,$112,$113,$114,$115)|0);
      $count = $116;
      $swap = 0;
      break;
     }
     $117 = HEAP32[564>>2]|0;
     $118 = $c2;
     $119 = (__ZNK6dArrayIP11dxGeomClassEixEi($117,$118)|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = HEAP32[$120>>2]|0;
     $122 = $c1;
     $123 = (FUNCTION_TABLE_ii[$121 & 127]($122)|0);
     $fn = $123;
     $124 = ($123|0)!=(0|0);
     if ($124) {
      $125 = $fn;
      $126 = $a1;
      $127 = $colliders2;
      $128 = (($127) + ($126<<3)|0);
      HEAP32[$128>>2] = $125;
      $129 = $a1;
      $130 = $colliders2;
      $131 = (($130) + ($129<<3)|0);
      $132 = ((($131)) + 4|0);
      HEAP32[$132>>2] = 1;
      $133 = $fn;
      $134 = $a2;
      $135 = $colliders2;
      $136 = (($135) + ($134<<3)|0);
      HEAP32[$136>>2] = $133;
      $137 = $a2;
      $138 = $colliders2;
      $139 = (($138) + ($137<<3)|0);
      $140 = ((($139)) + 4|0);
      HEAP32[$140>>2] = 0;
      $141 = $fn;
      $142 = $2;
      $143 = $1;
      $144 = $3;
      $145 = $4;
      $146 = $5;
      $147 = (FUNCTION_TABLE_iiiiii[$141 & 127]($142,$143,$144,$145,$146)|0);
      $count = $147;
      $swap = 1;
      break;
     }
     $148 = $a1;
     $149 = $colliders2;
     $150 = (($149) + ($148<<3)|0);
     $151 = ((($150)) + 4|0);
     HEAP32[$151>>2] = 2;
     $152 = $a2;
     $153 = $colliders2;
     $154 = (($153) + ($152<<3)|0);
     $155 = ((($154)) + 4|0);
     HEAP32[$155>>2] = 2;
     $0 = 0;
     $202 = $0;
     STACKTOP = sp;return ($202|0);
    }
   } while(0);
   $156 = $swap;
   $157 = ($156|0)!=(0);
   L29: do {
    if ($157) {
     $i = 0;
     while(1) {
      $158 = $i;
      $159 = $count;
      $160 = ($158|0)<($159|0);
      if (!($160)) {
       break L29;
      }
      $161 = $4;
      $162 = $5;
      $163 = $i;
      $164 = Math_imul($162, $163)|0;
      $165 = (($161) + ($164)|0);
      $c = $165;
      $166 = $c;
      $167 = ((($166)) + 16|0);
      $168 = +HEAPF32[$167>>2];
      $169 = -$168;
      $170 = $c;
      $171 = ((($170)) + 16|0);
      HEAPF32[$171>>2] = $169;
      $172 = $c;
      $173 = ((($172)) + 16|0);
      $174 = ((($173)) + 4|0);
      $175 = +HEAPF32[$174>>2];
      $176 = -$175;
      $177 = $c;
      $178 = ((($177)) + 16|0);
      $179 = ((($178)) + 4|0);
      HEAPF32[$179>>2] = $176;
      $180 = $c;
      $181 = ((($180)) + 16|0);
      $182 = ((($181)) + 8|0);
      $183 = +HEAPF32[$182>>2];
      $184 = -$183;
      $185 = $c;
      $186 = ((($185)) + 16|0);
      $187 = ((($186)) + 8|0);
      HEAPF32[$187>>2] = $184;
      $188 = $c;
      $189 = ((($188)) + 36|0);
      $190 = HEAP32[$189>>2]|0;
      $tmp = $190;
      $191 = $c;
      $192 = ((($191)) + 40|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = $c;
      $195 = ((($194)) + 36|0);
      HEAP32[$195>>2] = $193;
      $196 = $tmp;
      $197 = $c;
      $198 = ((($197)) + 40|0);
      HEAP32[$198>>2] = $196;
      $199 = $i;
      $200 = (($199) + 1)|0;
      $i = $200;
     }
    }
   } while(0);
   $201 = $count;
   $0 = $201;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
 }
 $0 = 0;
 $202 = $0;
 STACKTOP = sp;return ($202|0);
}
function _dGeomSetBody($g,$b) {
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $b;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 6183;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($5) {
  if (!($9)) {
   $10 = $0;
   $11 = ((($10)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   _dFree($12,64);
  }
  $13 = $1;
  $14 = $0;
  $15 = ((($14)) + 8|0);
  HEAP32[$15>>2] = $13;
  $16 = $1;
  $17 = ((($16)) + 148|0);
  $18 = $0;
  $19 = ((($18)) + 12|0);
  HEAP32[$19>>2] = $17;
  $20 = $1;
  $21 = ((($20)) + 180|0);
  $22 = $0;
  $23 = ((($22)) + 16|0);
  HEAP32[$23>>2] = $21;
  STACKTOP = sp;return;
 } else {
  if (!($9)) {
   STACKTOP = sp;return;
  }
  $24 = $0;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = (_dAlloc(64)|0);
  $pr = $26;
  $27 = $pr;
  $28 = $0;
  $29 = ((($28)) + 12|0);
  HEAP32[$29>>2] = $27;
  $30 = $pr;
  $31 = ((($30)) + 16|0);
  $32 = $0;
  $33 = ((($32)) + 16|0);
  HEAP32[$33>>2] = $31;
  STACKTOP = sp;return;
 }
}
function _dGeomGetBody($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 6196;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _dGeomSetPosition($g,$x,$y,$z) {
 $g = $g|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer>>2] = 6209;
  _dDebug(2,6111,$vararg_buffer);
 }
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = $2;
  $15 = $3;
  _dBodySetPosition($12,$13,$14,$15);
  STACKTOP = sp;return;
 } else {
  $16 = $1;
  $17 = $0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  HEAPF32[$19>>2] = $16;
  $20 = $2;
  $21 = $0;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 4|0);
  HEAPF32[$24>>2] = $20;
  $25 = $3;
  $26 = $0;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 8|0);
  HEAPF32[$29>>2] = $25;
  STACKTOP = sp;return;
 }
}
function _dGeomSetRotation($g,$R) {
 $g = $g|0;
 $R = $R|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $R;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 6226;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = $0;
 if ($7) {
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  _dBodySetRotation($10,$11);
  STACKTOP = sp;return;
 } else {
  $12 = ((($8)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  dest=$13; src=$14; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
}
function _dGeomGetPosition($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 6243;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _dGeomGetRotation($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 6260;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _dCreateGeom($classnum) {
 $classnum = $classnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $geom = 0, $or$cond = 0, $or$cond3 = 0, $pr = 0, $size = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $classnum;
 $1 = HEAP32[564>>2]|0;
 $2 = ($1|0)!=(0|0);
 $3 = HEAP32[568>>2]|0;
 $4 = ($3|0)!=(0|0);
 $or$cond = $2 & $4;
 $5 = $0;
 $6 = ($5|0)>=(0);
 $or$cond3 = $or$cond & $6;
 if ($or$cond3) {
  $7 = $0;
  $8 = HEAP32[564>>2]|0;
  $9 = (__ZNK10dArrayBase4sizeEv($8)|0);
  $10 = ($7|0)<($9|0);
  if (!($10)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 6302;
  _dDebug(2,6277,$vararg_buffer);
 }
 $11 = HEAP32[564>>2]|0;
 $12 = $0;
 $13 = (__ZNK6dArrayIP11dxGeomClassEixEi($11,$12)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $size = $16;
 $17 = $size;
 $18 = (_dAlloc($17)|0);
 $geom = $18;
 $19 = $geom;
 $20 = $size;
 _memset(($19|0),0,($20|0))|0;
 $21 = HEAP32[564>>2]|0;
 $22 = $0;
 $23 = (__ZNK6dArrayIP11dxGeomClassEixEi($21,$22)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $geom;
 HEAP32[$25>>2] = $24;
 $26 = $geom;
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = 0;
 $28 = $geom;
 $29 = ((($28)) + 8|0);
 HEAP32[$29>>2] = 0;
 $30 = (_dAlloc(64)|0);
 $pr = $30;
 $31 = $pr;
 $32 = $geom;
 $33 = ((($32)) + 12|0);
 HEAP32[$33>>2] = $31;
 $34 = $pr;
 $35 = ((($34)) + 16|0);
 $36 = $geom;
 $37 = ((($36)) + 16|0);
 HEAP32[$37>>2] = $35;
 $38 = $geom;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 _dSetZero($40,4);
 $41 = $geom;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 _dRSetIdentity($43);
 $44 = $geom;
 STACKTOP = sp;return ($44|0);
}
function _dGeomDestroy($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 6314;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  _dSpaceRemove($9,$10);
 }
 $11 = $0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  FUNCTION_TABLE_vi[$19 & 127]($20);
 }
 $21 = $0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $28 = $0;
  $29 = $0;
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  _dFree($28,$32);
  STACKTOP = sp;return;
 }
 $25 = $0;
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 _dFree($27,64);
 $28 = $0;
 $29 = $0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 _dFree($28,$32);
 STACKTOP = sp;return;
}
function _dGeomGetAABB($g,$aabb) {
 $g = $g|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $aabb;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 6327;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $1;
 FUNCTION_TABLE_vii[$7 & 127]($8,$9);
 STACKTOP = sp;return;
}
function _dGeomGetSpaceAABB($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = 6340;
  _dDebug(2,6111,$vararg_buffer);
 }
 $3 = $0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function __Z10dCollideSSPK6dxGeomS1_iP12dContactGeomi($o1,$o2,$flags,$contact,$skip) {
 $o1 = $o1|0;
 $o2 = $o2|0;
 $flags = $flags|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $s1 = 0, $s2 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $o1;
 $1 = $o2;
 $2 = $flags;
 $3 = $contact;
 $4 = $skip;
 $5 = $4;
 $6 = ($5|0)>=(44);
 if (!($6)) {
  HEAP32[$vararg_buffer>>2] = 6424;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 6435;
  _dDebug(1,6358,$vararg_buffer);
 }
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[540>>2]|0;
 $12 = ($10|0)==($11|0);
 if (!($12)) {
  HEAP32[$vararg_buffer2>>2] = 6424;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 6435;
  _dDebug(1,6444,$vararg_buffer2);
 }
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[540>>2]|0;
 $18 = ($16|0)==($17|0);
 if (!($18)) {
  HEAP32[$vararg_buffer6>>2] = 6424;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 6435;
  _dDebug(1,6508,$vararg_buffer6);
 }
 $19 = $0;
 $20 = ((($19)) + 32|0);
 $s1 = $20;
 $21 = $1;
 $22 = ((($21)) + 32|0);
 $s2 = $22;
 $23 = $0;
 $24 = $3;
 $25 = ((($24)) + 36|0);
 HEAP32[$25>>2] = $23;
 $26 = $1;
 $27 = $3;
 $28 = ((($27)) + 40|0);
 HEAP32[$28>>2] = $26;
 $29 = $0;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $s1;
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $s2;
 $38 = +HEAPF32[$37>>2];
 $39 = $3;
 $40 = (__ZL15dCollideSpheresPffS_fP12dContactGeom($31,$33,$36,$38,$39)|0);
 STACKTOP = sp;return ($40|0);
}
function __Z10dCollideSBPK6dxGeomS1_iP12dContactGeomi($o1,$o2,$flags,$contact,$skip) {
 $o1 = $o1|0;
 $o2 = $o2|0;
 $flags = $flags|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $box = 0, $depth = 0.0, $i = 0, $l = 0;
 var $max = 0.0, $maxi = 0, $onborder = 0, $p = 0, $q = 0, $r = 0, $sphere = 0, $t = 0, $tmp = 0, $tt = 0.0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $l = sp + 136|0;
 $t = sp + 120|0;
 $p = sp + 104|0;
 $q = sp + 88|0;
 $r = sp + 72|0;
 $tmp = sp + 24|0;
 $1 = $o1;
 $2 = $o2;
 $3 = $flags;
 $4 = $contact;
 $5 = $skip;
 $onborder = 0;
 $6 = $5;
 $7 = ($6|0)>=(44);
 if (!($7)) {
  HEAP32[$vararg_buffer>>2] = 6572;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 6435;
  _dDebug(1,6358,$vararg_buffer);
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[540>>2]|0;
 $13 = ($11|0)==($12|0);
 if (!($13)) {
  HEAP32[$vararg_buffer2>>2] = 6572;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 6435;
  _dDebug(1,6444,$vararg_buffer2);
 }
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[544>>2]|0;
 $19 = ($17|0)==($18|0);
 if (!($19)) {
  HEAP32[$vararg_buffer6>>2] = 6572;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 6435;
  _dDebug(1,6583,$vararg_buffer6);
 }
 $20 = $1;
 $21 = ((($20)) + 32|0);
 $sphere = $21;
 $22 = $2;
 $23 = ((($22)) + 32|0);
 $box = $23;
 $24 = $1;
 $25 = $4;
 $26 = ((($25)) + 36|0);
 HEAP32[$26>>2] = $24;
 $27 = $2;
 $28 = $4;
 $29 = ((($28)) + 40|0);
 HEAP32[$29>>2] = $27;
 $30 = $1;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = +HEAPF32[$32>>2];
 $34 = $2;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = +HEAPF32[$36>>2];
 $38 = $33 - $37;
 HEAPF32[$p>>2] = $38;
 $39 = $1;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $2;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 4|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $43 - $48;
 $50 = ((($p)) + 4|0);
 HEAPF32[$50>>2] = $49;
 $51 = $1;
 $52 = ((($51)) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($53)) + 8|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $2;
 $57 = ((($56)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 8|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $55 - $60;
 $62 = ((($p)) + 8|0);
 HEAPF32[$62>>2] = $61;
 $63 = $box;
 $64 = +HEAPF32[$63>>2];
 $65 = $64 * 0.5;
 HEAPF32[$l>>2] = $65;
 $66 = $2;
 $67 = ((($66)) + 16|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (+_dDOT14($p,$68));
 HEAPF32[$t>>2] = $69;
 $70 = +HEAPF32[$t>>2];
 $71 = +HEAPF32[$l>>2];
 $72 = -$71;
 $73 = $70 < $72;
 if ($73) {
  $74 = +HEAPF32[$l>>2];
  $75 = -$74;
  HEAPF32[$t>>2] = $75;
  $onborder = 1;
 }
 $76 = +HEAPF32[$t>>2];
 $77 = +HEAPF32[$l>>2];
 $78 = $76 > $77;
 if ($78) {
  $79 = +HEAPF32[$l>>2];
  HEAPF32[$t>>2] = $79;
  $onborder = 1;
 }
 $80 = $box;
 $81 = ((($80)) + 4|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $82 * 0.5;
 $84 = ((($l)) + 4|0);
 HEAPF32[$84>>2] = $83;
 $85 = $2;
 $86 = ((($85)) + 16|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($87)) + 4|0);
 $89 = (+_dDOT14($p,$88));
 $90 = ((($t)) + 4|0);
 HEAPF32[$90>>2] = $89;
 $91 = ((($t)) + 4|0);
 $92 = +HEAPF32[$91>>2];
 $93 = ((($l)) + 4|0);
 $94 = +HEAPF32[$93>>2];
 $95 = -$94;
 $96 = $92 < $95;
 if ($96) {
  $97 = ((($l)) + 4|0);
  $98 = +HEAPF32[$97>>2];
  $99 = -$98;
  $100 = ((($t)) + 4|0);
  HEAPF32[$100>>2] = $99;
  $onborder = 1;
 }
 $101 = ((($t)) + 4|0);
 $102 = +HEAPF32[$101>>2];
 $103 = ((($l)) + 4|0);
 $104 = +HEAPF32[$103>>2];
 $105 = $102 > $104;
 if ($105) {
  $106 = ((($l)) + 4|0);
  $107 = +HEAPF32[$106>>2];
  $108 = ((($t)) + 4|0);
  HEAPF32[$108>>2] = $107;
  $onborder = 1;
 }
 $109 = $2;
 $110 = ((($109)) + 16|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($111)) + 8|0);
 $113 = (+_dDOT14($p,$112));
 $114 = ((($t)) + 8|0);
 HEAPF32[$114>>2] = $113;
 $115 = $box;
 $116 = ((($115)) + 8|0);
 $117 = +HEAPF32[$116>>2];
 $118 = $117 * 0.5;
 $119 = ((($l)) + 8|0);
 HEAPF32[$119>>2] = $118;
 $120 = ((($t)) + 8|0);
 $121 = +HEAPF32[$120>>2];
 $122 = ((($l)) + 8|0);
 $123 = +HEAPF32[$122>>2];
 $124 = -$123;
 $125 = $121 < $124;
 if ($125) {
  $126 = ((($l)) + 8|0);
  $127 = +HEAPF32[$126>>2];
  $128 = -$127;
  $129 = ((($t)) + 8|0);
  HEAPF32[$129>>2] = $128;
  $onborder = 1;
 }
 $130 = ((($t)) + 8|0);
 $131 = +HEAPF32[$130>>2];
 $132 = ((($l)) + 8|0);
 $133 = +HEAPF32[$132>>2];
 $134 = $131 > $133;
 if ($134) {
  $135 = ((($l)) + 8|0);
  $136 = +HEAPF32[$135>>2];
  $137 = ((($t)) + 8|0);
  HEAPF32[$137>>2] = $136;
  $onborder = 1;
 }
 $138 = $onborder;
 $139 = ($138|0)!=(0);
 if ($139) {
  $202 = ((($t)) + 12|0);
  HEAPF32[$202>>2] = 0.0;
  $203 = $2;
  $204 = ((($203)) + 16|0);
  $205 = HEAP32[$204>>2]|0;
  _dMULTIPLY0_331($q,$205,$t);
  $206 = +HEAPF32[$p>>2];
  $207 = +HEAPF32[$q>>2];
  $208 = $206 - $207;
  HEAPF32[$r>>2] = $208;
  $209 = ((($p)) + 4|0);
  $210 = +HEAPF32[$209>>2];
  $211 = ((($q)) + 4|0);
  $212 = +HEAPF32[$211>>2];
  $213 = $210 - $212;
  $214 = ((($r)) + 4|0);
  HEAPF32[$214>>2] = $213;
  $215 = ((($p)) + 8|0);
  $216 = +HEAPF32[$215>>2];
  $217 = ((($q)) + 8|0);
  $218 = +HEAPF32[$217>>2];
  $219 = $216 - $218;
  $220 = ((($r)) + 8|0);
  HEAPF32[$220>>2] = $219;
  $221 = $sphere;
  $222 = +HEAPF32[$221>>2];
  $223 = (+_dDOT($r,$r));
  $224 = $223;
  $225 = (+Math_sqrt((+$224)));
  $226 = $225;
  $227 = $222 - $226;
  $depth = $227;
  $228 = $depth;
  $229 = $228 < 0.0;
  if ($229) {
   $0 = 0;
   $275 = $0;
   STACKTOP = sp;return ($275|0);
  } else {
   $230 = +HEAPF32[$q>>2];
   $231 = $2;
   $232 = ((($231)) + 12|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = +HEAPF32[$233>>2];
   $235 = $230 + $234;
   $236 = $4;
   HEAPF32[$236>>2] = $235;
   $237 = ((($q)) + 4|0);
   $238 = +HEAPF32[$237>>2];
   $239 = $2;
   $240 = ((($239)) + 12|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = ((($241)) + 4|0);
   $243 = +HEAPF32[$242>>2];
   $244 = $238 + $243;
   $245 = $4;
   $246 = ((($245)) + 4|0);
   HEAPF32[$246>>2] = $244;
   $247 = ((($q)) + 8|0);
   $248 = +HEAPF32[$247>>2];
   $249 = $2;
   $250 = ((($249)) + 12|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = ((($251)) + 8|0);
   $253 = +HEAPF32[$252>>2];
   $254 = $248 + $253;
   $255 = $4;
   $256 = ((($255)) + 8|0);
   HEAPF32[$256>>2] = $254;
   $257 = +HEAPF32[$r>>2];
   $258 = $4;
   $259 = ((($258)) + 16|0);
   HEAPF32[$259>>2] = $257;
   $260 = ((($r)) + 4|0);
   $261 = +HEAPF32[$260>>2];
   $262 = $4;
   $263 = ((($262)) + 16|0);
   $264 = ((($263)) + 4|0);
   HEAPF32[$264>>2] = $261;
   $265 = ((($r)) + 8|0);
   $266 = +HEAPF32[$265>>2];
   $267 = $4;
   $268 = ((($267)) + 16|0);
   $269 = ((($268)) + 8|0);
   HEAPF32[$269>>2] = $266;
   $270 = $4;
   $271 = ((($270)) + 16|0);
   _dNormalize3($271);
   $272 = $depth;
   $273 = $4;
   $274 = ((($273)) + 32|0);
   HEAPF32[$274>>2] = $272;
   $0 = 1;
   $275 = $0;
   STACKTOP = sp;return ($275|0);
  }
 }
 $140 = +HEAPF32[$t>>2];
 $141 = $140;
 $142 = (+Math_abs((+$141)));
 $143 = $142;
 $max = $143;
 $maxi = 0;
 $i = 1;
 while(1) {
  $144 = $i;
  $145 = ($144|0)<(3);
  if (!($145)) {
   break;
  }
  $146 = $i;
  $147 = (($t) + ($146<<2)|0);
  $148 = +HEAPF32[$147>>2];
  $149 = $148;
  $150 = (+Math_abs((+$149)));
  $151 = $150;
  $tt = $151;
  $152 = $tt;
  $153 = $max;
  $154 = $152 > $153;
  if ($154) {
   $155 = $tt;
   $max = $155;
   $156 = $i;
   $maxi = $156;
  }
  $157 = $i;
  $158 = (($157) + 1)|0;
  $i = $158;
 }
 $159 = $1;
 $160 = ((($159)) + 12|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = +HEAPF32[$161>>2];
 $163 = $4;
 HEAPF32[$163>>2] = $162;
 $164 = $1;
 $165 = ((($164)) + 12|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = ((($166)) + 4|0);
 $168 = +HEAPF32[$167>>2];
 $169 = $4;
 $170 = ((($169)) + 4|0);
 HEAPF32[$170>>2] = $168;
 $171 = $1;
 $172 = ((($171)) + 12|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = ((($173)) + 8|0);
 $175 = +HEAPF32[$174>>2];
 $176 = $4;
 $177 = ((($176)) + 8|0);
 HEAPF32[$177>>2] = $175;
 HEAPF32[$tmp>>2] = 0.0;
 $178 = ((($tmp)) + 4|0);
 HEAPF32[$178>>2] = 0.0;
 $179 = ((($tmp)) + 8|0);
 HEAPF32[$179>>2] = 0.0;
 $180 = $maxi;
 $181 = (($t) + ($180<<2)|0);
 $182 = +HEAPF32[$181>>2];
 $183 = $182 > 0.0;
 $184 = $183 ? 1.0 : -1.0;
 $185 = $maxi;
 $186 = (($tmp) + ($185<<2)|0);
 HEAPF32[$186>>2] = $184;
 $187 = $4;
 $188 = ((($187)) + 16|0);
 $189 = $2;
 $190 = ((($189)) + 16|0);
 $191 = HEAP32[$190>>2]|0;
 _dMULTIPLY0_331($188,$191,$tmp);
 $192 = $maxi;
 $193 = (($l) + ($192<<2)|0);
 $194 = +HEAPF32[$193>>2];
 $195 = $max;
 $196 = $194 - $195;
 $197 = $sphere;
 $198 = +HEAPF32[$197>>2];
 $199 = $196 + $198;
 $200 = $4;
 $201 = ((($200)) + 32|0);
 HEAPF32[$201>>2] = $199;
 $0 = 1;
 $275 = $0;
 STACKTOP = sp;return ($275|0);
}
function __Z10dCollideSPPK6dxGeomS1_iP12dContactGeomi($o1,$o2,$flags,$contact,$skip) {
 $o1 = $o1|0;
 $o2 = $o2|0;
 $flags = $flags|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $depth = 0.0, $k = 0.0, $plane = 0, $sphere = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $o1;
 $2 = $o2;
 $3 = $flags;
 $4 = $contact;
 $5 = $skip;
 $6 = $5;
 $7 = ($6|0)>=(44);
 if (!($7)) {
  HEAP32[$vararg_buffer>>2] = 6644;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 6435;
  _dDebug(1,6358,$vararg_buffer);
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[540>>2]|0;
 $13 = ($11|0)==($12|0);
 if (!($13)) {
  HEAP32[$vararg_buffer2>>2] = 6644;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 6435;
  _dDebug(1,6444,$vararg_buffer2);
 }
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[548>>2]|0;
 $19 = ($17|0)==($18|0);
 if (!($19)) {
  HEAP32[$vararg_buffer6>>2] = 6644;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 6435;
  _dDebug(1,6655,$vararg_buffer6);
 }
 $20 = $1;
 $21 = $4;
 $22 = ((($21)) + 36|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = $4;
 $25 = ((($24)) + 40|0);
 HEAP32[$25>>2] = $23;
 $26 = $1;
 $27 = ((($26)) + 32|0);
 $sphere = $27;
 $28 = $2;
 $29 = ((($28)) + 32|0);
 $plane = $29;
 $30 = $1;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $plane;
 $34 = (+_dDOT($32,$33));
 $k = $34;
 $35 = $plane;
 $36 = ((($35)) + 12|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $k;
 $39 = $37 - $38;
 $40 = $sphere;
 $41 = +HEAPF32[$40>>2];
 $42 = $39 + $41;
 $depth = $42;
 $43 = $depth;
 $44 = $43 >= 0.0;
 if ($44) {
  $45 = $plane;
  $46 = +HEAPF32[$45>>2];
  $47 = $4;
  $48 = ((($47)) + 16|0);
  HEAPF32[$48>>2] = $46;
  $49 = $plane;
  $50 = ((($49)) + 4|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $4;
  $53 = ((($52)) + 16|0);
  $54 = ((($53)) + 4|0);
  HEAPF32[$54>>2] = $51;
  $55 = $plane;
  $56 = ((($55)) + 8|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $4;
  $59 = ((($58)) + 16|0);
  $60 = ((($59)) + 8|0);
  HEAPF32[$60>>2] = $57;
  $61 = $1;
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = +HEAPF32[$63>>2];
  $65 = $plane;
  $66 = +HEAPF32[$65>>2];
  $67 = $sphere;
  $68 = +HEAPF32[$67>>2];
  $69 = $66 * $68;
  $70 = $64 - $69;
  $71 = $4;
  HEAPF32[$71>>2] = $70;
  $72 = $1;
  $73 = ((($72)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($74)) + 4|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $plane;
  $78 = ((($77)) + 4|0);
  $79 = +HEAPF32[$78>>2];
  $80 = $sphere;
  $81 = +HEAPF32[$80>>2];
  $82 = $79 * $81;
  $83 = $76 - $82;
  $84 = $4;
  $85 = ((($84)) + 4|0);
  HEAPF32[$85>>2] = $83;
  $86 = $1;
  $87 = ((($86)) + 12|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 8|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $plane;
  $92 = ((($91)) + 8|0);
  $93 = +HEAPF32[$92>>2];
  $94 = $sphere;
  $95 = +HEAPF32[$94>>2];
  $96 = $93 * $95;
  $97 = $90 - $96;
  $98 = $4;
  $99 = ((($98)) + 8|0);
  HEAPF32[$99>>2] = $97;
  $100 = $depth;
  $101 = $4;
  $102 = ((($101)) + 32|0);
  HEAPF32[$102>>2] = $100;
  $0 = 1;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 } else {
  $0 = 0;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 return (0)|0;
}
function __Z10dCollideBBPK6dxGeomS1_iP12dContactGeomi($o1,$o2,$flags,$contact,$skip) {
 $o1 = $o1|0;
 $o2 = $o2|0;
 $flags = $flags|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $b1 = 0, $b2 = 0, $code = 0, $depth = 0;
 var $i = 0, $normal = 0, $num = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $normal = sp + 24|0;
 $depth = sp + 20|0;
 $code = sp + 16|0;
 $0 = $o1;
 $1 = $o2;
 $2 = $flags;
 $3 = $contact;
 $4 = $skip;
 $5 = $0;
 $6 = ((($5)) + 32|0);
 $b1 = $6;
 $7 = $1;
 $8 = ((($7)) + 32|0);
 $b2 = $8;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $b1;
 $16 = $1;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $b2;
 $23 = $2;
 $24 = $23 & 65535;
 $25 = $3;
 $26 = $4;
 $27 = (_dBoxBox($11,$14,$15,$18,$21,$22,$normal,$depth,$code,$24,$25,$26)|0);
 $num = $27;
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = $num;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = +HEAPF32[$normal>>2];
  $32 = -$31;
  $33 = $3;
  $34 = $i;
  $35 = $4;
  $36 = Math_imul($34, $35)|0;
  $37 = (($33) + ($36)|0);
  $38 = ((($37)) + 16|0);
  HEAPF32[$38>>2] = $32;
  $39 = ((($normal)) + 4|0);
  $40 = +HEAPF32[$39>>2];
  $41 = -$40;
  $42 = $3;
  $43 = $i;
  $44 = $4;
  $45 = Math_imul($43, $44)|0;
  $46 = (($42) + ($45)|0);
  $47 = ((($46)) + 16|0);
  $48 = ((($47)) + 4|0);
  HEAPF32[$48>>2] = $41;
  $49 = ((($normal)) + 8|0);
  $50 = +HEAPF32[$49>>2];
  $51 = -$50;
  $52 = $3;
  $53 = $i;
  $54 = $4;
  $55 = Math_imul($53, $54)|0;
  $56 = (($52) + ($55)|0);
  $57 = ((($56)) + 16|0);
  $58 = ((($57)) + 8|0);
  HEAPF32[$58>>2] = $51;
  $59 = $0;
  $60 = $3;
  $61 = $i;
  $62 = $4;
  $63 = Math_imul($61, $62)|0;
  $64 = (($60) + ($63)|0);
  $65 = ((($64)) + 36|0);
  HEAP32[$65>>2] = $59;
  $66 = $1;
  $67 = $3;
  $68 = $i;
  $69 = $4;
  $70 = Math_imul($68, $69)|0;
  $71 = (($67) + ($70)|0);
  $72 = ((($71)) + 40|0);
  HEAP32[$72>>2] = $66;
  $73 = $i;
  $74 = (($73) + 1)|0;
  $i = $74;
 }
 $75 = $num;
 STACKTOP = sp;return ($75|0);
}
function __Z10dCollideBPPK6dxGeomS1_iP12dContactGeomi($o1,$o2,$flags,$contact,$skip) {
 $o1 = $o1|0;
 $o2 = $o2|0;
 $flags = $flags|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0;
 var $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0;
 var $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0;
 var $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0;
 var $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0;
 var $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0;
 var $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0;
 var $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0.0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0;
 var $367 = 0.0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0, $383 = 0.0, $384 = 0;
 var $385 = 0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0;
 var $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0;
 var $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0.0, $440 = 0, $441 = 0.0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0.0;
 var $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0, $461 = 0.0, $462 = 0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0.0;
 var $493 = 0, $494 = 0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0;
 var $510 = 0, $511 = 0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0.0, $516 = 0, $517 = 0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0.0, $528 = 0;
 var $529 = 0, $53 = 0.0, $530 = 0.0, $531 = 0, $532 = 0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0.0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0.0, $552 = 0.0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0, $559 = 0.0, $56 = 0.0, $560 = 0, $561 = 0.0, $562 = 0, $563 = 0, $564 = 0.0;
 var $565 = 0, $566 = 0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0.0, $580 = 0, $581 = 0.0, $582 = 0.0;
 var $583 = 0.0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0.0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0, $6 = 0, $60 = 0.0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0.0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0.0, $610 = 0.0, $611 = 0, $612 = 0, $613 = 0.0, $614 = 0, $615 = 0, $616 = 0.0, $617 = 0.0, $618 = 0.0;
 var $619 = 0, $62 = 0.0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0.0, $626 = 0, $627 = 0, $628 = 0.0, $629 = 0, $63 = 0.0, $630 = 0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0.0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0.0, $65 = 0.0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0;
 var $655 = 0.0, $656 = 0, $657 = 0.0, $658 = 0, $659 = 0.0, $66 = 0.0, $660 = 0, $661 = 0.0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0.0, $670 = 0, $671 = 0.0, $672 = 0;
 var $673 = 0.0, $674 = 0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0.0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0.0, $686 = 0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0.0, $690 = 0.0;
 var $691 = 0.0, $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0.0, $699 = 0, $7 = 0, $70 = 0.0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0.0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0;
 var $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0.0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0.0, $719 = 0, $72 = 0, $720 = 0.0, $721 = 0, $722 = 0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0.0, $730 = 0, $731 = 0.0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0.0, $74 = 0.0, $740 = 0.0, $741 = 0.0, $742 = 0.0, $743 = 0, $744 = 0.0;
 var $745 = 0, $746 = 0.0, $747 = 0, $748 = 0, $749 = 0.0, $75 = 0.0, $750 = 0, $751 = 0, $752 = 0.0, $753 = 0.0, $754 = 0.0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0.0, $760 = 0.0, $761 = 0, $762 = 0;
 var $763 = 0.0, $764 = 0, $765 = 0, $766 = 0.0, $767 = 0.0, $768 = 0.0, $769 = 0, $77 = 0.0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0.0, $776 = 0, $777 = 0, $778 = 0.0, $779 = 0, $78 = 0.0, $780 = 0;
 var $781 = 0.0, $782 = 0.0, $783 = 0.0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0.0, $79 = 0.0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0.0, $796 = 0, $797 = 0, $798 = 0.0, $799 = 0;
 var $8 = 0, $80 = 0.0, $800 = 0, $801 = 0.0, $802 = 0.0, $803 = 0.0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0.0, $811 = 0, $812 = 0, $813 = 0.0, $814 = 0, $815 = 0, $816 = 0.0;
 var $817 = 0.0, $818 = 0.0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0.0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0.0, $833 = 0.0, $834 = 0.0;
 var $835 = 0.0, $836 = 0, $837 = 0.0, $838 = 0, $839 = 0.0, $84 = 0, $840 = 0, $841 = 0, $842 = 0.0, $843 = 0, $844 = 0, $845 = 0.0, $846 = 0.0, $847 = 0.0, $848 = 0, $849 = 0, $85 = 0.0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0.0, $854 = 0, $855 = 0, $856 = 0.0, $857 = 0, $858 = 0, $859 = 0.0, $86 = 0.0, $860 = 0.0, $861 = 0.0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0.0, $869 = 0, $87 = 0.0, $870 = 0;
 var $871 = 0.0, $872 = 0, $873 = 0, $874 = 0.0, $875 = 0.0, $876 = 0.0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0.0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0.0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0.0, $892 = 0, $893 = 0, $894 = 0.0, $895 = 0.0, $896 = 0.0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0.0, $904 = 0, $905 = 0, $906 = 0.0;
 var $907 = 0, $908 = 0, $909 = 0.0, $91 = 0, $910 = 0.0, $911 = 0.0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0.0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $A1 = 0.0, $A2 = 0.0, $A3 = 0.0, $B1 = 0.0, $B2 = 0.0, $B3 = 0.0, $Q1 = 0.0, $Q2 = 0.0, $Q3 = 0.0, $R = 0, $box = 0, $depth = 0.0;
 var $i = 0, $maxc = 0, $n = 0, $p = 0, $plane = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $p = sp + 32|0;
 $1 = $o1;
 $2 = $o2;
 $3 = $flags;
 $4 = $contact;
 $5 = $skip;
 $6 = $5;
 $7 = ($6|0)>=(44);
 if (!($7)) {
  HEAP32[$vararg_buffer>>2] = 6718;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 6435;
  _dDebug(1,6358,$vararg_buffer);
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[544>>2]|0;
 $13 = ($11|0)==($12|0);
 if (!($13)) {
  HEAP32[$vararg_buffer2>>2] = 6718;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 6435;
  _dDebug(1,6729,$vararg_buffer2);
 }
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[548>>2]|0;
 $19 = ($17|0)==($18|0);
 if (!($19)) {
  HEAP32[$vararg_buffer6>>2] = 6718;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 6435;
  _dDebug(1,6655,$vararg_buffer6);
 }
 $20 = $1;
 $21 = $4;
 $22 = ((($21)) + 36|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = $4;
 $25 = ((($24)) + 40|0);
 HEAP32[$25>>2] = $23;
 $26 = $1;
 $27 = ((($26)) + 32|0);
 $box = $27;
 $28 = $2;
 $29 = ((($28)) + 32|0);
 $plane = $29;
 $ret = 0;
 $30 = $1;
 $31 = ((($30)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $R = $32;
 $33 = $plane;
 $n = $33;
 $34 = $n;
 $35 = $R;
 $36 = (+_dDOT14($34,$35));
 $Q1 = $36;
 $37 = $n;
 $38 = $R;
 $39 = ((($38)) + 4|0);
 $40 = (+_dDOT14($37,$39));
 $Q2 = $40;
 $41 = $n;
 $42 = $R;
 $43 = ((($42)) + 8|0);
 $44 = (+_dDOT14($41,$43));
 $Q3 = $44;
 $45 = $box;
 $46 = +HEAPF32[$45>>2];
 $47 = $Q1;
 $48 = $46 * $47;
 $A1 = $48;
 $49 = $box;
 $50 = ((($49)) + 4|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $Q2;
 $53 = $51 * $52;
 $A2 = $53;
 $54 = $box;
 $55 = ((($54)) + 8|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $Q3;
 $58 = $56 * $57;
 $A3 = $58;
 $59 = $A1;
 $60 = $59;
 $61 = (+Math_abs((+$60)));
 $62 = $61;
 $B1 = $62;
 $63 = $A2;
 $64 = $63;
 $65 = (+Math_abs((+$64)));
 $66 = $65;
 $B2 = $66;
 $67 = $A3;
 $68 = $67;
 $69 = (+Math_abs((+$68)));
 $70 = $69;
 $B3 = $70;
 $71 = $plane;
 $72 = ((($71)) + 12|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $B1;
 $75 = $B2;
 $76 = $74 + $75;
 $77 = $B3;
 $78 = $76 + $77;
 $79 = 0.5 * $78;
 $80 = $73 + $79;
 $81 = $n;
 $82 = $1;
 $83 = ((($82)) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (+_dDOT($81,$84));
 $86 = $80 - $85;
 $depth = $86;
 $87 = $depth;
 $88 = $87 < 0.0;
 if ($88) {
  $0 = 0;
  $945 = $0;
  STACKTOP = sp;return ($945|0);
 }
 $89 = $3;
 $90 = $89 & 65535;
 $maxc = $90;
 $91 = $maxc;
 $92 = ($91|0)<(1);
 $$ = $92 ? 1 : $90;
 $maxc = $$;
 $93 = $maxc;
 $94 = ($93|0)>(3);
 $$$ = $94 ? 3 : $$;
 $maxc = $$$;
 $95 = $1;
 $96 = ((($95)) + 12|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = +HEAPF32[$97>>2];
 HEAPF32[$p>>2] = $98;
 $99 = $1;
 $100 = ((($99)) + 12|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ((($101)) + 4|0);
 $103 = +HEAPF32[$102>>2];
 $104 = ((($p)) + 4|0);
 HEAPF32[$104>>2] = $103;
 $105 = $1;
 $106 = ((($105)) + 12|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($107)) + 8|0);
 $109 = +HEAPF32[$108>>2];
 $110 = ((($p)) + 8|0);
 HEAPF32[$110>>2] = $109;
 $111 = $A1;
 $112 = $111 > 0.0;
 $113 = $box;
 $114 = +HEAPF32[$113>>2];
 $115 = 0.5 * $114;
 $116 = $R;
 $117 = +HEAPF32[$116>>2];
 $118 = $115 * $117;
 $119 = +HEAPF32[$p>>2];
 if ($112) {
  $120 = $119 - $118;
  HEAPF32[$p>>2] = $120;
  $121 = $box;
  $122 = +HEAPF32[$121>>2];
  $123 = 0.5 * $122;
  $124 = $R;
  $125 = ((($124)) + 16|0);
  $126 = +HEAPF32[$125>>2];
  $127 = $123 * $126;
  $128 = ((($p)) + 4|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $129 - $127;
  HEAPF32[$128>>2] = $130;
  $131 = $box;
  $132 = +HEAPF32[$131>>2];
  $133 = 0.5 * $132;
  $134 = $R;
  $135 = ((($134)) + 32|0);
  $136 = +HEAPF32[$135>>2];
  $137 = $133 * $136;
  $138 = ((($p)) + 8|0);
  $139 = +HEAPF32[$138>>2];
  $140 = $139 - $137;
  HEAPF32[$138>>2] = $140;
 } else {
  $141 = $119 + $118;
  HEAPF32[$p>>2] = $141;
  $142 = $box;
  $143 = +HEAPF32[$142>>2];
  $144 = 0.5 * $143;
  $145 = $R;
  $146 = ((($145)) + 16|0);
  $147 = +HEAPF32[$146>>2];
  $148 = $144 * $147;
  $149 = ((($p)) + 4|0);
  $150 = +HEAPF32[$149>>2];
  $151 = $150 + $148;
  HEAPF32[$149>>2] = $151;
  $152 = $box;
  $153 = +HEAPF32[$152>>2];
  $154 = 0.5 * $153;
  $155 = $R;
  $156 = ((($155)) + 32|0);
  $157 = +HEAPF32[$156>>2];
  $158 = $154 * $157;
  $159 = ((($p)) + 8|0);
  $160 = +HEAPF32[$159>>2];
  $161 = $160 + $158;
  HEAPF32[$159>>2] = $161;
 }
 $162 = $A2;
 $163 = $162 > 0.0;
 $164 = $box;
 $165 = ((($164)) + 4|0);
 $166 = +HEAPF32[$165>>2];
 $167 = 0.5 * $166;
 $168 = $R;
 $169 = ((($168)) + 4|0);
 $170 = +HEAPF32[$169>>2];
 $171 = $167 * $170;
 $172 = +HEAPF32[$p>>2];
 if ($163) {
  $173 = $172 - $171;
  HEAPF32[$p>>2] = $173;
  $174 = $box;
  $175 = ((($174)) + 4|0);
  $176 = +HEAPF32[$175>>2];
  $177 = 0.5 * $176;
  $178 = $R;
  $179 = ((($178)) + 20|0);
  $180 = +HEAPF32[$179>>2];
  $181 = $177 * $180;
  $182 = ((($p)) + 4|0);
  $183 = +HEAPF32[$182>>2];
  $184 = $183 - $181;
  HEAPF32[$182>>2] = $184;
  $185 = $box;
  $186 = ((($185)) + 4|0);
  $187 = +HEAPF32[$186>>2];
  $188 = 0.5 * $187;
  $189 = $R;
  $190 = ((($189)) + 36|0);
  $191 = +HEAPF32[$190>>2];
  $192 = $188 * $191;
  $193 = ((($p)) + 8|0);
  $194 = +HEAPF32[$193>>2];
  $195 = $194 - $192;
  HEAPF32[$193>>2] = $195;
 } else {
  $196 = $172 + $171;
  HEAPF32[$p>>2] = $196;
  $197 = $box;
  $198 = ((($197)) + 4|0);
  $199 = +HEAPF32[$198>>2];
  $200 = 0.5 * $199;
  $201 = $R;
  $202 = ((($201)) + 20|0);
  $203 = +HEAPF32[$202>>2];
  $204 = $200 * $203;
  $205 = ((($p)) + 4|0);
  $206 = +HEAPF32[$205>>2];
  $207 = $206 + $204;
  HEAPF32[$205>>2] = $207;
  $208 = $box;
  $209 = ((($208)) + 4|0);
  $210 = +HEAPF32[$209>>2];
  $211 = 0.5 * $210;
  $212 = $R;
  $213 = ((($212)) + 36|0);
  $214 = +HEAPF32[$213>>2];
  $215 = $211 * $214;
  $216 = ((($p)) + 8|0);
  $217 = +HEAPF32[$216>>2];
  $218 = $217 + $215;
  HEAPF32[$216>>2] = $218;
 }
 $219 = $A3;
 $220 = $219 > 0.0;
 $221 = $box;
 $222 = ((($221)) + 8|0);
 $223 = +HEAPF32[$222>>2];
 $224 = 0.5 * $223;
 $225 = $R;
 $226 = ((($225)) + 8|0);
 $227 = +HEAPF32[$226>>2];
 $228 = $224 * $227;
 $229 = +HEAPF32[$p>>2];
 if ($220) {
  $230 = $229 - $228;
  HEAPF32[$p>>2] = $230;
  $231 = $box;
  $232 = ((($231)) + 8|0);
  $233 = +HEAPF32[$232>>2];
  $234 = 0.5 * $233;
  $235 = $R;
  $236 = ((($235)) + 24|0);
  $237 = +HEAPF32[$236>>2];
  $238 = $234 * $237;
  $239 = ((($p)) + 4|0);
  $240 = +HEAPF32[$239>>2];
  $241 = $240 - $238;
  HEAPF32[$239>>2] = $241;
  $242 = $box;
  $243 = ((($242)) + 8|0);
  $244 = +HEAPF32[$243>>2];
  $245 = 0.5 * $244;
  $246 = $R;
  $247 = ((($246)) + 40|0);
  $248 = +HEAPF32[$247>>2];
  $249 = $245 * $248;
  $250 = ((($p)) + 8|0);
  $251 = +HEAPF32[$250>>2];
  $252 = $251 - $249;
  HEAPF32[$250>>2] = $252;
 } else {
  $253 = $229 + $228;
  HEAPF32[$p>>2] = $253;
  $254 = $box;
  $255 = ((($254)) + 8|0);
  $256 = +HEAPF32[$255>>2];
  $257 = 0.5 * $256;
  $258 = $R;
  $259 = ((($258)) + 24|0);
  $260 = +HEAPF32[$259>>2];
  $261 = $257 * $260;
  $262 = ((($p)) + 4|0);
  $263 = +HEAPF32[$262>>2];
  $264 = $263 + $261;
  HEAPF32[$262>>2] = $264;
  $265 = $box;
  $266 = ((($265)) + 8|0);
  $267 = +HEAPF32[$266>>2];
  $268 = 0.5 * $267;
  $269 = $R;
  $270 = ((($269)) + 40|0);
  $271 = +HEAPF32[$270>>2];
  $272 = $268 * $271;
  $273 = ((($p)) + 8|0);
  $274 = +HEAPF32[$273>>2];
  $275 = $274 + $272;
  HEAPF32[$273>>2] = $275;
 }
 $276 = +HEAPF32[$p>>2];
 $277 = $4;
 HEAPF32[$277>>2] = $276;
 $278 = ((($p)) + 4|0);
 $279 = +HEAPF32[$278>>2];
 $280 = $4;
 $281 = ((($280)) + 4|0);
 HEAPF32[$281>>2] = $279;
 $282 = ((($p)) + 8|0);
 $283 = +HEAPF32[$282>>2];
 $284 = $4;
 $285 = ((($284)) + 8|0);
 HEAPF32[$285>>2] = $283;
 $286 = $n;
 $287 = +HEAPF32[$286>>2];
 $288 = $4;
 $289 = ((($288)) + 16|0);
 HEAPF32[$289>>2] = $287;
 $290 = $n;
 $291 = ((($290)) + 4|0);
 $292 = +HEAPF32[$291>>2];
 $293 = $4;
 $294 = ((($293)) + 16|0);
 $295 = ((($294)) + 4|0);
 HEAPF32[$295>>2] = $292;
 $296 = $n;
 $297 = ((($296)) + 8|0);
 $298 = +HEAPF32[$297>>2];
 $299 = $4;
 $300 = ((($299)) + 16|0);
 $301 = ((($300)) + 8|0);
 HEAPF32[$301>>2] = $298;
 $302 = $depth;
 $303 = $4;
 $304 = ((($303)) + 32|0);
 HEAPF32[$304>>2] = $302;
 $ret = 1;
 $305 = $maxc;
 $306 = ($305|0)==(1);
 do {
  if (!($306)) {
   $307 = $n;
   $308 = +HEAPF32[$307>>2];
   $309 = $4;
   $310 = $5;
   $311 = (($309) + ($310)|0);
   $312 = ((($311)) + 16|0);
   HEAPF32[$312>>2] = $308;
   $313 = $n;
   $314 = ((($313)) + 4|0);
   $315 = +HEAPF32[$314>>2];
   $316 = $4;
   $317 = $5;
   $318 = (($316) + ($317)|0);
   $319 = ((($318)) + 16|0);
   $320 = ((($319)) + 4|0);
   HEAPF32[$320>>2] = $315;
   $321 = $n;
   $322 = ((($321)) + 8|0);
   $323 = +HEAPF32[$322>>2];
   $324 = $4;
   $325 = $5;
   $326 = (($324) + ($325)|0);
   $327 = ((($326)) + 16|0);
   $328 = ((($327)) + 8|0);
   HEAPF32[$328>>2] = $323;
   $329 = $maxc;
   $330 = ($329|0)==(3);
   if ($330) {
    $331 = $n;
    $332 = +HEAPF32[$331>>2];
    $333 = $4;
    $334 = $5;
    $335 = $334<<1;
    $336 = (($333) + ($335)|0);
    $337 = ((($336)) + 16|0);
    HEAPF32[$337>>2] = $332;
    $338 = $n;
    $339 = ((($338)) + 4|0);
    $340 = +HEAPF32[$339>>2];
    $341 = $4;
    $342 = $5;
    $343 = $342<<1;
    $344 = (($341) + ($343)|0);
    $345 = ((($344)) + 16|0);
    $346 = ((($345)) + 4|0);
    HEAPF32[$346>>2] = $340;
    $347 = $n;
    $348 = ((($347)) + 8|0);
    $349 = +HEAPF32[$348>>2];
    $350 = $4;
    $351 = $5;
    $352 = $351<<1;
    $353 = (($350) + ($352)|0);
    $354 = ((($353)) + 16|0);
    $355 = ((($354)) + 8|0);
    HEAPF32[$355>>2] = $349;
   }
   $356 = $B1;
   $357 = $B2;
   $358 = $356 < $357;
   $359 = $B3;
   if ($358) {
    $360 = $B1;
    $361 = $359 < $360;
    if ($361) {
     label = 30;
    } else {
     $362 = $B1;
     $363 = $depth;
     $364 = $363 - $362;
     $depth = $364;
     $365 = $depth;
     $366 = $365 < 0.0;
     if ($366) {
      break;
     }
     $367 = $A1;
     $368 = $367 > 0.0;
     $369 = +HEAPF32[$p>>2];
     $370 = $box;
     $371 = +HEAPF32[$370>>2];
     $372 = $R;
     $373 = +HEAPF32[$372>>2];
     $374 = $371 * $373;
     if ($368) {
      $375 = $369 + $374;
      $376 = $4;
      $377 = $5;
      $378 = $377;
      $379 = (($376) + ($378)|0);
      HEAPF32[$379>>2] = $375;
      $380 = ((($p)) + 4|0);
      $381 = +HEAPF32[$380>>2];
      $382 = $box;
      $383 = +HEAPF32[$382>>2];
      $384 = $R;
      $385 = ((($384)) + 16|0);
      $386 = +HEAPF32[$385>>2];
      $387 = $383 * $386;
      $388 = $381 + $387;
      $389 = $4;
      $390 = $5;
      $391 = $390;
      $392 = (($389) + ($391)|0);
      $393 = ((($392)) + 4|0);
      HEAPF32[$393>>2] = $388;
      $394 = ((($p)) + 8|0);
      $395 = +HEAPF32[$394>>2];
      $396 = $box;
      $397 = +HEAPF32[$396>>2];
      $398 = $R;
      $399 = ((($398)) + 32|0);
      $400 = +HEAPF32[$399>>2];
      $401 = $397 * $400;
      $402 = $395 + $401;
      $403 = $4;
      $404 = $5;
      $405 = $404;
      $406 = (($403) + ($405)|0);
      $407 = ((($406)) + 8|0);
      HEAPF32[$407>>2] = $402;
     } else {
      $408 = $369 - $374;
      $409 = $4;
      $410 = $5;
      $411 = $410;
      $412 = (($409) + ($411)|0);
      HEAPF32[$412>>2] = $408;
      $413 = ((($p)) + 4|0);
      $414 = +HEAPF32[$413>>2];
      $415 = $box;
      $416 = +HEAPF32[$415>>2];
      $417 = $R;
      $418 = ((($417)) + 16|0);
      $419 = +HEAPF32[$418>>2];
      $420 = $416 * $419;
      $421 = $414 - $420;
      $422 = $4;
      $423 = $5;
      $424 = $423;
      $425 = (($422) + ($424)|0);
      $426 = ((($425)) + 4|0);
      HEAPF32[$426>>2] = $421;
      $427 = ((($p)) + 8|0);
      $428 = +HEAPF32[$427>>2];
      $429 = $box;
      $430 = +HEAPF32[$429>>2];
      $431 = $R;
      $432 = ((($431)) + 32|0);
      $433 = +HEAPF32[$432>>2];
      $434 = $430 * $433;
      $435 = $428 - $434;
      $436 = $4;
      $437 = $5;
      $438 = $437;
      $439 = (($436) + ($438)|0);
      $440 = ((($439)) + 8|0);
      HEAPF32[$440>>2] = $435;
     }
     $441 = $depth;
     $442 = $4;
     $443 = $5;
     $444 = $443;
     $445 = (($442) + ($444)|0);
     $446 = ((($445)) + 32|0);
     HEAPF32[$446>>2] = $441;
     $447 = $ret;
     $448 = (($447) + 1)|0;
     $ret = $448;
     $449 = $maxc;
     $450 = ($449|0)==(2);
     if ($450) {
      break;
     }
     $451 = $B2;
     $452 = $B3;
     $453 = $451 < $452;
     if ($453) {
      label = 47;
     } else {
      label = 52;
     }
    }
   } else {
    $454 = $B2;
    $455 = $359 < $454;
    if ($455) {
     label = 30;
    } else {
     $554 = $B2;
     $555 = $depth;
     $556 = $555 - $554;
     $depth = $556;
     $557 = $depth;
     $558 = $557 < 0.0;
     if ($558) {
      break;
     }
     $559 = $A2;
     $560 = $559 > 0.0;
     $561 = +HEAPF32[$p>>2];
     $562 = $box;
     $563 = ((($562)) + 4|0);
     $564 = +HEAPF32[$563>>2];
     $565 = $R;
     $566 = ((($565)) + 4|0);
     $567 = +HEAPF32[$566>>2];
     $568 = $564 * $567;
     if ($560) {
      $569 = $561 + $568;
      $570 = $4;
      $571 = $5;
      $572 = $571;
      $573 = (($570) + ($572)|0);
      HEAPF32[$573>>2] = $569;
      $574 = ((($p)) + 4|0);
      $575 = +HEAPF32[$574>>2];
      $576 = $box;
      $577 = ((($576)) + 4|0);
      $578 = +HEAPF32[$577>>2];
      $579 = $R;
      $580 = ((($579)) + 20|0);
      $581 = +HEAPF32[$580>>2];
      $582 = $578 * $581;
      $583 = $575 + $582;
      $584 = $4;
      $585 = $5;
      $586 = $585;
      $587 = (($584) + ($586)|0);
      $588 = ((($587)) + 4|0);
      HEAPF32[$588>>2] = $583;
      $589 = ((($p)) + 8|0);
      $590 = +HEAPF32[$589>>2];
      $591 = $box;
      $592 = ((($591)) + 4|0);
      $593 = +HEAPF32[$592>>2];
      $594 = $R;
      $595 = ((($594)) + 36|0);
      $596 = +HEAPF32[$595>>2];
      $597 = $593 * $596;
      $598 = $590 + $597;
      $599 = $4;
      $600 = $5;
      $601 = $600;
      $602 = (($599) + ($601)|0);
      $603 = ((($602)) + 8|0);
      HEAPF32[$603>>2] = $598;
     } else {
      $604 = $561 - $568;
      $605 = $4;
      $606 = $5;
      $607 = $606;
      $608 = (($605) + ($607)|0);
      HEAPF32[$608>>2] = $604;
      $609 = ((($p)) + 4|0);
      $610 = +HEAPF32[$609>>2];
      $611 = $box;
      $612 = ((($611)) + 4|0);
      $613 = +HEAPF32[$612>>2];
      $614 = $R;
      $615 = ((($614)) + 20|0);
      $616 = +HEAPF32[$615>>2];
      $617 = $613 * $616;
      $618 = $610 - $617;
      $619 = $4;
      $620 = $5;
      $621 = $620;
      $622 = (($619) + ($621)|0);
      $623 = ((($622)) + 4|0);
      HEAPF32[$623>>2] = $618;
      $624 = ((($p)) + 8|0);
      $625 = +HEAPF32[$624>>2];
      $626 = $box;
      $627 = ((($626)) + 4|0);
      $628 = +HEAPF32[$627>>2];
      $629 = $R;
      $630 = ((($629)) + 36|0);
      $631 = +HEAPF32[$630>>2];
      $632 = $628 * $631;
      $633 = $625 - $632;
      $634 = $4;
      $635 = $5;
      $636 = $635;
      $637 = (($634) + ($636)|0);
      $638 = ((($637)) + 8|0);
      HEAPF32[$638>>2] = $633;
     }
     $639 = $depth;
     $640 = $4;
     $641 = $5;
     $642 = $641;
     $643 = (($640) + ($642)|0);
     $644 = ((($643)) + 32|0);
     HEAPF32[$644>>2] = $639;
     $645 = $ret;
     $646 = (($645) + 1)|0;
     $ret = $646;
     $647 = $maxc;
     $648 = ($647|0)==(2);
     if ($648) {
      break;
     }
     $649 = $B1;
     $650 = $B3;
     $651 = $649 < $650;
     if ($651) {
      label = 42;
     } else {
      label = 52;
     }
    }
   }
   if ((label|0) == 52) {
    $832 = $B3;
    $833 = $depth;
    $834 = $833 - $832;
    $depth = $834;
    $835 = $depth;
    $836 = $835 < 0.0;
    if ($836) {
     break;
    }
    $837 = $A3;
    $838 = $837 > 0.0;
    $839 = +HEAPF32[$p>>2];
    $840 = $box;
    $841 = ((($840)) + 8|0);
    $842 = +HEAPF32[$841>>2];
    $843 = $R;
    $844 = ((($843)) + 8|0);
    $845 = +HEAPF32[$844>>2];
    $846 = $842 * $845;
    if ($838) {
     $847 = $839 + $846;
     $848 = $4;
     $849 = $5;
     $850 = $849<<1;
     $851 = (($848) + ($850)|0);
     HEAPF32[$851>>2] = $847;
     $852 = ((($p)) + 4|0);
     $853 = +HEAPF32[$852>>2];
     $854 = $box;
     $855 = ((($854)) + 8|0);
     $856 = +HEAPF32[$855>>2];
     $857 = $R;
     $858 = ((($857)) + 24|0);
     $859 = +HEAPF32[$858>>2];
     $860 = $856 * $859;
     $861 = $853 + $860;
     $862 = $4;
     $863 = $5;
     $864 = $863<<1;
     $865 = (($862) + ($864)|0);
     $866 = ((($865)) + 4|0);
     HEAPF32[$866>>2] = $861;
     $867 = ((($p)) + 8|0);
     $868 = +HEAPF32[$867>>2];
     $869 = $box;
     $870 = ((($869)) + 8|0);
     $871 = +HEAPF32[$870>>2];
     $872 = $R;
     $873 = ((($872)) + 40|0);
     $874 = +HEAPF32[$873>>2];
     $875 = $871 * $874;
     $876 = $868 + $875;
     $877 = $4;
     $878 = $5;
     $879 = $878<<1;
     $880 = (($877) + ($879)|0);
     $881 = ((($880)) + 8|0);
     HEAPF32[$881>>2] = $876;
    } else {
     $882 = $839 - $846;
     $883 = $4;
     $884 = $5;
     $885 = $884<<1;
     $886 = (($883) + ($885)|0);
     HEAPF32[$886>>2] = $882;
     $887 = ((($p)) + 4|0);
     $888 = +HEAPF32[$887>>2];
     $889 = $box;
     $890 = ((($889)) + 8|0);
     $891 = +HEAPF32[$890>>2];
     $892 = $R;
     $893 = ((($892)) + 24|0);
     $894 = +HEAPF32[$893>>2];
     $895 = $891 * $894;
     $896 = $888 - $895;
     $897 = $4;
     $898 = $5;
     $899 = $898<<1;
     $900 = (($897) + ($899)|0);
     $901 = ((($900)) + 4|0);
     HEAPF32[$901>>2] = $896;
     $902 = ((($p)) + 8|0);
     $903 = +HEAPF32[$902>>2];
     $904 = $box;
     $905 = ((($904)) + 8|0);
     $906 = +HEAPF32[$905>>2];
     $907 = $R;
     $908 = ((($907)) + 40|0);
     $909 = +HEAPF32[$908>>2];
     $910 = $906 * $909;
     $911 = $903 - $910;
     $912 = $4;
     $913 = $5;
     $914 = $913<<1;
     $915 = (($912) + ($914)|0);
     $916 = ((($915)) + 8|0);
     HEAPF32[$916>>2] = $911;
    }
    $917 = $depth;
    $918 = $4;
    $919 = $5;
    $920 = $919<<1;
    $921 = (($918) + ($920)|0);
    $922 = ((($921)) + 32|0);
    HEAPF32[$922>>2] = $917;
    $923 = $ret;
    $924 = (($923) + 1)|0;
    $ret = $924;
    break;
   }
   if ((label|0) == 30) {
    $456 = $B3;
    $457 = $depth;
    $458 = $457 - $456;
    $depth = $458;
    $459 = $depth;
    $460 = $459 < 0.0;
    if ($460) {
     break;
    }
    $461 = $A3;
    $462 = $461 > 0.0;
    $463 = +HEAPF32[$p>>2];
    $464 = $box;
    $465 = ((($464)) + 8|0);
    $466 = +HEAPF32[$465>>2];
    $467 = $R;
    $468 = ((($467)) + 8|0);
    $469 = +HEAPF32[$468>>2];
    $470 = $466 * $469;
    if ($462) {
     $471 = $463 + $470;
     $472 = $4;
     $473 = $5;
     $474 = $473;
     $475 = (($472) + ($474)|0);
     HEAPF32[$475>>2] = $471;
     $476 = ((($p)) + 4|0);
     $477 = +HEAPF32[$476>>2];
     $478 = $box;
     $479 = ((($478)) + 8|0);
     $480 = +HEAPF32[$479>>2];
     $481 = $R;
     $482 = ((($481)) + 24|0);
     $483 = +HEAPF32[$482>>2];
     $484 = $480 * $483;
     $485 = $477 + $484;
     $486 = $4;
     $487 = $5;
     $488 = $487;
     $489 = (($486) + ($488)|0);
     $490 = ((($489)) + 4|0);
     HEAPF32[$490>>2] = $485;
     $491 = ((($p)) + 8|0);
     $492 = +HEAPF32[$491>>2];
     $493 = $box;
     $494 = ((($493)) + 8|0);
     $495 = +HEAPF32[$494>>2];
     $496 = $R;
     $497 = ((($496)) + 40|0);
     $498 = +HEAPF32[$497>>2];
     $499 = $495 * $498;
     $500 = $492 + $499;
     $501 = $4;
     $502 = $5;
     $503 = $502;
     $504 = (($501) + ($503)|0);
     $505 = ((($504)) + 8|0);
     HEAPF32[$505>>2] = $500;
    } else {
     $506 = $463 - $470;
     $507 = $4;
     $508 = $5;
     $509 = $508;
     $510 = (($507) + ($509)|0);
     HEAPF32[$510>>2] = $506;
     $511 = ((($p)) + 4|0);
     $512 = +HEAPF32[$511>>2];
     $513 = $box;
     $514 = ((($513)) + 8|0);
     $515 = +HEAPF32[$514>>2];
     $516 = $R;
     $517 = ((($516)) + 24|0);
     $518 = +HEAPF32[$517>>2];
     $519 = $515 * $518;
     $520 = $512 - $519;
     $521 = $4;
     $522 = $5;
     $523 = $522;
     $524 = (($521) + ($523)|0);
     $525 = ((($524)) + 4|0);
     HEAPF32[$525>>2] = $520;
     $526 = ((($p)) + 8|0);
     $527 = +HEAPF32[$526>>2];
     $528 = $box;
     $529 = ((($528)) + 8|0);
     $530 = +HEAPF32[$529>>2];
     $531 = $R;
     $532 = ((($531)) + 40|0);
     $533 = +HEAPF32[$532>>2];
     $534 = $530 * $533;
     $535 = $527 - $534;
     $536 = $4;
     $537 = $5;
     $538 = $537;
     $539 = (($536) + ($538)|0);
     $540 = ((($539)) + 8|0);
     HEAPF32[$540>>2] = $535;
    }
    $541 = $depth;
    $542 = $4;
    $543 = $5;
    $544 = $543;
    $545 = (($542) + ($544)|0);
    $546 = ((($545)) + 32|0);
    HEAPF32[$546>>2] = $541;
    $547 = $ret;
    $548 = (($547) + 1)|0;
    $ret = $548;
    $549 = $maxc;
    $550 = ($549|0)==(2);
    if ($550) {
     break;
    }
    $551 = $B1;
    $552 = $B2;
    $553 = $551 < $552;
    if ($553) {
     label = 42;
    } else {
     label = 47;
    }
   }
   if ((label|0) == 42) {
    $652 = $B1;
    $653 = $depth;
    $654 = $653 - $652;
    $depth = $654;
    $655 = $depth;
    $656 = $655 < 0.0;
    if ($656) {
     break;
    }
    $657 = $A1;
    $658 = $657 > 0.0;
    $659 = +HEAPF32[$p>>2];
    $660 = $box;
    $661 = +HEAPF32[$660>>2];
    $662 = $R;
    $663 = +HEAPF32[$662>>2];
    $664 = $661 * $663;
    if ($658) {
     $665 = $659 + $664;
     $666 = $4;
     $667 = $5;
     $668 = $667<<1;
     $669 = (($666) + ($668)|0);
     HEAPF32[$669>>2] = $665;
     $670 = ((($p)) + 4|0);
     $671 = +HEAPF32[$670>>2];
     $672 = $box;
     $673 = +HEAPF32[$672>>2];
     $674 = $R;
     $675 = ((($674)) + 16|0);
     $676 = +HEAPF32[$675>>2];
     $677 = $673 * $676;
     $678 = $671 + $677;
     $679 = $4;
     $680 = $5;
     $681 = $680<<1;
     $682 = (($679) + ($681)|0);
     $683 = ((($682)) + 4|0);
     HEAPF32[$683>>2] = $678;
     $684 = ((($p)) + 8|0);
     $685 = +HEAPF32[$684>>2];
     $686 = $box;
     $687 = +HEAPF32[$686>>2];
     $688 = $R;
     $689 = ((($688)) + 32|0);
     $690 = +HEAPF32[$689>>2];
     $691 = $687 * $690;
     $692 = $685 + $691;
     $693 = $4;
     $694 = $5;
     $695 = $694<<1;
     $696 = (($693) + ($695)|0);
     $697 = ((($696)) + 8|0);
     HEAPF32[$697>>2] = $692;
    } else {
     $698 = $659 - $664;
     $699 = $4;
     $700 = $5;
     $701 = $700<<1;
     $702 = (($699) + ($701)|0);
     HEAPF32[$702>>2] = $698;
     $703 = ((($p)) + 4|0);
     $704 = +HEAPF32[$703>>2];
     $705 = $box;
     $706 = +HEAPF32[$705>>2];
     $707 = $R;
     $708 = ((($707)) + 16|0);
     $709 = +HEAPF32[$708>>2];
     $710 = $706 * $709;
     $711 = $704 - $710;
     $712 = $4;
     $713 = $5;
     $714 = $713<<1;
     $715 = (($712) + ($714)|0);
     $716 = ((($715)) + 4|0);
     HEAPF32[$716>>2] = $711;
     $717 = ((($p)) + 8|0);
     $718 = +HEAPF32[$717>>2];
     $719 = $box;
     $720 = +HEAPF32[$719>>2];
     $721 = $R;
     $722 = ((($721)) + 32|0);
     $723 = +HEAPF32[$722>>2];
     $724 = $720 * $723;
     $725 = $718 - $724;
     $726 = $4;
     $727 = $5;
     $728 = $727<<1;
     $729 = (($726) + ($728)|0);
     $730 = ((($729)) + 8|0);
     HEAPF32[$730>>2] = $725;
    }
    $731 = $depth;
    $732 = $4;
    $733 = $5;
    $734 = $733<<1;
    $735 = (($732) + ($734)|0);
    $736 = ((($735)) + 32|0);
    HEAPF32[$736>>2] = $731;
    $737 = $ret;
    $738 = (($737) + 1)|0;
    $ret = $738;
    break;
   }
   else if ((label|0) == 47) {
    $739 = $B2;
    $740 = $depth;
    $741 = $740 - $739;
    $depth = $741;
    $742 = $depth;
    $743 = $742 < 0.0;
    if ($743) {
     break;
    }
    $744 = $A2;
    $745 = $744 > 0.0;
    $746 = +HEAPF32[$p>>2];
    $747 = $box;
    $748 = ((($747)) + 4|0);
    $749 = +HEAPF32[$748>>2];
    $750 = $R;
    $751 = ((($750)) + 4|0);
    $752 = +HEAPF32[$751>>2];
    $753 = $749 * $752;
    if ($745) {
     $754 = $746 + $753;
     $755 = $4;
     $756 = $5;
     $757 = $756<<1;
     $758 = (($755) + ($757)|0);
     HEAPF32[$758>>2] = $754;
     $759 = ((($p)) + 4|0);
     $760 = +HEAPF32[$759>>2];
     $761 = $box;
     $762 = ((($761)) + 4|0);
     $763 = +HEAPF32[$762>>2];
     $764 = $R;
     $765 = ((($764)) + 20|0);
     $766 = +HEAPF32[$765>>2];
     $767 = $763 * $766;
     $768 = $760 + $767;
     $769 = $4;
     $770 = $5;
     $771 = $770<<1;
     $772 = (($769) + ($771)|0);
     $773 = ((($772)) + 4|0);
     HEAPF32[$773>>2] = $768;
     $774 = ((($p)) + 8|0);
     $775 = +HEAPF32[$774>>2];
     $776 = $box;
     $777 = ((($776)) + 4|0);
     $778 = +HEAPF32[$777>>2];
     $779 = $R;
     $780 = ((($779)) + 36|0);
     $781 = +HEAPF32[$780>>2];
     $782 = $778 * $781;
     $783 = $775 + $782;
     $784 = $4;
     $785 = $5;
     $786 = $785<<1;
     $787 = (($784) + ($786)|0);
     $788 = ((($787)) + 8|0);
     HEAPF32[$788>>2] = $783;
    } else {
     $789 = $746 - $753;
     $790 = $4;
     $791 = $5;
     $792 = $791<<1;
     $793 = (($790) + ($792)|0);
     HEAPF32[$793>>2] = $789;
     $794 = ((($p)) + 4|0);
     $795 = +HEAPF32[$794>>2];
     $796 = $box;
     $797 = ((($796)) + 4|0);
     $798 = +HEAPF32[$797>>2];
     $799 = $R;
     $800 = ((($799)) + 20|0);
     $801 = +HEAPF32[$800>>2];
     $802 = $798 * $801;
     $803 = $795 - $802;
     $804 = $4;
     $805 = $5;
     $806 = $805<<1;
     $807 = (($804) + ($806)|0);
     $808 = ((($807)) + 4|0);
     HEAPF32[$808>>2] = $803;
     $809 = ((($p)) + 8|0);
     $810 = +HEAPF32[$809>>2];
     $811 = $box;
     $812 = ((($811)) + 4|0);
     $813 = +HEAPF32[$812>>2];
     $814 = $R;
     $815 = ((($814)) + 36|0);
     $816 = +HEAPF32[$815>>2];
     $817 = $813 * $816;
     $818 = $810 - $817;
     $819 = $4;
     $820 = $5;
     $821 = $820<<1;
     $822 = (($819) + ($821)|0);
     $823 = ((($822)) + 8|0);
     HEAPF32[$823>>2] = $818;
    }
    $824 = $depth;
    $825 = $4;
    $826 = $5;
    $827 = $826<<1;
    $828 = (($825) + ($827)|0);
    $829 = ((($828)) + 32|0);
    HEAPF32[$829>>2] = $824;
    $830 = $ret;
    $831 = (($830) + 1)|0;
    $ret = $831;
    break;
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $925 = $i;
  $926 = $ret;
  $927 = ($925|0)<($926|0);
  if (!($927)) {
   break;
  }
  $928 = $1;
  $929 = $4;
  $930 = $i;
  $931 = $5;
  $932 = Math_imul($930, $931)|0;
  $933 = (($929) + ($932)|0);
  $934 = ((($933)) + 36|0);
  HEAP32[$934>>2] = $928;
  $935 = $2;
  $936 = $4;
  $937 = $i;
  $938 = $5;
  $939 = Math_imul($937, $938)|0;
  $940 = (($936) + ($939)|0);
  $941 = ((($940)) + 40|0);
  HEAP32[$941>>2] = $935;
  $942 = $i;
  $943 = (($942) + 1)|0;
  $i = $943;
 }
 $944 = $ret;
 $0 = $944;
 $945 = $0;
 STACKTOP = sp;return ($945|0);
}
function __Z10dCollideCSPK6dxGeomS1_iP12dContactGeomi($o1,$o2,$flags,$contact,$skip) {
 $o1 = $o1|0;
 $o2 = $o2|0;
 $flags = $flags|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0.0, $98 = 0.0, $99 = 0, $alpha = 0.0, $ccyl = 0, $lz2 = 0.0, $p = 0, $sphere = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $p = sp + 24|0;
 $0 = $o1;
 $1 = $o2;
 $2 = $flags;
 $3 = $contact;
 $4 = $skip;
 $5 = $4;
 $6 = ($5|0)>=(44);
 if (!($6)) {
  HEAP32[$vararg_buffer>>2] = 6790;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 6435;
  _dDebug(1,6358,$vararg_buffer);
 }
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[552>>2]|0;
 $12 = ($10|0)==($11|0);
 if (!($12)) {
  HEAP32[$vararg_buffer2>>2] = 6790;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 6435;
  _dDebug(1,6801,$vararg_buffer2);
 }
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[540>>2]|0;
 $18 = ($16|0)==($17|0);
 if (!($18)) {
  HEAP32[$vararg_buffer6>>2] = 6790;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 6435;
  _dDebug(1,6508,$vararg_buffer6);
 }
 $19 = $0;
 $20 = $3;
 $21 = ((($20)) + 36|0);
 HEAP32[$21>>2] = $19;
 $22 = $1;
 $23 = $3;
 $24 = ((($23)) + 40|0);
 HEAP32[$24>>2] = $22;
 $25 = $0;
 $26 = ((($25)) + 32|0);
 $ccyl = $26;
 $27 = $1;
 $28 = ((($27)) + 32|0);
 $sphere = $28;
 $29 = $0;
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 8|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = +HEAPF32[$36>>2];
 $38 = $0;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = +HEAPF32[$40>>2];
 $42 = $37 - $41;
 $43 = $33 * $42;
 $44 = $0;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 24|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $1;
 $50 = ((($49)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 4|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $0;
 $55 = ((($54)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($56)) + 4|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $53 - $58;
 $60 = $48 * $59;
 $61 = $43 + $60;
 $62 = $0;
 $63 = ((($62)) + 16|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($64)) + 40|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $1;
 $68 = ((($67)) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 8|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $0;
 $73 = ((($72)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($74)) + 8|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $71 - $76;
 $78 = $66 * $77;
 $79 = $61 + $78;
 $alpha = $79;
 $80 = $ccyl;
 $81 = ((($80)) + 4|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $82 * 0.5;
 $lz2 = $83;
 $84 = $alpha;
 $85 = $lz2;
 $86 = $84 > $85;
 if ($86) {
  $87 = $lz2;
  $alpha = $87;
 }
 $88 = $alpha;
 $89 = $lz2;
 $90 = -$89;
 $91 = $88 < $90;
 if ($91) {
  $92 = $lz2;
  $93 = -$92;
  $alpha = $93;
 }
 $94 = $0;
 $95 = ((($94)) + 12|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = +HEAPF32[$96>>2];
 $98 = $alpha;
 $99 = $0;
 $100 = ((($99)) + 16|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ((($101)) + 8|0);
 $103 = +HEAPF32[$102>>2];
 $104 = $98 * $103;
 $105 = $97 + $104;
 HEAPF32[$p>>2] = $105;
 $106 = $0;
 $107 = ((($106)) + 12|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ((($108)) + 4|0);
 $110 = +HEAPF32[$109>>2];
 $111 = $alpha;
 $112 = $0;
 $113 = ((($112)) + 16|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ((($114)) + 24|0);
 $116 = +HEAPF32[$115>>2];
 $117 = $111 * $116;
 $118 = $110 + $117;
 $119 = ((($p)) + 4|0);
 HEAPF32[$119>>2] = $118;
 $120 = $0;
 $121 = ((($120)) + 12|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 8|0);
 $124 = +HEAPF32[$123>>2];
 $125 = $alpha;
 $126 = $0;
 $127 = ((($126)) + 16|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ((($128)) + 40|0);
 $130 = +HEAPF32[$129>>2];
 $131 = $125 * $130;
 $132 = $124 + $131;
 $133 = ((($p)) + 8|0);
 HEAPF32[$133>>2] = $132;
 $134 = $ccyl;
 $135 = +HEAPF32[$134>>2];
 $136 = $1;
 $137 = ((($136)) + 12|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = $sphere;
 $140 = +HEAPF32[$139>>2];
 $141 = $3;
 $142 = (__ZL15dCollideSpheresPffS_fP12dContactGeom($p,$135,$138,$140,$141)|0);
 STACKTOP = sp;return ($142|0);
}
function __Z10dCollideCCPK6dxGeomS1_iP12dContactGeomi($o1,$o2,$flags,$contact,$skip) {
 $o1 = $o1|0;
 $o2 = $o2|0;
 $flags = $flags|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0;
 var $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0;
 var $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0.0, $523 = 0, $524 = 0, $525 = 0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0, $53 = 0.0;
 var $530 = 0.0, $531 = 0.0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0.0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0, $562 = 0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0.0, $568 = 0, $569 = 0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0.0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $a1a2 = 0.0, $a1hi = 0.0;
 var $a1lo = 0.0, $a2hi = 0.0, $a2lo = 0.0, $alpha1 = 0.0, $alpha2 = 0.0, $axis1 = 0, $axis2 = 0, $c2 = 0, $count = 0, $cyl1 = 0, $cyl2 = 0, $delta = 0, $det = 0.0, $fix1 = 0, $fix2 = 0, $gradient = 0.0, $gradient1 = 0.0, $hi = 0.0, $i = 0, $k = 0.0;
 var $lo = 0.0, $lz1 = 0.0, $lz2 = 0.0, $n1 = 0, $n2 = 0, $num_contacts = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $pos1 = 0, $pos2 = 0, $q = 0, $q1 = 0.0, $q2 = 0.0, $sphere1 = 0, $sphere2 = 0, $tmp = 0, $tolerance = 0.0, $vararg_buffer = 0;
 var $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer17 = sp + 24|0;
 $vararg_buffer13 = sp + 16|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer = sp;
 $axis1 = sp + 188|0;
 $axis2 = sp + 176|0;
 $sphere1 = sp + 156|0;
 $sphere2 = sp + 144|0;
 $q = sp + 112|0;
 $delta = sp + 56|0;
 $tmp = sp + 36|0;
 $1 = $o1;
 $2 = $o2;
 $3 = $flags;
 $4 = $contact;
 $5 = $skip;
 $tolerance = 9.9999997473787516E-6;
 $6 = $5;
 $7 = ($6|0)>=(44);
 if (!($7)) {
  HEAP32[$vararg_buffer>>2] = 6868;
  $vararg_ptr8 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = 6435;
  _dDebug(1,6358,$vararg_buffer);
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[552>>2]|0;
 $13 = ($11|0)==($12|0);
 if (!($13)) {
  HEAP32[$vararg_buffer9>>2] = 6868;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = 6435;
  _dDebug(1,6801,$vararg_buffer9);
 }
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[552>>2]|0;
 $19 = ($17|0)==($18|0);
 if (!($19)) {
  HEAP32[$vararg_buffer13>>2] = 6868;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = 6435;
  _dDebug(1,6879,$vararg_buffer13);
 }
 $20 = $1;
 $21 = $4;
 $22 = ((($21)) + 36|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = $4;
 $25 = ((($24)) + 40|0);
 HEAP32[$25>>2] = $23;
 $26 = $1;
 $27 = ((($26)) + 32|0);
 $cyl1 = $27;
 $28 = $2;
 $29 = ((($28)) + 32|0);
 $cyl2 = $29;
 $30 = $cyl1;
 $31 = ((($30)) + 4|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $32 * 0.5;
 $lz1 = $33;
 $34 = $cyl2;
 $35 = ((($34)) + 4|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $36 * 0.5;
 $lz2 = $37;
 $38 = $1;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $pos1 = $40;
 $41 = $2;
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $pos2 = $43;
 $44 = $1;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 8|0);
 $48 = +HEAPF32[$47>>2];
 HEAPF32[$axis1>>2] = $48;
 $49 = $1;
 $50 = ((($49)) + 16|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 24|0);
 $53 = +HEAPF32[$52>>2];
 $54 = ((($axis1)) + 4|0);
 HEAPF32[$54>>2] = $53;
 $55 = $1;
 $56 = ((($55)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($57)) + 40|0);
 $59 = +HEAPF32[$58>>2];
 $60 = ((($axis1)) + 8|0);
 HEAPF32[$60>>2] = $59;
 $61 = $2;
 $62 = ((($61)) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($63)) + 8|0);
 $65 = +HEAPF32[$64>>2];
 HEAPF32[$axis2>>2] = $65;
 $66 = $2;
 $67 = ((($66)) + 16|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($68)) + 24|0);
 $70 = +HEAPF32[$69>>2];
 $71 = ((($axis2)) + 4|0);
 HEAPF32[$71>>2] = $70;
 $72 = $2;
 $73 = ((($72)) + 16|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($74)) + 40|0);
 $76 = +HEAPF32[$75>>2];
 $77 = ((($axis2)) + 8|0);
 HEAPF32[$77>>2] = $76;
 $fix1 = 0;
 $fix2 = 0;
 $count = 0;
 L10: while(1) {
  $78 = $count;
  $79 = ($78|0)<(9);
  if (!($79)) {
   label = 106;
   break;
  }
  $80 = $fix1;
  $81 = ($80|0)!=(0);
  $82 = $fix2;
  $83 = ($82|0)!=(0);
  L13: do {
   if ($81) {
    $84 = $fix1;
    $85 = ($84|0)>(0);
    $86 = $lz1;
    if (!($83)) {
     if ($85) {
      $alpha1 = $86;
     } else {
      $124 = -$86;
      $alpha1 = $124;
     }
     $i = 0;
     while(1) {
      $125 = $i;
      $126 = ($125|0)<(3);
      if (!($126)) {
       break;
      }
      $127 = $i;
      $128 = $pos1;
      $129 = (($128) + ($127<<2)|0);
      $130 = +HEAPF32[$129>>2];
      $131 = $alpha1;
      $132 = $i;
      $133 = (($axis1) + ($132<<2)|0);
      $134 = +HEAPF32[$133>>2];
      $135 = $131 * $134;
      $136 = $130 + $135;
      $137 = $i;
      $138 = (($sphere1) + ($137<<2)|0);
      HEAPF32[$138>>2] = $136;
      $139 = $i;
      $140 = (($139) + 1)|0;
      $i = $140;
     }
     $141 = +HEAPF32[$axis2>>2];
     $142 = +HEAPF32[$sphere1>>2];
     $143 = $pos2;
     $144 = +HEAPF32[$143>>2];
     $145 = $142 - $144;
     $146 = $141 * $145;
     $147 = ((($axis2)) + 4|0);
     $148 = +HEAPF32[$147>>2];
     $149 = ((($sphere1)) + 4|0);
     $150 = +HEAPF32[$149>>2];
     $151 = $pos2;
     $152 = ((($151)) + 4|0);
     $153 = +HEAPF32[$152>>2];
     $154 = $150 - $153;
     $155 = $148 * $154;
     $156 = $146 + $155;
     $157 = ((($axis2)) + 8|0);
     $158 = +HEAPF32[$157>>2];
     $159 = ((($sphere1)) + 8|0);
     $160 = +HEAPF32[$159>>2];
     $161 = $pos2;
     $162 = ((($161)) + 8|0);
     $163 = +HEAPF32[$162>>2];
     $164 = $160 - $163;
     $165 = $158 * $164;
     $166 = $156 + $165;
     $alpha2 = $166;
     $i = 0;
     while(1) {
      $167 = $i;
      $168 = ($167|0)<(3);
      if (!($168)) {
       break L13;
      }
      $169 = $i;
      $170 = $pos2;
      $171 = (($170) + ($169<<2)|0);
      $172 = +HEAPF32[$171>>2];
      $173 = $alpha2;
      $174 = $i;
      $175 = (($axis2) + ($174<<2)|0);
      $176 = +HEAPF32[$175>>2];
      $177 = $173 * $176;
      $178 = $172 + $177;
      $179 = $i;
      $180 = (($sphere2) + ($179<<2)|0);
      HEAPF32[$180>>2] = $178;
      $181 = $i;
      $182 = (($181) + 1)|0;
      $i = $182;
     }
    }
    if ($85) {
     $alpha1 = $86;
    } else {
     $87 = -$86;
     $alpha1 = $87;
    }
    $88 = $fix2;
    $89 = ($88|0)>(0);
    $90 = $lz2;
    if ($89) {
     $alpha2 = $90;
    } else {
     $91 = -$90;
     $alpha2 = $91;
    }
    $i = 0;
    while(1) {
     $92 = $i;
     $93 = ($92|0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $i;
     $95 = $pos1;
     $96 = (($95) + ($94<<2)|0);
     $97 = +HEAPF32[$96>>2];
     $98 = $alpha1;
     $99 = $i;
     $100 = (($axis1) + ($99<<2)|0);
     $101 = +HEAPF32[$100>>2];
     $102 = $98 * $101;
     $103 = $97 + $102;
     $104 = $i;
     $105 = (($sphere1) + ($104<<2)|0);
     HEAPF32[$105>>2] = $103;
     $106 = $i;
     $107 = (($106) + 1)|0;
     $i = $107;
    }
    $i = 0;
    while(1) {
     $108 = $i;
     $109 = ($108|0)<(3);
     if (!($109)) {
      break L13;
     }
     $110 = $i;
     $111 = $pos2;
     $112 = (($111) + ($110<<2)|0);
     $113 = +HEAPF32[$112>>2];
     $114 = $alpha2;
     $115 = $i;
     $116 = (($axis2) + ($115<<2)|0);
     $117 = +HEAPF32[$116>>2];
     $118 = $114 * $117;
     $119 = $113 + $118;
     $120 = $i;
     $121 = (($sphere2) + ($120<<2)|0);
     HEAPF32[$121>>2] = $119;
     $122 = $i;
     $123 = (($122) + 1)|0;
     $i = $123;
    }
   } else {
    if ($83) {
     $183 = $fix2;
     $184 = ($183|0)>(0);
     $185 = $lz2;
     if ($184) {
      $alpha2 = $185;
     } else {
      $186 = -$185;
      $alpha2 = $186;
     }
     $i = 0;
     while(1) {
      $187 = $i;
      $188 = ($187|0)<(3);
      if (!($188)) {
       break;
      }
      $189 = $i;
      $190 = $pos2;
      $191 = (($190) + ($189<<2)|0);
      $192 = +HEAPF32[$191>>2];
      $193 = $alpha2;
      $194 = $i;
      $195 = (($axis2) + ($194<<2)|0);
      $196 = +HEAPF32[$195>>2];
      $197 = $193 * $196;
      $198 = $192 + $197;
      $199 = $i;
      $200 = (($sphere2) + ($199<<2)|0);
      HEAPF32[$200>>2] = $198;
      $201 = $i;
      $202 = (($201) + 1)|0;
      $i = $202;
     }
     $203 = +HEAPF32[$axis1>>2];
     $204 = +HEAPF32[$sphere2>>2];
     $205 = $pos1;
     $206 = +HEAPF32[$205>>2];
     $207 = $204 - $206;
     $208 = $203 * $207;
     $209 = ((($axis1)) + 4|0);
     $210 = +HEAPF32[$209>>2];
     $211 = ((($sphere2)) + 4|0);
     $212 = +HEAPF32[$211>>2];
     $213 = $pos1;
     $214 = ((($213)) + 4|0);
     $215 = +HEAPF32[$214>>2];
     $216 = $212 - $215;
     $217 = $210 * $216;
     $218 = $208 + $217;
     $219 = ((($axis1)) + 8|0);
     $220 = +HEAPF32[$219>>2];
     $221 = ((($sphere2)) + 8|0);
     $222 = +HEAPF32[$221>>2];
     $223 = $pos1;
     $224 = ((($223)) + 8|0);
     $225 = +HEAPF32[$224>>2];
     $226 = $222 - $225;
     $227 = $220 * $226;
     $228 = $218 + $227;
     $alpha1 = $228;
     $i = 0;
     while(1) {
      $229 = $i;
      $230 = ($229|0)<(3);
      if (!($230)) {
       break L13;
      }
      $231 = $i;
      $232 = $pos1;
      $233 = (($232) + ($231<<2)|0);
      $234 = +HEAPF32[$233>>2];
      $235 = $alpha1;
      $236 = $i;
      $237 = (($axis1) + ($236<<2)|0);
      $238 = +HEAPF32[$237>>2];
      $239 = $235 * $238;
      $240 = $234 + $239;
      $241 = $i;
      $242 = (($sphere1) + ($241<<2)|0);
      HEAPF32[$242>>2] = $240;
      $243 = $i;
      $244 = (($243) + 1)|0;
      $i = $244;
     }
    }
    $245 = (+_dDOT($axis1,$axis2));
    $a1a2 = $245;
    $246 = $a1a2;
    $247 = $a1a2;
    $248 = $246 * $247;
    $249 = 1.0 - $248;
    $det = $249;
    $250 = $det;
    $251 = $250 < 9.9999997473787516E-6;
    if ($251) {
     label = 43;
     break L10;
    }
    $450 = $det;
    $451 = 1.0 / $450;
    $det = $451;
    $i = 0;
    while(1) {
     $452 = $i;
     $453 = ($452|0)<(3);
     if (!($453)) {
      break;
     }
     $454 = $i;
     $455 = $pos1;
     $456 = (($455) + ($454<<2)|0);
     $457 = +HEAPF32[$456>>2];
     $458 = $i;
     $459 = $pos2;
     $460 = (($459) + ($458<<2)|0);
     $461 = +HEAPF32[$460>>2];
     $462 = $457 - $461;
     $463 = $i;
     $464 = (($delta) + ($463<<2)|0);
     HEAPF32[$464>>2] = $462;
     $465 = $i;
     $466 = (($465) + 1)|0;
     $i = $466;
    }
    $467 = (+_dDOT($delta,$axis1));
    $q1 = $467;
    $468 = (+_dDOT($delta,$axis2));
    $q2 = $468;
    $469 = $det;
    $470 = $a1a2;
    $471 = $q2;
    $472 = $470 * $471;
    $473 = $q1;
    $474 = $472 - $473;
    $475 = $469 * $474;
    $alpha1 = $475;
    $476 = $det;
    $477 = $q2;
    $478 = $a1a2;
    $479 = $q1;
    $480 = $478 * $479;
    $481 = $477 - $480;
    $482 = $476 * $481;
    $alpha2 = $482;
    $i = 0;
    while(1) {
     $483 = $i;
     $484 = ($483|0)<(3);
     if (!($484)) {
      break;
     }
     $485 = $i;
     $486 = $pos1;
     $487 = (($486) + ($485<<2)|0);
     $488 = +HEAPF32[$487>>2];
     $489 = $alpha1;
     $490 = $i;
     $491 = (($axis1) + ($490<<2)|0);
     $492 = +HEAPF32[$491>>2];
     $493 = $489 * $492;
     $494 = $488 + $493;
     $495 = $i;
     $496 = (($sphere1) + ($495<<2)|0);
     HEAPF32[$496>>2] = $494;
     $497 = $i;
     $498 = (($497) + 1)|0;
     $i = $498;
    }
    $i = 0;
    while(1) {
     $499 = $i;
     $500 = ($499|0)<(3);
     if (!($500)) {
      break L13;
     }
     $501 = $i;
     $502 = $pos2;
     $503 = (($502) + ($501<<2)|0);
     $504 = +HEAPF32[$503>>2];
     $505 = $alpha2;
     $506 = $i;
     $507 = (($axis2) + ($506<<2)|0);
     $508 = +HEAPF32[$507>>2];
     $509 = $505 * $508;
     $510 = $504 + $509;
     $511 = $i;
     $512 = (($sphere2) + ($511<<2)|0);
     HEAPF32[$512>>2] = $510;
     $513 = $i;
     $514 = (($513) + 1)|0;
     $i = $514;
    }
   }
  } while(0);
  $515 = $fix1;
  $516 = ($515|0)==(0);
  do {
   if ($516) {
    $517 = $alpha1;
    $518 = $lz1;
    $519 = -$518;
    $520 = $517 < $519;
    if ($520) {
     $fix1 = -1;
     break;
    }
    $521 = $alpha1;
    $522 = $lz1;
    $523 = $521 > $522;
    if ($523) {
     $fix1 = 1;
    } else {
     label = 88;
    }
   } else {
    label = 88;
   }
  } while(0);
  L78: do {
   if ((label|0) == 88) {
    label = 0;
    $524 = $fix2;
    $525 = ($524|0)==(0);
    if ($525) {
     $526 = $alpha2;
     $527 = $lz2;
     $528 = -$527;
     $529 = $526 < $528;
     if ($529) {
      $fix2 = -1;
      break;
     }
     $530 = $alpha2;
     $531 = $lz2;
     $532 = $530 > $531;
     if ($532) {
      $fix2 = 1;
      break;
     }
    }
    $i = 0;
    while(1) {
     $533 = $i;
     $534 = ($533|0)<(3);
     if (!($534)) {
      break;
     }
     $535 = $i;
     $536 = (($sphere1) + ($535<<2)|0);
     $537 = +HEAPF32[$536>>2];
     $538 = $i;
     $539 = (($sphere2) + ($538<<2)|0);
     $540 = +HEAPF32[$539>>2];
     $541 = $537 - $540;
     $542 = $i;
     $543 = (($tmp) + ($542<<2)|0);
     HEAPF32[$543>>2] = $541;
     $544 = $i;
     $545 = (($544) + 1)|0;
     $i = $545;
    }
    $546 = $fix1;
    $547 = ($546|0)!=(0);
    do {
     if ($547) {
      $548 = (+_dDOT($tmp,$axis1));
      $gradient = $548;
      $549 = $fix1;
      $550 = ($549|0)>(0);
      $551 = $gradient;
      $552 = $551 > 0.0;
      $or$cond = $550 & $552;
      if (!($or$cond)) {
       $553 = $fix1;
       $554 = ($553|0)<(0);
       $555 = $gradient;
       $556 = $555 < 0.0;
       $or$cond3 = $554 & $556;
       if (!($or$cond3)) {
        break;
       }
      }
      $fix1 = 0;
      break L78;
     }
    } while(0);
    $557 = $fix2;
    $558 = ($557|0)!=(0);
    if (!($558)) {
     label = 104;
     break L10;
    }
    $559 = (+_dDOT($tmp,$axis2));
    $560 = -$559;
    $gradient1 = $560;
    $561 = $fix2;
    $562 = ($561|0)>(0);
    $563 = $gradient1;
    $564 = $563 > 0.0;
    $or$cond5 = $562 & $564;
    if (!($or$cond5)) {
     $565 = $fix2;
     $566 = ($565|0)<(0);
     $567 = $gradient1;
     $568 = $567 < 0.0;
     $or$cond7 = $566 & $568;
     if (!($or$cond7)) {
      label = 104;
      break L10;
     }
    }
    $fix2 = 0;
   }
  } while(0);
  $575 = $count;
  $576 = (($575) + 1)|0;
  $count = $576;
 }
 if ((label|0) == 43) {
  $252 = $a1a2;
  $253 = $252 < 0.0;
  if ($253) {
   $254 = +HEAPF32[$axis2>>2];
   $255 = -$254;
   HEAPF32[$axis2>>2] = $255;
   $256 = ((($axis2)) + 4|0);
   $257 = +HEAPF32[$256>>2];
   $258 = -$257;
   $259 = ((($axis2)) + 4|0);
   HEAPF32[$259>>2] = $258;
   $260 = ((($axis2)) + 8|0);
   $261 = +HEAPF32[$260>>2];
   $262 = -$261;
   $263 = ((($axis2)) + 8|0);
   HEAPF32[$263>>2] = $262;
  }
  $i = 0;
  while(1) {
   $264 = $i;
   $265 = ($264|0)<(3);
   if (!($265)) {
    break;
   }
   $266 = $i;
   $267 = $pos1;
   $268 = (($267) + ($266<<2)|0);
   $269 = +HEAPF32[$268>>2];
   $270 = $i;
   $271 = $pos2;
   $272 = (($271) + ($270<<2)|0);
   $273 = +HEAPF32[$272>>2];
   $274 = $269 - $273;
   $275 = $i;
   $276 = (($q) + ($275<<2)|0);
   HEAPF32[$276>>2] = $274;
   $277 = $i;
   $278 = (($277) + 1)|0;
   $i = $278;
  }
  $279 = (+_dDOT($axis1,$q));
  $k = $279;
  $280 = $lz1;
  $281 = -$280;
  $a1lo = $281;
  $282 = $lz1;
  $a1hi = $282;
  $283 = $lz2;
  $284 = -$283;
  $285 = $k;
  $286 = $284 - $285;
  $a2lo = $286;
  $287 = $lz2;
  $288 = $k;
  $289 = $287 - $288;
  $a2hi = $289;
  $290 = $a1lo;
  $291 = $a2lo;
  $292 = $290 > $291;
  $293 = $a1lo;
  $294 = $a2lo;
  $295 = $292 ? $293 : $294;
  $lo = $295;
  $296 = $a1hi;
  $297 = $a2hi;
  $298 = $296 < $297;
  $299 = $a1hi;
  $300 = $a2hi;
  $301 = $298 ? $299 : $300;
  $hi = $301;
  $302 = $lo;
  $303 = $hi;
  $304 = $302 <= $303;
  if (!($304)) {
   $0 = 0;
   $577 = $0;
   STACKTOP = sp;return ($577|0);
  }
  $305 = $3;
  $306 = $305 & 65535;
  $num_contacts = $306;
  $307 = $num_contacts;
  $308 = ($307|0)>=(2);
  if ($308) {
   $309 = $lo;
   $310 = $hi;
   $311 = $309 < $310;
   if ($311) {
    $i = 0;
    while(1) {
     $312 = $i;
     $313 = ($312|0)<(3);
     if (!($313)) {
      break;
     }
     $314 = $i;
     $315 = $pos1;
     $316 = (($315) + ($314<<2)|0);
     $317 = +HEAPF32[$316>>2];
     $318 = $lo;
     $319 = $i;
     $320 = (($axis1) + ($319<<2)|0);
     $321 = +HEAPF32[$320>>2];
     $322 = $318 * $321;
     $323 = $317 + $322;
     $324 = $i;
     $325 = (($sphere1) + ($324<<2)|0);
     HEAPF32[$325>>2] = $323;
     $326 = $i;
     $327 = (($326) + 1)|0;
     $i = $327;
    }
    $i = 0;
    while(1) {
     $328 = $i;
     $329 = ($328|0)<(3);
     if (!($329)) {
      break;
     }
     $330 = $i;
     $331 = $pos2;
     $332 = (($331) + ($330<<2)|0);
     $333 = +HEAPF32[$332>>2];
     $334 = $lo;
     $335 = $k;
     $336 = $334 + $335;
     $337 = $i;
     $338 = (($axis2) + ($337<<2)|0);
     $339 = +HEAPF32[$338>>2];
     $340 = $336 * $339;
     $341 = $333 + $340;
     $342 = $i;
     $343 = (($sphere2) + ($342<<2)|0);
     HEAPF32[$343>>2] = $341;
     $344 = $i;
     $345 = (($344) + 1)|0;
     $i = $345;
    }
    $346 = $cyl1;
    $347 = +HEAPF32[$346>>2];
    $348 = $cyl2;
    $349 = +HEAPF32[$348>>2];
    $350 = $4;
    $351 = (__ZL15dCollideSpheresPffS_fP12dContactGeom($sphere1,$347,$sphere2,$349,$350)|0);
    $n1 = $351;
    $352 = $n1;
    $353 = ($352|0)!=(0);
    if ($353) {
     $i = 0;
     while(1) {
      $354 = $i;
      $355 = ($354|0)<(3);
      if (!($355)) {
       break;
      }
      $356 = $i;
      $357 = $pos1;
      $358 = (($357) + ($356<<2)|0);
      $359 = +HEAPF32[$358>>2];
      $360 = $hi;
      $361 = $i;
      $362 = (($axis1) + ($361<<2)|0);
      $363 = +HEAPF32[$362>>2];
      $364 = $360 * $363;
      $365 = $359 + $364;
      $366 = $i;
      $367 = (($sphere1) + ($366<<2)|0);
      HEAPF32[$367>>2] = $365;
      $368 = $i;
      $369 = (($368) + 1)|0;
      $i = $369;
     }
     $i = 0;
     while(1) {
      $370 = $i;
      $371 = ($370|0)<(3);
      if (!($371)) {
       break;
      }
      $372 = $i;
      $373 = $pos2;
      $374 = (($373) + ($372<<2)|0);
      $375 = +HEAPF32[$374>>2];
      $376 = $hi;
      $377 = $k;
      $378 = $376 + $377;
      $379 = $i;
      $380 = (($axis2) + ($379<<2)|0);
      $381 = +HEAPF32[$380>>2];
      $382 = $378 * $381;
      $383 = $375 + $382;
      $384 = $i;
      $385 = (($sphere2) + ($384<<2)|0);
      HEAPF32[$385>>2] = $383;
      $386 = $i;
      $387 = (($386) + 1)|0;
      $i = $387;
     }
     $388 = $4;
     $389 = $5;
     $390 = (($388) + ($389)|0);
     $c2 = $390;
     $391 = $cyl1;
     $392 = +HEAPF32[$391>>2];
     $393 = $cyl2;
     $394 = +HEAPF32[$393>>2];
     $395 = $c2;
     $396 = (__ZL15dCollideSpheresPffS_fP12dContactGeom($sphere1,$392,$sphere2,$394,$395)|0);
     $n2 = $396;
     $397 = $n2;
     $398 = ($397|0)!=(0);
     if ($398) {
      $399 = $1;
      $400 = $c2;
      $401 = ((($400)) + 36|0);
      HEAP32[$401>>2] = $399;
      $402 = $2;
      $403 = $c2;
      $404 = ((($403)) + 40|0);
      HEAP32[$404>>2] = $402;
      $0 = 2;
      $577 = $0;
      STACKTOP = sp;return ($577|0);
     }
    }
   }
  }
  $405 = $lo;
  $406 = $hi;
  $407 = $405 + $406;
  $408 = $407 * 0.5;
  $alpha1 = $408;
  $409 = $alpha1;
  $410 = $k;
  $411 = $409 + $410;
  $alpha2 = $411;
  $i = 0;
  while(1) {
   $412 = $i;
   $413 = ($412|0)<(3);
   if (!($413)) {
    break;
   }
   $414 = $i;
   $415 = $pos1;
   $416 = (($415) + ($414<<2)|0);
   $417 = +HEAPF32[$416>>2];
   $418 = $alpha1;
   $419 = $i;
   $420 = (($axis1) + ($419<<2)|0);
   $421 = +HEAPF32[$420>>2];
   $422 = $418 * $421;
   $423 = $417 + $422;
   $424 = $i;
   $425 = (($sphere1) + ($424<<2)|0);
   HEAPF32[$425>>2] = $423;
   $426 = $i;
   $427 = (($426) + 1)|0;
   $i = $427;
  }
  $i = 0;
  while(1) {
   $428 = $i;
   $429 = ($428|0)<(3);
   if (!($429)) {
    break;
   }
   $430 = $i;
   $431 = $pos2;
   $432 = (($431) + ($430<<2)|0);
   $433 = +HEAPF32[$432>>2];
   $434 = $alpha2;
   $435 = $i;
   $436 = (($axis2) + ($435<<2)|0);
   $437 = +HEAPF32[$436>>2];
   $438 = $434 * $437;
   $439 = $433 + $438;
   $440 = $i;
   $441 = (($sphere2) + ($440<<2)|0);
   HEAPF32[$441>>2] = $439;
   $442 = $i;
   $443 = (($442) + 1)|0;
   $i = $443;
  }
  $444 = $cyl1;
  $445 = +HEAPF32[$444>>2];
  $446 = $cyl2;
  $447 = +HEAPF32[$446>>2];
  $448 = $4;
  $449 = (__ZL15dCollideSpheresPffS_fP12dContactGeom($sphere1,$445,$sphere2,$447,$448)|0);
  $0 = $449;
  $577 = $0;
  STACKTOP = sp;return ($577|0);
 }
 else if ((label|0) == 104) {
  $569 = $cyl1;
  $570 = +HEAPF32[$569>>2];
  $571 = $cyl2;
  $572 = +HEAPF32[$571>>2];
  $573 = $4;
  $574 = (__ZL15dCollideSpheresPffS_fP12dContactGeom($sphere1,$570,$sphere2,$572,$573)|0);
  $0 = $574;
  $577 = $0;
  STACKTOP = sp;return ($577|0);
 }
 else if ((label|0) == 106) {
  _dMessage(0,6946,$vararg_buffer17);
  $0 = 0;
  $577 = $0;
  STACKTOP = sp;return ($577|0);
 }
 return (0)|0;
}
function __Z10dCollideCPPK6dxGeomS1_iP12dContactGeomi($o1,$o2,$flags,$contact,$skip) {
 $o1 = $o1|0;
 $o2 = $o2|0;
 $flags = $flags|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $c2 = 0, $ccyl = 0, $depth = 0.0, $i = 0, $k = 0.0, $ncontacts = 0, $p = 0, $plane = 0, $sign = 0.0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $p = sp + 48|0;
 $1 = $o1;
 $2 = $o2;
 $3 = $flags;
 $4 = $contact;
 $5 = $skip;
 $6 = $5;
 $7 = ($6|0)>=(44);
 if (!($7)) {
  HEAP32[$vararg_buffer>>2] = 6980;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 6435;
  _dDebug(1,6358,$vararg_buffer);
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[552>>2]|0;
 $13 = ($11|0)==($12|0);
 if (!($13)) {
  HEAP32[$vararg_buffer2>>2] = 6980;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 6435;
  _dDebug(1,6801,$vararg_buffer2);
 }
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[548>>2]|0;
 $19 = ($17|0)==($18|0);
 if (!($19)) {
  HEAP32[$vararg_buffer6>>2] = 6980;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 6435;
  _dDebug(1,6655,$vararg_buffer6);
 }
 $20 = $1;
 $21 = ((($20)) + 32|0);
 $ccyl = $21;
 $22 = $2;
 $23 = ((($22)) + 32|0);
 $plane = $23;
 $24 = $plane;
 $25 = $1;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 8|0);
 $29 = (+_dDOT14($24,$28));
 $30 = $29 > 0.0;
 $31 = $30 ? -1.0 : 1.0;
 $sign = $31;
 $32 = $1;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = +HEAPF32[$34>>2];
 $36 = $1;
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 8|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $ccyl;
 $42 = ((($41)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $40 * $43;
 $45 = $44 * 0.5;
 $46 = $sign;
 $47 = $45 * $46;
 $48 = $35 + $47;
 HEAPF32[$p>>2] = $48;
 $49 = $1;
 $50 = ((($49)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 4|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $1;
 $55 = ((($54)) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($56)) + 24|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $ccyl;
 $60 = ((($59)) + 4|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $58 * $61;
 $63 = $62 * 0.5;
 $64 = $sign;
 $65 = $63 * $64;
 $66 = $53 + $65;
 $67 = ((($p)) + 4|0);
 HEAPF32[$67>>2] = $66;
 $68 = $1;
 $69 = ((($68)) + 12|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($70)) + 8|0);
 $72 = +HEAPF32[$71>>2];
 $73 = $1;
 $74 = ((($73)) + 16|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($75)) + 40|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $ccyl;
 $79 = ((($78)) + 4|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $77 * $80;
 $82 = $81 * 0.5;
 $83 = $sign;
 $84 = $82 * $83;
 $85 = $72 + $84;
 $86 = ((($p)) + 8|0);
 HEAPF32[$86>>2] = $85;
 $87 = $plane;
 $88 = (+_dDOT($p,$87));
 $k = $88;
 $89 = $plane;
 $90 = ((($89)) + 12|0);
 $91 = +HEAPF32[$90>>2];
 $92 = $k;
 $93 = $91 - $92;
 $94 = $ccyl;
 $95 = +HEAPF32[$94>>2];
 $96 = $93 + $95;
 $depth = $96;
 $97 = $depth;
 $98 = $97 < 0.0;
 if ($98) {
  $0 = 0;
  $290 = $0;
  STACKTOP = sp;return ($290|0);
 }
 $99 = $plane;
 $100 = +HEAPF32[$99>>2];
 $101 = $4;
 $102 = ((($101)) + 16|0);
 HEAPF32[$102>>2] = $100;
 $103 = $plane;
 $104 = ((($103)) + 4|0);
 $105 = +HEAPF32[$104>>2];
 $106 = $4;
 $107 = ((($106)) + 16|0);
 $108 = ((($107)) + 4|0);
 HEAPF32[$108>>2] = $105;
 $109 = $plane;
 $110 = ((($109)) + 8|0);
 $111 = +HEAPF32[$110>>2];
 $112 = $4;
 $113 = ((($112)) + 16|0);
 $114 = ((($113)) + 8|0);
 HEAPF32[$114>>2] = $111;
 $115 = +HEAPF32[$p>>2];
 $116 = $plane;
 $117 = +HEAPF32[$116>>2];
 $118 = $ccyl;
 $119 = +HEAPF32[$118>>2];
 $120 = $117 * $119;
 $121 = $115 - $120;
 $122 = $4;
 HEAPF32[$122>>2] = $121;
 $123 = ((($p)) + 4|0);
 $124 = +HEAPF32[$123>>2];
 $125 = $plane;
 $126 = ((($125)) + 4|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $ccyl;
 $129 = +HEAPF32[$128>>2];
 $130 = $127 * $129;
 $131 = $124 - $130;
 $132 = $4;
 $133 = ((($132)) + 4|0);
 HEAPF32[$133>>2] = $131;
 $134 = ((($p)) + 8|0);
 $135 = +HEAPF32[$134>>2];
 $136 = $plane;
 $137 = ((($136)) + 8|0);
 $138 = +HEAPF32[$137>>2];
 $139 = $ccyl;
 $140 = +HEAPF32[$139>>2];
 $141 = $138 * $140;
 $142 = $135 - $141;
 $143 = $4;
 $144 = ((($143)) + 8|0);
 HEAPF32[$144>>2] = $142;
 $145 = $depth;
 $146 = $4;
 $147 = ((($146)) + 32|0);
 HEAPF32[$147>>2] = $145;
 $ncontacts = 1;
 $148 = $3;
 $149 = $148 & 65535;
 $150 = ($149|0)>=(2);
 if ($150) {
  $151 = $1;
  $152 = ((($151)) + 12|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = +HEAPF32[$153>>2];
  $155 = $1;
  $156 = ((($155)) + 16|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ((($157)) + 8|0);
  $159 = +HEAPF32[$158>>2];
  $160 = $ccyl;
  $161 = ((($160)) + 4|0);
  $162 = +HEAPF32[$161>>2];
  $163 = $159 * $162;
  $164 = $163 * 0.5;
  $165 = $sign;
  $166 = $164 * $165;
  $167 = $154 - $166;
  HEAPF32[$p>>2] = $167;
  $168 = $1;
  $169 = ((($168)) + 12|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ((($170)) + 4|0);
  $172 = +HEAPF32[$171>>2];
  $173 = $1;
  $174 = ((($173)) + 16|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ((($175)) + 24|0);
  $177 = +HEAPF32[$176>>2];
  $178 = $ccyl;
  $179 = ((($178)) + 4|0);
  $180 = +HEAPF32[$179>>2];
  $181 = $177 * $180;
  $182 = $181 * 0.5;
  $183 = $sign;
  $184 = $182 * $183;
  $185 = $172 - $184;
  $186 = ((($p)) + 4|0);
  HEAPF32[$186>>2] = $185;
  $187 = $1;
  $188 = ((($187)) + 12|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ((($189)) + 8|0);
  $191 = +HEAPF32[$190>>2];
  $192 = $1;
  $193 = ((($192)) + 16|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = ((($194)) + 40|0);
  $196 = +HEAPF32[$195>>2];
  $197 = $ccyl;
  $198 = ((($197)) + 4|0);
  $199 = +HEAPF32[$198>>2];
  $200 = $196 * $199;
  $201 = $200 * 0.5;
  $202 = $sign;
  $203 = $201 * $202;
  $204 = $191 - $203;
  $205 = ((($p)) + 8|0);
  HEAPF32[$205>>2] = $204;
  $206 = $plane;
  $207 = (+_dDOT($p,$206));
  $k = $207;
  $208 = $plane;
  $209 = ((($208)) + 12|0);
  $210 = +HEAPF32[$209>>2];
  $211 = $k;
  $212 = $210 - $211;
  $213 = $ccyl;
  $214 = +HEAPF32[$213>>2];
  $215 = $212 + $214;
  $depth = $215;
  $216 = $depth;
  $217 = $216 >= 0.0;
  if ($217) {
   $218 = $4;
   $219 = $5;
   $220 = (($218) + ($219)|0);
   $c2 = $220;
   $221 = $plane;
   $222 = +HEAPF32[$221>>2];
   $223 = $c2;
   $224 = ((($223)) + 16|0);
   HEAPF32[$224>>2] = $222;
   $225 = $plane;
   $226 = ((($225)) + 4|0);
   $227 = +HEAPF32[$226>>2];
   $228 = $c2;
   $229 = ((($228)) + 16|0);
   $230 = ((($229)) + 4|0);
   HEAPF32[$230>>2] = $227;
   $231 = $plane;
   $232 = ((($231)) + 8|0);
   $233 = +HEAPF32[$232>>2];
   $234 = $c2;
   $235 = ((($234)) + 16|0);
   $236 = ((($235)) + 8|0);
   HEAPF32[$236>>2] = $233;
   $237 = +HEAPF32[$p>>2];
   $238 = $plane;
   $239 = +HEAPF32[$238>>2];
   $240 = $ccyl;
   $241 = +HEAPF32[$240>>2];
   $242 = $239 * $241;
   $243 = $237 - $242;
   $244 = $c2;
   HEAPF32[$244>>2] = $243;
   $245 = ((($p)) + 4|0);
   $246 = +HEAPF32[$245>>2];
   $247 = $plane;
   $248 = ((($247)) + 4|0);
   $249 = +HEAPF32[$248>>2];
   $250 = $ccyl;
   $251 = +HEAPF32[$250>>2];
   $252 = $249 * $251;
   $253 = $246 - $252;
   $254 = $c2;
   $255 = ((($254)) + 4|0);
   HEAPF32[$255>>2] = $253;
   $256 = ((($p)) + 8|0);
   $257 = +HEAPF32[$256>>2];
   $258 = $plane;
   $259 = ((($258)) + 8|0);
   $260 = +HEAPF32[$259>>2];
   $261 = $ccyl;
   $262 = +HEAPF32[$261>>2];
   $263 = $260 * $262;
   $264 = $257 - $263;
   $265 = $c2;
   $266 = ((($265)) + 8|0);
   HEAPF32[$266>>2] = $264;
   $267 = $depth;
   $268 = $c2;
   $269 = ((($268)) + 32|0);
   HEAPF32[$269>>2] = $267;
   $ncontacts = 2;
  }
 }
 $i = 0;
 while(1) {
  $270 = $i;
  $271 = $ncontacts;
  $272 = ($270|0)<($271|0);
  if (!($272)) {
   break;
  }
  $273 = $1;
  $274 = $4;
  $275 = $i;
  $276 = $5;
  $277 = Math_imul($275, $276)|0;
  $278 = (($274) + ($277)|0);
  $279 = ((($278)) + 36|0);
  HEAP32[$279>>2] = $273;
  $280 = $2;
  $281 = $4;
  $282 = $i;
  $283 = $5;
  $284 = Math_imul($282, $283)|0;
  $285 = (($281) + ($284)|0);
  $286 = ((($285)) + 40|0);
  HEAP32[$286>>2] = $280;
  $287 = $i;
  $288 = (($287) + 1)|0;
  $i = $288;
 }
 $289 = $ncontacts;
 $0 = $289;
 $290 = $0;
 STACKTOP = sp;return ($290|0);
}
function __Z9dCollideGPK6dxGeomS1_iP12dContactGeomi($o1,$o2,$flags,$contact,$skip) {
 $o1 = $o1|0;
 $o2 = $o2|0;
 $flags = $flags|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gr = 0, $i = 0, $n = 0, $num = 0, $numleft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $o1;
 $1 = $o2;
 $2 = $flags;
 $3 = $contact;
 $4 = $skip;
 $5 = $0;
 $6 = ((($5)) + 32|0);
 $gr = $6;
 $7 = $2;
 $8 = $7 & 65535;
 $numleft = $8;
 $9 = $numleft;
 $10 = ($9|0)==(0);
 $$ = $10 ? 1 : $8;
 $numleft = $$;
 $11 = $2;
 $12 = $11 & -65536;
 $2 = $12;
 $num = 0;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $gr;
  $15 = (__ZNK10dArrayBase4sizeEv($14)|0);
  $16 = ($13|0)<($15|0);
  $17 = $numleft;
  $18 = ($17|0)>(0);
  $19 = $16 ? $18 : 0;
  if (!($19)) {
   break;
  }
  $20 = $gr;
  $21 = $i;
  $22 = (__ZNK6dArrayIP6dxGeomEixEi($20,$21)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = $2;
  $26 = $numleft;
  $27 = $25 | $26;
  $28 = $3;
  $29 = $4;
  $30 = (_dCollide($23,$24,$27,$28,$29)|0);
  $n = $30;
  $31 = $3;
  $32 = $4;
  $33 = $n;
  $34 = Math_imul($32, $33)|0;
  $35 = (($31) + ($34)|0);
  $3 = $35;
  $36 = $n;
  $37 = $numleft;
  $38 = (($37) - ($36))|0;
  $numleft = $38;
  $39 = $n;
  $40 = $num;
  $41 = (($40) + ($39))|0;
  $num = $41;
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 $44 = $num;
 STACKTOP = sp;return ($44|0);
}
function __Z16dPlaneColliderFni($num) {
 $num = $num|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $num;
 STACKTOP = sp;return (0|0);
}
function _dCreateSphere($space,$radius) {
 $space = $space|0;
 $radius = +$radius;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, $g = 0, $s = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $c = sp + 12|0;
 $0 = $space;
 $1 = $radius;
 $2 = $1;
 $3 = $2 > 0.0;
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 6991;
  _dDebug(2,6111,$vararg_buffer);
 }
 $4 = HEAP32[540>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  HEAP32[$c>>2] = 4;
  $6 = ((($c)) + 4|0);
  HEAP32[$6>>2] = 63;
  $7 = ((($c)) + 8|0);
  HEAP32[$7>>2] = 64;
  $8 = ((($c)) + 12|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($c)) + 16|0);
  HEAP32[$9>>2] = 0;
  $10 = (_dCreateGeomClass($c)|0);
  HEAP32[540>>2] = $10;
 }
 $11 = HEAP32[540>>2]|0;
 $12 = (_dCreateGeom($11)|0);
 $g = $12;
 $13 = $0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $17 = $g;
  $18 = ((($17)) + 32|0);
  $s = $18;
  $19 = $1;
  $20 = $s;
  HEAPF32[$20>>2] = $19;
  $21 = $g;
  STACKTOP = sp;return ($21|0);
 }
 $15 = $0;
 $16 = $g;
 _dSpaceAdd($15,$16);
 $17 = $g;
 $18 = ((($17)) + 32|0);
 $s = $18;
 $19 = $1;
 $20 = $s;
 HEAPF32[$20>>2] = $19;
 $21 = $g;
 STACKTOP = sp;return ($21|0);
}
function _dCreateBox($space,$lx,$ly,$lz) {
 $space = $space|0;
 $lx = +$lx;
 $ly = +$ly;
 $lz = +$lz;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $b = 0, $c = 0, $g = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $c = sp + 12|0;
 $0 = $space;
 $1 = $lx;
 $2 = $ly;
 $3 = $lz;
 $4 = $1;
 $5 = $4 > 0.0;
 $6 = $2;
 $7 = $6 > 0.0;
 $or$cond = $5 & $7;
 $8 = $3;
 $9 = $8 > 0.0;
 $or$cond3 = $or$cond & $9;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer>>2] = 7005;
  _dDebug(2,6111,$vararg_buffer);
 }
 $10 = HEAP32[544>>2]|0;
 $11 = ($10|0)==(-1);
 if ($11) {
  HEAP32[$c>>2] = 16;
  $12 = ((($c)) + 4|0);
  HEAP32[$12>>2] = 65;
  $13 = ((($c)) + 8|0);
  HEAP32[$13>>2] = 66;
  $14 = ((($c)) + 12|0);
  HEAP32[$14>>2] = 0;
  $15 = ((($c)) + 16|0);
  HEAP32[$15>>2] = 0;
  $16 = (_dCreateGeomClass($c)|0);
  HEAP32[544>>2] = $16;
 }
 $17 = HEAP32[544>>2]|0;
 $18 = (_dCreateGeom($17)|0);
 $g = $18;
 $19 = $0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $0;
  $22 = $g;
  _dSpaceAdd($21,$22);
 }
 $23 = $g;
 $24 = ((($23)) + 32|0);
 $b = $24;
 $25 = $1;
 $26 = $b;
 HEAPF32[$26>>2] = $25;
 $27 = $2;
 $28 = $b;
 $29 = ((($28)) + 4|0);
 HEAPF32[$29>>2] = $27;
 $30 = $3;
 $31 = $b;
 $32 = ((($31)) + 8|0);
 HEAPF32[$32>>2] = $30;
 $33 = $g;
 STACKTOP = sp;return ($33|0);
}
function _dCreateCCylinder($space,$radius,$length) {
 $space = $space|0;
 $radius = +$radius;
 $length = +$length;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $c1 = 0, $g = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $c = sp + 12|0;
 $0 = $space;
 $1 = $radius;
 $2 = $length;
 $3 = $1;
 $4 = $3 > 0.0;
 $5 = $2;
 $6 = $5 > 0.0;
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer>>2] = 7016;
  _dDebug(2,6111,$vararg_buffer);
 }
 $7 = HEAP32[552>>2]|0;
 $8 = ($7|0)==(-1);
 if ($8) {
  HEAP32[$c>>2] = 8;
  $9 = ((($c)) + 4|0);
  HEAP32[$9>>2] = 67;
  $10 = ((($c)) + 8|0);
  HEAP32[$10>>2] = 68;
  $11 = ((($c)) + 12|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($c)) + 16|0);
  HEAP32[$12>>2] = 0;
  $13 = (_dCreateGeomClass($c)|0);
  HEAP32[552>>2] = $13;
 }
 $14 = HEAP32[552>>2]|0;
 $15 = (_dCreateGeom($14)|0);
 $g = $15;
 $16 = $0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $0;
  $19 = $g;
  _dSpaceAdd($18,$19);
 }
 $20 = $g;
 $21 = ((($20)) + 32|0);
 $c1 = $21;
 $22 = $1;
 $23 = $c1;
 HEAPF32[$23>>2] = $22;
 $24 = $2;
 $25 = $c1;
 $26 = ((($25)) + 4|0);
 HEAPF32[$26>>2] = $24;
 $27 = $g;
 STACKTOP = sp;return ($27|0);
}
function _dCreatePlane($space,$a,$b,$c,$d) {
 $space = $space|0;
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $d = +$d;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $c1 = 0, $g = 0, $l = 0.0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c1 = sp + 12|0;
 $0 = $space;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = HEAP32[548>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  HEAP32[$c1>>2] = 16;
  $7 = ((($c1)) + 4|0);
  HEAP32[$7>>2] = 69;
  $8 = ((($c1)) + 8|0);
  HEAP32[$8>>2] = 70;
  $9 = ((($c1)) + 12|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($c1)) + 16|0);
  HEAP32[$10>>2] = 0;
  $11 = (_dCreateGeomClass($c1)|0);
  HEAP32[548>>2] = $11;
 }
 $12 = HEAP32[548>>2]|0;
 $13 = (_dCreateGeom($12)|0);
 $g = $13;
 $14 = $0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $0;
  $17 = $g;
  _dSpaceAdd($16,$17);
 }
 $18 = $g;
 $19 = ((($18)) + 32|0);
 $p = $19;
 $20 = $1;
 $21 = $1;
 $22 = $20 * $21;
 $23 = $2;
 $24 = $2;
 $25 = $23 * $24;
 $26 = $22 + $25;
 $27 = $3;
 $28 = $3;
 $29 = $27 * $28;
 $30 = $26 + $29;
 $l = $30;
 $31 = $l;
 $32 = $31 > 0.0;
 if ($32) {
  $33 = $l;
  $34 = $33;
  $35 = (+Math_sqrt((+$34)));
  $36 = 1.0 / $35;
  $37 = $36;
  $l = $37;
  $38 = $1;
  $39 = $l;
  $40 = $38 * $39;
  $41 = $p;
  HEAPF32[$41>>2] = $40;
  $42 = $2;
  $43 = $l;
  $44 = $42 * $43;
  $45 = $p;
  $46 = ((($45)) + 4|0);
  HEAPF32[$46>>2] = $44;
  $47 = $3;
  $48 = $l;
  $49 = $47 * $48;
  $50 = $p;
  $51 = ((($50)) + 8|0);
  HEAPF32[$51>>2] = $49;
  $52 = $4;
  $53 = $l;
  $54 = $52 * $53;
  $55 = $p;
  $56 = ((($55)) + 12|0);
  HEAPF32[$56>>2] = $54;
  $64 = $g;
  STACKTOP = sp;return ($64|0);
 } else {
  $57 = $p;
  HEAPF32[$57>>2] = 1.0;
  $58 = $p;
  $59 = ((($58)) + 4|0);
  HEAPF32[$59>>2] = 0.0;
  $60 = $p;
  $61 = ((($60)) + 8|0);
  HEAPF32[$61>>2] = 0.0;
  $62 = $p;
  $63 = ((($62)) + 12|0);
  HEAPF32[$63>>2] = 0.0;
  $64 = $g;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _dGeomSphereSetRadius($g,$radius) {
 $g = $g|0;
 $radius = +$radius;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $radius;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[540>>2]|0;
  $9 = ($7|0)==($8|0);
  if (!($9)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7063;
  _dDebug(2,7033,$vararg_buffer);
 }
 $10 = $1;
 $11 = $10 > 0.0;
 if (!($11)) {
  HEAP32[$vararg_buffer1>>2] = 7063;
  _dDebug(2,6111,$vararg_buffer1);
 }
 $12 = $0;
 $13 = ((($12)) + 32|0);
 $s = $13;
 $14 = $1;
 $15 = $s;
 HEAPF32[$15>>2] = $14;
 STACKTOP = sp;return;
}
function _dGeomBoxSetLengths($g,$lx,$ly,$lz) {
 $g = $g|0;
 $lx = +$lx;
 $ly = +$ly;
 $lz = +$lz;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $lx;
 $2 = $ly;
 $3 = $lz;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[544>>2]|0;
  $11 = ($9|0)==($10|0);
  if (!($11)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7111;
  _dDebug(2,7084,$vararg_buffer);
 }
 $12 = $1;
 $13 = $12 > 0.0;
 $14 = $2;
 $15 = $14 > 0.0;
 $or$cond = $13 & $15;
 $16 = $3;
 $17 = $16 > 0.0;
 $or$cond3 = $or$cond & $17;
 if (!($or$cond3)) {
  HEAP32[$vararg_buffer4>>2] = 7111;
  _dDebug(2,6111,$vararg_buffer4);
 }
 $18 = $0;
 $19 = ((($18)) + 32|0);
 $b = $19;
 $20 = $1;
 $21 = $b;
 HEAPF32[$21>>2] = $20;
 $22 = $2;
 $23 = $b;
 $24 = ((($23)) + 4|0);
 HEAPF32[$24>>2] = $22;
 $25 = $3;
 $26 = $b;
 $27 = ((($26)) + 8|0);
 HEAPF32[$27>>2] = $25;
 STACKTOP = sp;return;
}
function _dGeomPlaneSetParams($g,$a,$b,$c,$d) {
 $g = $g|0;
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $d = +$d;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $3 = 0.0;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[548>>2]|0;
  $12 = ($10|0)==($11|0);
  if (!($12)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7159;
  _dDebug(2,7130,$vararg_buffer);
 }
 $13 = $0;
 $14 = ((($13)) + 32|0);
 $p = $14;
 $15 = $1;
 $16 = $p;
 HEAPF32[$16>>2] = $15;
 $17 = $2;
 $18 = $p;
 $19 = ((($18)) + 4|0);
 HEAPF32[$19>>2] = $17;
 $20 = $3;
 $21 = $p;
 $22 = ((($21)) + 8|0);
 HEAPF32[$22>>2] = $20;
 $23 = $4;
 $24 = $p;
 $25 = ((($24)) + 12|0);
 HEAPF32[$25>>2] = $23;
 STACKTOP = sp;return;
}
function _dGeomCCylinderSetParams($g,$radius,$length) {
 $g = $g|0;
 $radius = +$radius;
 $length = +$length;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $radius;
 $2 = $length;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[552>>2]|0;
  $10 = ($8|0)==($9|0);
  if (!($10)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7212;
  _dDebug(2,7179,$vararg_buffer);
 }
 $11 = $1;
 $12 = $11 > 0.0;
 $13 = $2;
 $14 = $13 > 0.0;
 $or$cond = $12 & $14;
 if (!($or$cond)) {
  HEAP32[$vararg_buffer2>>2] = 7212;
  _dDebug(2,6111,$vararg_buffer2);
 }
 $15 = $0;
 $16 = ((($15)) + 32|0);
 $c = $16;
 $17 = $1;
 $18 = $c;
 HEAPF32[$18>>2] = $17;
 $19 = $2;
 $20 = $c;
 $21 = ((($20)) + 4|0);
 HEAPF32[$21>>2] = $19;
 STACKTOP = sp;return;
}
function _dGeomSphereGetRadius($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[540>>2]|0;
  $8 = ($6|0)==($7|0);
  if (!($8)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7236;
  _dDebug(2,7033,$vararg_buffer);
 }
 $9 = $0;
 $10 = ((($9)) + 32|0);
 $s = $10;
 $11 = $s;
 $12 = +HEAPF32[$11>>2];
 STACKTOP = sp;return (+$12);
}
function _dGeomBoxGetLengths($g,$result) {
 $g = $g|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $result;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[544>>2]|0;
  $9 = ($7|0)==($8|0);
  if (!($9)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7257;
  _dDebug(2,7084,$vararg_buffer);
 }
 $10 = $0;
 $11 = ((($10)) + 32|0);
 $b = $11;
 $12 = $b;
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 HEAPF32[$14>>2] = $13;
 $15 = $b;
 $16 = ((($15)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 4|0);
 HEAPF32[$19>>2] = $17;
 $20 = $b;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = ((($23)) + 8|0);
 HEAPF32[$24>>2] = $22;
 STACKTOP = sp;return;
}
function _dGeomPlaneGetParams($g,$result) {
 $g = $g|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $result;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[548>>2]|0;
  $9 = ($7|0)==($8|0);
  if (!($9)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7276;
  _dDebug(2,7130,$vararg_buffer);
 }
 $10 = $0;
 $11 = ((($10)) + 32|0);
 $p = $11;
 $12 = $p;
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 HEAPF32[$14>>2] = $13;
 $15 = $p;
 $16 = ((($15)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 4|0);
 HEAPF32[$19>>2] = $17;
 $20 = $p;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = ((($23)) + 8|0);
 HEAPF32[$24>>2] = $22;
 $25 = $p;
 $26 = ((($25)) + 12|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $1;
 $29 = ((($28)) + 12|0);
 HEAPF32[$29>>2] = $27;
 STACKTOP = sp;return;
}
function _dGeomCCylinderGetParams($g,$radius,$length) {
 $g = $g|0;
 $radius = $radius|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $c = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $radius;
 $2 = $length;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[552>>2]|0;
  $10 = ($8|0)==($9|0);
  if (!($10)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7296;
  _dDebug(2,7179,$vararg_buffer);
 }
 $11 = $0;
 $12 = ((($11)) + 32|0);
 $c = $12;
 $13 = $c;
 $14 = +HEAPF32[$13>>2];
 $15 = $1;
 HEAPF32[$15>>2] = $14;
 $16 = $c;
 $17 = ((($16)) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $2;
 HEAPF32[$19>>2] = $18;
 STACKTOP = sp;return;
}
function _dCreateGeomGroup($space) {
 $space = $space|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $g = 0;
 var $gr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 8|0;
 $0 = $space;
 $1 = HEAP32[556>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  HEAP32[$c>>2] = 12;
  $3 = ((($c)) + 4|0);
  HEAP32[$3>>2] = 71;
  $4 = ((($c)) + 8|0);
  HEAP32[$4>>2] = 72;
  $5 = ((($c)) + 12|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($c)) + 16|0);
  HEAP32[$6>>2] = 73;
  $7 = (_dCreateGeomClass($c)|0);
  HEAP32[556>>2] = $7;
 }
 $8 = HEAP32[556>>2]|0;
 $9 = (_dCreateGeom($8)|0);
 $g = $9;
 $10 = $0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $0;
  $13 = $g;
  _dSpaceAdd($12,$13);
 }
 $14 = $g;
 $15 = ((($14)) + 32|0);
 $gr = $15;
 $16 = $gr;
 __ZN10dArrayBase11constructorEv($16);
 $17 = $g;
 STACKTOP = sp;return ($17|0);
}
function _dGeomGroupAdd($g,$x) {
 $g = $g|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $x;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[556>>2]|0;
  $9 = ($7|0)==($8|0);
  if (!($9)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7353;
  _dDebug(2,7320,$vararg_buffer);
 }
 $10 = $0;
 $11 = ((($10)) + 32|0);
 $gr = $11;
 $12 = $gr;
 $13 = $1;
 __ZN6dArrayIP6dxGeomE4pushES1_($12,$13);
 STACKTOP = sp;return;
}
function _dGeomGroupRemove($g,$x) {
 $g = $g|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gr = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $x;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[556>>2]|0;
  $9 = ($7|0)==($8|0);
  if (!($9)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7367;
  _dDebug(2,7320,$vararg_buffer);
 }
 $10 = $0;
 $11 = ((($10)) + 32|0);
 $gr = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $gr;
  $14 = (__ZNK10dArrayBase4sizeEv($13)|0);
  $15 = ($12|0)<($14|0);
  if (!($15)) {
   label = 9;
   break;
  }
  $16 = $gr;
  $17 = $i;
  $18 = (__ZNK6dArrayIP6dxGeomEixEi($16,$17)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = ($19|0)==($20|0);
  if ($21) {
   break;
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $22 = $gr;
 $23 = $i;
 __ZN6dArrayIP6dxGeomE6removeEi($22,$23);
 STACKTOP = sp;return;
}
function _dGeomGroupGetNumGeoms($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[556>>2]|0;
  $8 = ($6|0)==($7|0);
  if (!($8)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7384;
  _dDebug(2,7320,$vararg_buffer);
 }
 $9 = $0;
 $10 = ((($9)) + 32|0);
 $gr = $10;
 $11 = $gr;
 $12 = (__ZNK10dArrayBase4sizeEv($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _dGeomGroupGetGeom($g,$i) {
 $g = $g|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $gr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $i;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[556>>2]|0;
  $9 = ($7|0)==($8|0);
  if (!($9)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7406;
  _dDebug(2,7320,$vararg_buffer);
 }
 $10 = $0;
 $11 = ((($10)) + 32|0);
 $gr = $11;
 $12 = $1;
 $13 = ($12|0)>=(0);
 if ($13) {
  $14 = $1;
  $15 = $gr;
  $16 = (__ZNK10dArrayBase4sizeEv($15)|0);
  $17 = ($14|0)<($16|0);
  if ($17) {
   $18 = $gr;
   $19 = $1;
   $20 = (__ZNK6dArrayIP6dxGeomEixEi($18,$19)|0);
   $21 = HEAP32[$20>>2]|0;
   STACKTOP = sp;return ($21|0);
  }
 }
 HEAP32[$vararg_buffer1>>2] = 7406;
 _dDebug(2,6111,$vararg_buffer1);
 $18 = $gr;
 $19 = $1;
 $20 = (__ZNK6dArrayIP6dxGeomEixEi($18,$19)|0);
 $21 = HEAP32[$20>>2]|0;
 STACKTOP = sp;return ($21|0);
}
function __Z9dCollideTPK6dxGeomS1_iP12dContactGeomi($o1,$o2,$flags,$contact,$skip) {
 $o1 = $o1|0;
 $o2 = $o2|0;
 $flags = $flags|0;
 $contact = $contact|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $Rbak = 0, $bodybak = 0, $n = 0, $posbak = 0, $tr = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $o1;
 $2 = $o2;
 $3 = $flags;
 $4 = $contact;
 $5 = $skip;
 $6 = $1;
 $7 = ((($6)) + 32|0);
 $tr = $7;
 $8 = $tr;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $0 = 0;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $11 = $tr;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  HEAP32[$vararg_buffer>>2] = 7489;
  _dDebug(2,7424,$vararg_buffer);
 }
 $16 = $tr;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  HEAP32[$vararg_buffer1>>2] = 7489;
  _dDebug(2,7499,$vararg_buffer1);
 }
 $21 = $tr;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $posbak = $24;
 $25 = $tr;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $Rbak = $28;
 $29 = $tr;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $bodybak = $32;
 $33 = $1;
 $34 = ((($33)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  $37 = $1;
  __ZL16compute_final_txPK6dxGeom($37);
 }
 $38 = $tr;
 $39 = ((($38)) + 8|0);
 $40 = $tr;
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 12|0);
 HEAP32[$42>>2] = $39;
 $43 = $tr;
 $44 = ((($43)) + 24|0);
 $45 = $tr;
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 16|0);
 HEAP32[$47>>2] = $44;
 $48 = $1;
 $49 = ((($48)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $tr;
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 8|0);
 HEAP32[$53>>2] = $50;
 $54 = $tr;
 $55 = HEAP32[$54>>2]|0;
 $56 = $2;
 $57 = $3;
 $58 = $4;
 $59 = $5;
 $60 = (_dCollide($55,$56,$57,$58,$59)|0);
 $n = $60;
 $61 = $posbak;
 $62 = $tr;
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($63)) + 12|0);
 HEAP32[$64>>2] = $61;
 $65 = $Rbak;
 $66 = $tr;
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($67)) + 16|0);
 HEAP32[$68>>2] = $65;
 $69 = $bodybak;
 $70 = $tr;
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 8|0);
 HEAP32[$72>>2] = $69;
 $73 = $n;
 $0 = $73;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function _dCreateGeomTransform($space) {
 $space = $space|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $g = 0, $tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 8|0;
 $0 = $space;
 $1 = HEAP32[560>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  HEAP32[$c>>2] = 72;
  $3 = ((($c)) + 4|0);
  HEAP32[$3>>2] = 74;
  $4 = ((($c)) + 8|0);
  HEAP32[$4>>2] = 75;
  $5 = ((($c)) + 12|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($c)) + 16|0);
  HEAP32[$6>>2] = 76;
  $7 = (_dCreateGeomClass($c)|0);
  HEAP32[560>>2] = $7;
 }
 $8 = HEAP32[560>>2]|0;
 $9 = (_dCreateGeom($8)|0);
 $g = $9;
 $10 = $0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $0;
  $13 = $g;
  _dSpaceAdd($12,$13);
 }
 $14 = $g;
 $15 = ((($14)) + 32|0);
 $tr = $15;
 $16 = $tr;
 HEAP32[$16>>2] = 0;
 $17 = $tr;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = $tr;
 $20 = ((($19)) + 8|0);
 _dSetZero($20,4);
 $21 = $tr;
 $22 = ((($21)) + 24|0);
 _dRSetIdentity($22);
 $23 = $g;
 STACKTOP = sp;return ($23|0);
}
function _dGeomTransformSetGeom($g,$obj) {
 $g = $g|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $tr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $obj;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[560>>2]|0;
  $9 = ($7|0)==($8|0);
  if (!($9)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7608;
  _dDebug(2,7570,$vararg_buffer);
 }
 $10 = $0;
 $11 = ((($10)) + 32|0);
 $tr = $11;
 $12 = $tr;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $tr;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $tr;
   $20 = HEAP32[$19>>2]|0;
   _dGeomDestroy($20);
  }
 }
 $21 = $1;
 $22 = $tr;
 HEAP32[$22>>2] = $21;
 STACKTOP = sp;return;
}
function _dGeomTransformGetGeom($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[560>>2]|0;
  $8 = ($6|0)==($7|0);
  if (!($8)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7630;
  _dDebug(2,7570,$vararg_buffer);
 }
 $9 = $0;
 $10 = ((($9)) + 32|0);
 $tr = $10;
 $11 = $tr;
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function _dGeomTransformSetCleanup($g,$mode) {
 $g = $g|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $mode;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[560>>2]|0;
  $9 = ($7|0)==($8|0);
  if (!($9)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7652;
  _dDebug(2,7570,$vararg_buffer);
 }
 $10 = $0;
 $11 = ((($10)) + 32|0);
 $tr = $11;
 $12 = $1;
 $13 = $tr;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _dGeomTransformGetCleanup($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $g;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[560>>2]|0;
  $8 = ($6|0)==($7|0);
  if (!($8)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = 7677;
  _dDebug(2,7570,$vararg_buffer);
 }
 $9 = $0;
 $10 = ((($9)) + 32|0);
 $tr = $10;
 $11 = $tr;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _dDOT44($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 16|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 16|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = ((($15)) + 32|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 32|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 STACKTOP = sp;return (+$22);
}
function __ZL19lineClosestApproachPKfS0_S0_S0_PfS1_($pa,$ua,$pb,$ub,$alpha,$beta) {
 $pa = $pa|0;
 $ua = $ua|0;
 $pb = $pb|0;
 $ub = $ub|0;
 $alpha = $alpha|0;
 $beta = $beta|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0.0, $d = 0.0, $p = 0, $q1 = 0.0, $q2 = 0.0, $uaub = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp + 16|0;
 $0 = $pa;
 $1 = $ua;
 $2 = $pb;
 $3 = $ub;
 $4 = $alpha;
 $5 = $beta;
 $6 = $2;
 $7 = +HEAPF32[$6>>2];
 $8 = $0;
 $9 = +HEAPF32[$8>>2];
 $10 = $7 - $9;
 HEAPF32[$p>>2] = $10;
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $0;
 $15 = ((($14)) + 4|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $13 - $16;
 $18 = ((($p)) + 4|0);
 HEAPF32[$18>>2] = $17;
 $19 = $2;
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $0;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $21 - $24;
 $26 = ((($p)) + 8|0);
 HEAPF32[$26>>2] = $25;
 $27 = $1;
 $28 = $3;
 $29 = (+_dDOT($27,$28));
 $uaub = $29;
 $30 = $1;
 $31 = (+_dDOT($30,$p));
 $q1 = $31;
 $32 = $3;
 $33 = (+_dDOT($32,$p));
 $34 = -$33;
 $q2 = $34;
 $35 = $uaub;
 $36 = $uaub;
 $37 = $35 * $36;
 $38 = 1.0 - $37;
 $d = $38;
 $39 = $d;
 $40 = $39 <= 0.0;
 if ($40) {
  $41 = $4;
  HEAPF32[$41>>2] = 0.0;
  $42 = $5;
  HEAPF32[$42>>2] = 0.0;
  STACKTOP = sp;return;
 } else {
  $43 = $d;
  $44 = 1.0 / $43;
  $d = $44;
  $45 = $q1;
  $46 = $uaub;
  $47 = $q2;
  $48 = $46 * $47;
  $49 = $45 + $48;
  $50 = $d;
  $51 = $49 * $50;
  $52 = $4;
  HEAPF32[$52>>2] = $51;
  $53 = $uaub;
  $54 = $q1;
  $55 = $53 * $54;
  $56 = $q2;
  $57 = $55 + $56;
  $58 = $d;
  $59 = $57 * $58;
  $60 = $5;
  HEAPF32[$60>>2] = $59;
  STACKTOP = sp;return;
 }
}
function __ZL19initCollisionArraysv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP32[564>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $4 = (__ZN10dArrayBasenwEj(12)|0);
   __THREW__ = 0;
   invoke_vi(77,($4|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    HEAP32[564>>2] = $4;
    $7 = HEAP32[564>>2]|0;
    __ZN6dArrayIP11dxGeomClassE7setSizeEi($7,1);
    $8 = HEAP32[564>>2]|0;
    _dAllocDontReport($8);
    $9 = HEAP32[564>>2]|0;
    $10 = (__ZNK6dArrayIP11dxGeomClassE4dataEv($9)|0);
    _dAllocDontReport($10);
    $11 = HEAP32[564>>2]|0;
    __ZN6dArrayIP11dxGeomClassE7setSizeEi($11,0);
    break;
   }
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $0 = $12;
   $1 = $13;
   __THREW__ = 0;
   invoke_vii(78,($4|0),12);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $32 = ___cxa_find_matching_catch(0|0)|0;
    $33 = tempRet0;
    ___clang_call_terminate($32);
    // unreachable;
   } else {
    $30 = $0;
    $31 = $1;
    ___resumeException($30|0);
    // unreachable;
   }
  }
 } while(0);
 $16 = HEAP32[568>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (__ZN10dArrayBasenwEj(12)|0);
 __THREW__ = 0;
 invoke_vi(79,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if (!($20)) {
  HEAP32[568>>2] = $18;
  $21 = HEAP32[568>>2]|0;
  __ZN6dArrayI14dColliderEntryE7setSizeEi($21,1);
  $22 = HEAP32[568>>2]|0;
  _dAllocDontReport($22);
  $23 = HEAP32[568>>2]|0;
  $24 = (__ZNK6dArrayI14dColliderEntryE4dataEv($23)|0);
  _dAllocDontReport($24);
  $25 = HEAP32[568>>2]|0;
  __ZN6dArrayI14dColliderEntryE7setSizeEi($25,0);
  STACKTOP = sp;return;
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 $0 = $26;
 $1 = $27;
 __THREW__ = 0;
 invoke_vii(78,($18|0),12);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $32 = ___cxa_find_matching_catch(0|0)|0;
  $33 = tempRet0;
  ___clang_call_terminate($32);
  // unreachable;
 } else {
  $30 = $0;
  $31 = $1;
  ___resumeException($30|0);
  // unreachable;
 }
}
function __ZNK10dArrayBase4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN6dArrayIP11dxGeomClassE4pushES1_($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $item;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)<($5|0);
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$2>>2] = $8;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + 1)|0;
  __ZN10dArrayBase8_setSizeEii($2,$10,4);
 }
 $11 = $1;
 $12 = HEAP32[$2>>2]|0;
 $13 = (($12) - 1)|0;
 $14 = ((($2)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($13<<2)|0);
 HEAP32[$16>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN6dArrayI14dColliderEntryE7setSizeEi($this,$newsize) {
 $this = $this|0;
 $newsize = $newsize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $newsize;
 $2 = $0;
 $3 = $1;
 __ZN10dArrayBase8_setSizeEii($2,$3,8);
 STACKTOP = sp;return;
}
function __ZNK6dArrayI14dColliderEntryE4dataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK6dArrayIP11dxGeomClassEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZL15dCollideSpheresPffS_fP12dContactGeom($p1,$r1,$p2,$r2,$c) {
 $p1 = $p1|0;
 $r1 = +$r1;
 $p2 = $p2|0;
 $r2 = +$r2;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0;
 var $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $d = 0.0, $d1 = 0.0, $k = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $r1;
 $3 = $p2;
 $4 = $r2;
 $5 = $c;
 $6 = $1;
 $7 = $3;
 $8 = (+_dDISTANCE($6,$7));
 $d = $8;
 $9 = $d;
 $10 = $2;
 $11 = $4;
 $12 = $10 + $11;
 $13 = $9 > $12;
 if ($13) {
  $0 = 0;
  $123 = $0;
  STACKTOP = sp;return ($123|0);
 }
 $14 = $d;
 $15 = $14 <= 0.0;
 if ($15) {
  $16 = $1;
  $17 = +HEAPF32[$16>>2];
  $18 = $5;
  HEAPF32[$18>>2] = $17;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $5;
  $23 = ((($22)) + 4|0);
  HEAPF32[$23>>2] = $21;
  $24 = $1;
  $25 = ((($24)) + 8|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $5;
  $28 = ((($27)) + 8|0);
  HEAPF32[$28>>2] = $26;
  $29 = $5;
  $30 = ((($29)) + 16|0);
  HEAPF32[$30>>2] = 1.0;
  $31 = $5;
  $32 = ((($31)) + 16|0);
  $33 = ((($32)) + 4|0);
  HEAPF32[$33>>2] = 0.0;
  $34 = $5;
  $35 = ((($34)) + 16|0);
  $36 = ((($35)) + 8|0);
  HEAPF32[$36>>2] = 0.0;
  $37 = $2;
  $38 = $4;
  $39 = $37 + $38;
  $40 = $5;
  $41 = ((($40)) + 32|0);
  HEAPF32[$41>>2] = $39;
 } else {
  $42 = $d;
  $43 = 1.0 / $42;
  $d1 = $43;
  $44 = $1;
  $45 = +HEAPF32[$44>>2];
  $46 = $3;
  $47 = +HEAPF32[$46>>2];
  $48 = $45 - $47;
  $49 = $d1;
  $50 = $48 * $49;
  $51 = $5;
  $52 = ((($51)) + 16|0);
  HEAPF32[$52>>2] = $50;
  $53 = $1;
  $54 = ((($53)) + 4|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $3;
  $57 = ((($56)) + 4|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $55 - $58;
  $60 = $d1;
  $61 = $59 * $60;
  $62 = $5;
  $63 = ((($62)) + 16|0);
  $64 = ((($63)) + 4|0);
  HEAPF32[$64>>2] = $61;
  $65 = $1;
  $66 = ((($65)) + 8|0);
  $67 = +HEAPF32[$66>>2];
  $68 = $3;
  $69 = ((($68)) + 8|0);
  $70 = +HEAPF32[$69>>2];
  $71 = $67 - $70;
  $72 = $d1;
  $73 = $71 * $72;
  $74 = $5;
  $75 = ((($74)) + 16|0);
  $76 = ((($75)) + 8|0);
  HEAPF32[$76>>2] = $73;
  $77 = $4;
  $78 = $2;
  $79 = $77 - $78;
  $80 = $d;
  $81 = $79 - $80;
  $82 = 0.5 * $81;
  $k = $82;
  $83 = $1;
  $84 = +HEAPF32[$83>>2];
  $85 = $5;
  $86 = ((($85)) + 16|0);
  $87 = +HEAPF32[$86>>2];
  $88 = $k;
  $89 = $87 * $88;
  $90 = $84 + $89;
  $91 = $5;
  HEAPF32[$91>>2] = $90;
  $92 = $1;
  $93 = ((($92)) + 4|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $5;
  $96 = ((($95)) + 16|0);
  $97 = ((($96)) + 4|0);
  $98 = +HEAPF32[$97>>2];
  $99 = $k;
  $100 = $98 * $99;
  $101 = $94 + $100;
  $102 = $5;
  $103 = ((($102)) + 4|0);
  HEAPF32[$103>>2] = $101;
  $104 = $1;
  $105 = ((($104)) + 8|0);
  $106 = +HEAPF32[$105>>2];
  $107 = $5;
  $108 = ((($107)) + 16|0);
  $109 = ((($108)) + 8|0);
  $110 = +HEAPF32[$109>>2];
  $111 = $k;
  $112 = $110 * $111;
  $113 = $106 + $112;
  $114 = $5;
  $115 = ((($114)) + 8|0);
  HEAPF32[$115>>2] = $113;
  $116 = $2;
  $117 = $4;
  $118 = $116 + $117;
  $119 = $d;
  $120 = $118 - $119;
  $121 = $5;
  $122 = ((($121)) + 32|0);
  HEAPF32[$122>>2] = $120;
 }
 $0 = 1;
 $123 = $0;
 STACKTOP = sp;return ($123|0);
}
function __ZNK6dArrayIP6dxGeomEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZL17dSphereColliderFni($num) {
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $num;
 $2 = $1;
 $3 = HEAP32[540>>2]|0;
 $4 = ($2|0)==($3|0);
 do {
  if ($4) {
   $0 = 80;
  } else {
   $5 = $1;
   $6 = HEAP32[544>>2]|0;
   $7 = ($5|0)==($6|0);
   if ($7) {
    $0 = 81;
    break;
   }
   $8 = $1;
   $9 = HEAP32[548>>2]|0;
   $10 = ($8|0)==($9|0);
   if ($10) {
    $0 = 82;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function __ZL11dSphereAABBP6dxGeomPf($geom,$aabb) {
 $geom = $geom|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0.0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $geom;
 $1 = $aabb;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $s = $3;
 $4 = $0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF32[$6>>2];
 $8 = $s;
 $9 = +HEAPF32[$8>>2];
 $10 = $7 - $9;
 $11 = $1;
 HEAPF32[$11>>2] = $10;
 $12 = $0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = +HEAPF32[$14>>2];
 $16 = $s;
 $17 = +HEAPF32[$16>>2];
 $18 = $15 + $17;
 $19 = $1;
 $20 = ((($19)) + 4|0);
 HEAPF32[$20>>2] = $18;
 $21 = $0;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $s;
 $27 = +HEAPF32[$26>>2];
 $28 = $25 - $27;
 $29 = $1;
 $30 = ((($29)) + 8|0);
 HEAPF32[$30>>2] = $28;
 $31 = $0;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 4|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $s;
 $37 = +HEAPF32[$36>>2];
 $38 = $35 + $37;
 $39 = $1;
 $40 = ((($39)) + 12|0);
 HEAPF32[$40>>2] = $38;
 $41 = $0;
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 8|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $s;
 $47 = +HEAPF32[$46>>2];
 $48 = $45 - $47;
 $49 = $1;
 $50 = ((($49)) + 16|0);
 HEAPF32[$50>>2] = $48;
 $51 = $0;
 $52 = ((($51)) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($53)) + 8|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $s;
 $57 = +HEAPF32[$56>>2];
 $58 = $55 + $57;
 $59 = $1;
 $60 = ((($59)) + 20|0);
 HEAPF32[$60>>2] = $58;
 STACKTOP = sp;return;
}
function __ZL14dBoxColliderFni($num) {
 $num = $num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $num;
 $2 = $1;
 $3 = HEAP32[544>>2]|0;
 $4 = ($2|0)==($3|0);
 do {
  if ($4) {
   $0 = 83;
  } else {
   $5 = $1;
   $6 = HEAP32[548>>2]|0;
   $7 = ($5|0)==($6|0);
   if ($7) {
    $0 = 84;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function __ZL8dBoxAABBP6dxGeomPf($geom,$aabb) {
 $geom = $geom|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $17 = 0, $18 = 0.0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0;
 var $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $b = 0, $xrange = 0.0, $yrange = 0.0, $zrange = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $geom;
 $1 = $aabb;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $b = $3;
 $4 = $0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF32[$6>>2];
 $8 = $b;
 $9 = +HEAPF32[$8>>2];
 $10 = $7 * $9;
 $11 = $10;
 $12 = (+Math_abs((+$11)));
 $13 = $12;
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $b;
 $20 = ((($19)) + 4|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $18 * $21;
 $23 = $22;
 $24 = (+Math_abs((+$23)));
 $25 = $24;
 $26 = $13 + $25;
 $27 = $0;
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $b;
 $33 = ((($32)) + 8|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $31 * $34;
 $36 = $35;
 $37 = (+Math_abs((+$36)));
 $38 = $37;
 $39 = $26 + $38;
 $40 = 0.5 * $39;
 $xrange = $40;
 $41 = $0;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 16|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $b;
 $47 = +HEAPF32[$46>>2];
 $48 = $45 * $47;
 $49 = $48;
 $50 = (+Math_abs((+$49)));
 $51 = $50;
 $52 = $0;
 $53 = ((($52)) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($54)) + 20|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $b;
 $58 = ((($57)) + 4|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $56 * $59;
 $61 = $60;
 $62 = (+Math_abs((+$61)));
 $63 = $62;
 $64 = $51 + $63;
 $65 = $0;
 $66 = ((($65)) + 16|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($67)) + 24|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $b;
 $71 = ((($70)) + 8|0);
 $72 = +HEAPF32[$71>>2];
 $73 = $69 * $72;
 $74 = $73;
 $75 = (+Math_abs((+$74)));
 $76 = $75;
 $77 = $64 + $76;
 $78 = 0.5 * $77;
 $yrange = $78;
 $79 = $0;
 $80 = ((($79)) + 16|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($81)) + 32|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $b;
 $85 = +HEAPF32[$84>>2];
 $86 = $83 * $85;
 $87 = $86;
 $88 = (+Math_abs((+$87)));
 $89 = $88;
 $90 = $0;
 $91 = ((($90)) + 16|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($92)) + 36|0);
 $94 = +HEAPF32[$93>>2];
 $95 = $b;
 $96 = ((($95)) + 4|0);
 $97 = +HEAPF32[$96>>2];
 $98 = $94 * $97;
 $99 = $98;
 $100 = (+Math_abs((+$99)));
 $101 = $100;
 $102 = $89 + $101;
 $103 = $0;
 $104 = ((($103)) + 16|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = ((($105)) + 40|0);
 $107 = +HEAPF32[$106>>2];
 $108 = $b;
 $109 = ((($108)) + 8|0);
 $110 = +HEAPF32[$109>>2];
 $111 = $107 * $110;
 $112 = $111;
 $113 = (+Math_abs((+$112)));
 $114 = $113;
 $115 = $102 + $114;
 $116 = 0.5 * $115;
 $zrange = $116;
 $117 = $0;
 $118 = ((($117)) + 12|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = +HEAPF32[$119>>2];
 $121 = $xrange;
 $122 = $120 - $121;
 $123 = $1;
 HEAPF32[$123>>2] = $122;
 $124 = $0;
 $125 = ((($124)) + 12|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = +HEAPF32[$126>>2];
 $128 = $xrange;
 $129 = $127 + $128;
 $130 = $1;
 $131 = ((($130)) + 4|0);
 HEAPF32[$131>>2] = $129;
 $132 = $0;
 $133 = ((($132)) + 12|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ((($134)) + 4|0);
 $136 = +HEAPF32[$135>>2];
 $137 = $yrange;
 $138 = $136 - $137;
 $139 = $1;
 $140 = ((($139)) + 8|0);
 HEAPF32[$140>>2] = $138;
 $141 = $0;
 $142 = ((($141)) + 12|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = ((($143)) + 4|0);
 $145 = +HEAPF32[$144>>2];
 $146 = $yrange;
 $147 = $145 + $146;
 $148 = $1;
 $149 = ((($148)) + 12|0);
 HEAPF32[$149>>2] = $147;
 $150 = $0;
 $151 = ((($150)) + 12|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ((($152)) + 8|0);
 $154 = +HEAPF32[$153>>2];
 $155 = $zrange;
 $156 = $154 - $155;
 $157 = $1;
 $158 = ((($157)) + 16|0);
 HEAPF32[$158>>2] = $156;
 $159 = $0;
 $160 = ((($159)) + 12|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = ((($161)) + 8|0);
 $163 = +HEAPF32[$162>>2];
 $164 = $zrange;
 $165 = $163 + $164;
 $166 = $1;
 $167 = ((($166)) + 20|0);
 HEAPF32[$167>>2] = $165;
 STACKTOP = sp;return;
}
function __ZL20dCCylinderColliderFni($num) {
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $num;
 $2 = $1;
 $3 = HEAP32[540>>2]|0;
 $4 = ($2|0)==($3|0);
 do {
  if ($4) {
   $0 = 85;
  } else {
   $5 = $1;
   $6 = HEAP32[548>>2]|0;
   $7 = ($5|0)==($6|0);
   if ($7) {
    $0 = 86;
    break;
   }
   $8 = $1;
   $9 = HEAP32[552>>2]|0;
   $10 = ($8|0)==($9|0);
   if ($10) {
    $0 = 87;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function __ZL14dCCylinderAABBP6dxGeomPf($geom,$aabb) {
 $geom = $geom|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0;
 var $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0.0, $99 = 0.0, $c = 0, $xrange = 0.0, $yrange = 0.0, $zrange = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $geom;
 $1 = $aabb;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $c = $3;
 $4 = $0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $c;
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 * $11;
 $13 = $12;
 $14 = (+Math_abs((+$13)));
 $15 = $14;
 $16 = $15 * 0.5;
 $17 = $c;
 $18 = +HEAPF32[$17>>2];
 $19 = $16 + $18;
 $xrange = $19;
 $20 = $0;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 24|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $c;
 $26 = ((($25)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $24 * $27;
 $29 = $28;
 $30 = (+Math_abs((+$29)));
 $31 = $30;
 $32 = $31 * 0.5;
 $33 = $c;
 $34 = +HEAPF32[$33>>2];
 $35 = $32 + $34;
 $yrange = $35;
 $36 = $0;
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 40|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $c;
 $42 = ((($41)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $40 * $43;
 $45 = $44;
 $46 = (+Math_abs((+$45)));
 $47 = $46;
 $48 = $47 * 0.5;
 $49 = $c;
 $50 = +HEAPF32[$49>>2];
 $51 = $48 + $50;
 $zrange = $51;
 $52 = $0;
 $53 = ((($52)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = +HEAPF32[$54>>2];
 $56 = $xrange;
 $57 = $55 - $56;
 $58 = $1;
 HEAPF32[$58>>2] = $57;
 $59 = $0;
 $60 = ((($59)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = +HEAPF32[$61>>2];
 $63 = $xrange;
 $64 = $62 + $63;
 $65 = $1;
 $66 = ((($65)) + 4|0);
 HEAPF32[$66>>2] = $64;
 $67 = $0;
 $68 = ((($67)) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 4|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $yrange;
 $73 = $71 - $72;
 $74 = $1;
 $75 = ((($74)) + 8|0);
 HEAPF32[$75>>2] = $73;
 $76 = $0;
 $77 = ((($76)) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($78)) + 4|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $yrange;
 $82 = $80 + $81;
 $83 = $1;
 $84 = ((($83)) + 12|0);
 HEAPF32[$84>>2] = $82;
 $85 = $0;
 $86 = ((($85)) + 12|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($87)) + 8|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $zrange;
 $91 = $89 - $90;
 $92 = $1;
 $93 = ((($92)) + 16|0);
 HEAPF32[$93>>2] = $91;
 $94 = $0;
 $95 = ((($94)) + 12|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($96)) + 8|0);
 $98 = +HEAPF32[$97>>2];
 $99 = $zrange;
 $100 = $98 + $99;
 $101 = $1;
 $102 = ((($101)) + 20|0);
 HEAPF32[$102>>2] = $100;
 STACKTOP = sp;return;
}
function __ZL10dPlaneAABBP6dxGeomPf($geom,$aabb) {
 $geom = $geom|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $geom;
 $1 = $aabb;
 $2 = +HEAPF32[180>>2];
 $3 = -$2;
 $4 = $1;
 HEAPF32[$4>>2] = $3;
 $5 = +HEAPF32[180>>2];
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAPF32[$7>>2] = $5;
 $8 = +HEAPF32[180>>2];
 $9 = -$8;
 $10 = $1;
 $11 = ((($10)) + 8|0);
 HEAPF32[$11>>2] = $9;
 $12 = +HEAPF32[180>>2];
 $13 = $1;
 $14 = ((($13)) + 12|0);
 HEAPF32[$14>>2] = $12;
 $15 = +HEAPF32[180>>2];
 $16 = -$15;
 $17 = $1;
 $18 = ((($17)) + 16|0);
 HEAPF32[$18>>2] = $16;
 $19 = +HEAPF32[180>>2];
 $20 = $1;
 $21 = ((($20)) + 20|0);
 HEAPF32[$21>>2] = $19;
 STACKTOP = sp;return;
}
function __ZL20dGeomGroupColliderFni($num) {
 $num = $num|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $num;
 STACKTOP = sp;return (88|0);
}
function __ZL14dGeomGroupAABBP6dxGeomPf($geom,$aabb) {
 $geom = $geom|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $aabb2 = 0, $gr = 0, $i = 0;
 var $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aabb2 = sp;
 $0 = $geom;
 $1 = $aabb;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $gr = $3;
 $4 = +HEAPF32[180>>2];
 $5 = $1;
 HEAPF32[$5>>2] = $4;
 $6 = +HEAPF32[180>>2];
 $7 = -$6;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 HEAPF32[$9>>2] = $7;
 $10 = +HEAPF32[180>>2];
 $11 = $1;
 $12 = ((($11)) + 8|0);
 HEAPF32[$12>>2] = $10;
 $13 = +HEAPF32[180>>2];
 $14 = -$13;
 $15 = $1;
 $16 = ((($15)) + 12|0);
 HEAPF32[$16>>2] = $14;
 $17 = +HEAPF32[180>>2];
 $18 = $1;
 $19 = ((($18)) + 16|0);
 HEAPF32[$19>>2] = $17;
 $20 = +HEAPF32[180>>2];
 $21 = -$20;
 $22 = $1;
 $23 = ((($22)) + 20|0);
 HEAPF32[$23>>2] = $21;
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = $gr;
  $26 = (__ZNK10dArrayBase4sizeEv($25)|0);
  $27 = ($24|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $gr;
  $29 = $i;
  $30 = (__ZNK6dArrayIP6dxGeomEixEi($28,$29)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $gr;
  $36 = $i;
  $37 = (__ZNK6dArrayIP6dxGeomEixEi($35,$36)|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vii[$34 & 127]($38,$aabb2);
  $j = 0;
  while(1) {
   $39 = $j;
   $40 = ($39|0)<(6);
   if (!($40)) {
    break;
   }
   $41 = $j;
   $42 = (($aabb2) + ($41<<2)|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $j;
   $45 = $1;
   $46 = (($45) + ($44<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $43 < $47;
   if ($48) {
    $49 = $j;
    $50 = (($aabb2) + ($49<<2)|0);
    $51 = +HEAPF32[$50>>2];
    $52 = $j;
    $53 = $1;
    $54 = (($53) + ($52<<2)|0);
    HEAPF32[$54>>2] = $51;
   }
   $55 = $j;
   $56 = (($55) + 2)|0;
   $j = $56;
  }
  $j = 1;
  while(1) {
   $57 = $j;
   $58 = ($57|0)<(6);
   if (!($58)) {
    break;
   }
   $59 = $j;
   $60 = (($aabb2) + ($59<<2)|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $j;
   $63 = $1;
   $64 = (($63) + ($62<<2)|0);
   $65 = +HEAPF32[$64>>2];
   $66 = $61 > $65;
   if ($66) {
    $67 = $j;
    $68 = (($aabb2) + ($67<<2)|0);
    $69 = +HEAPF32[$68>>2];
    $70 = $j;
    $71 = $1;
    $72 = (($71) + ($70<<2)|0);
    HEAPF32[$72>>2] = $69;
   }
   $73 = $j;
   $74 = (($73) + 2)|0;
   $j = $74;
  }
  $75 = $i;
  $76 = (($75) + 1)|0;
  $i = $76;
 }
 STACKTOP = sp;return;
}
function __ZL14dGeomGroupDtorP6dxGeom($geom) {
 $geom = $geom|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $gr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $geom;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $gr = $2;
 $3 = $gr;
 __ZN6dArrayIP6dxGeomED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN10dArrayBase11constructorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN6dArrayIP6dxGeomE4pushES1_($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $item;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)<($5|0);
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$2>>2] = $8;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + 1)|0;
  __ZN10dArrayBase8_setSizeEii($2,$10,4);
 }
 $11 = $1;
 $12 = HEAP32[$2>>2]|0;
 $13 = (($12) - 1)|0;
 $14 = ((($2)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($13<<2)|0);
 HEAP32[$16>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN6dArrayIP6dxGeomE6removeEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = HEAP32[$2>>2]|0;
 $7 = ($5|0)<($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) - 1)|0;
 $10 = $1;
 $11 = (($9) - ($10))|0;
 $n = $11;
 $12 = $n;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = ((($2)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = (($15) + ($16<<2)|0);
  $18 = ((($2)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = (($19) + ($20<<2)|0);
  $22 = ((($21)) + 4|0);
  $23 = $n;
  $24 = $23<<2;
  _memmove(($17|0),($22|0),($24|0))|0;
 }
 $25 = HEAP32[$2>>2]|0;
 $26 = (($25) + -1)|0;
 HEAP32[$2>>2] = $26;
 STACKTOP = sp;return;
}
function __ZL16compute_final_txPK6dxGeom($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $g;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $tr = $2;
 $3 = $tr;
 $4 = ((($3)) + 8|0);
 $5 = $0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $tr;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 _dMULTIPLY0_331($4,$7,$11);
 $12 = $0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = +HEAPF32[$14>>2];
 $16 = $tr;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 + $15;
 HEAPF32[$17>>2] = $19;
 $20 = $0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $tr;
 $26 = ((($25)) + 8|0);
 $27 = ((($26)) + 4|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $28 + $24;
 HEAPF32[$27>>2] = $29;
 $30 = $0;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 8|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $tr;
 $36 = ((($35)) + 8|0);
 $37 = ((($36)) + 8|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $38 + $34;
 HEAPF32[$37>>2] = $39;
 $40 = $tr;
 $41 = ((($40)) + 24|0);
 $42 = $0;
 $43 = ((($42)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $tr;
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 _dMULTIPLY0_333($41,$44,$48);
 STACKTOP = sp;return;
}
function __ZL24dGeomTransformColliderFni($num) {
 $num = $num|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $num;
 STACKTOP = sp;return (89|0);
}
function __ZL18dGeomTransformAABBP6dxGeomPf($geom,$aabb) {
 $geom = $geom|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $Rbak = 0, $posbak = 0, $tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $geom;
 $1 = $aabb;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $tr = $3;
 $4 = $tr;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $8 = $tr;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $posbak = $11;
  $12 = $tr;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $Rbak = $15;
  $16 = $0;
  __ZL16compute_final_txPK6dxGeom($16);
  $17 = $tr;
  $18 = ((($17)) + 8|0);
  $19 = $tr;
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 12|0);
  HEAP32[$21>>2] = $18;
  $22 = $tr;
  $23 = ((($22)) + 24|0);
  $24 = $tr;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 16|0);
  HEAP32[$26>>2] = $23;
  $27 = $tr;
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $tr;
  $33 = HEAP32[$32>>2]|0;
  $34 = $1;
  FUNCTION_TABLE_vii[$31 & 127]($33,$34);
  $35 = $posbak;
  $36 = $tr;
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 12|0);
  HEAP32[$38>>2] = $35;
  $39 = $Rbak;
  $40 = $tr;
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 16|0);
  HEAP32[$42>>2] = $39;
  STACKTOP = sp;return;
 } else {
  $7 = $1;
  _dSetZero($7,6);
  STACKTOP = sp;return;
 }
}
function __ZL18dGeomTransformDtorP6dxGeom($geom) {
 $geom = $geom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $geom;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $tr = $2;
 $3 = $tr;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $tr;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $tr;
 $11 = HEAP32[$10>>2]|0;
 _dGeomDestroy($11);
 STACKTOP = sp;return;
}
function __ZN6dArrayIP6dxGeomED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN10dArrayBase8_freeAllEi($1,4);
 STACKTOP = sp;return;
}
function _dDISTANCE($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 $7 = $0;
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = +HEAPF32[$9>>2];
 $11 = $8 - $10;
 $12 = $6 * $11;
 $13 = $0;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $15 - $18;
 $20 = $0;
 $21 = ((($20)) + 4|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = ((($23)) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $22 - $25;
 $27 = $19 * $26;
 $28 = $12 + $27;
 $29 = $0;
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $1;
 $33 = ((($32)) + 8|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $31 - $34;
 $36 = $0;
 $37 = ((($36)) + 8|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $1;
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $38 - $41;
 $43 = $35 * $42;
 $44 = $28 + $43;
 $45 = $44;
 $46 = (+Math_sqrt((+$45)));
 $47 = $46;
 STACKTOP = sp;return (+$47);
}
function __ZN6dArrayIP11dxGeomClassEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN10dArrayBase11constructorEv($1);
 STACKTOP = sp;return;
}
function __ZN6dArrayIP11dxGeomClassE7setSizeEi($this,$newsize) {
 $this = $this|0;
 $newsize = $newsize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $newsize;
 $2 = $0;
 $3 = $1;
 __ZN10dArrayBase8_setSizeEii($2,$3,4);
 STACKTOP = sp;return;
}
function __ZNK6dArrayIP11dxGeomClassE4dataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN6dArrayI14dColliderEntryEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN10dArrayBase11constructorEv($1);
 STACKTOP = sp;return;
}
function _dFactorLDLT($A,$d,$n,$nskip1) {
 $A = $A|0;
 $d = $d|0;
 $n = $n|0;
 $nskip1 = $nskip1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0;
 var $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0;
 var $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0.0, $402 = 0, $403 = 0.0;
 var $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0.0, $421 = 0.0;
 var $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0.0, $44 = 0.0;
 var $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0, $458 = 0.0;
 var $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0.0;
 var $477 = 0.0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0;
 var $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0.0, $517 = 0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0.0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0.0, $542 = 0.0, $543 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $Z11 = 0.0, $Z21 = 0.0, $Z22 = 0.0, $dd = 0.0, $dee = 0, $ell = 0, $i = 0, $j = 0, $m11 = 0.0, $m21 = 0.0, $m22 = 0.0, $p1 = 0.0, $p2 = 0.0, $q1 = 0.0, $q2 = 0.0, $sum = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $A;
 $1 = $d;
 $2 = $n;
 $3 = $nskip1;
 $4 = $2;
 $5 = ($4|0)<(1);
 if ($5) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $2;
  $8 = (($7) - 2)|0;
  $9 = ($6|0)<=($8|0);
  if (!($9)) {
   break;
  }
  $10 = $0;
  $11 = $0;
  $12 = $i;
  $13 = $3;
  $14 = Math_imul($12, $13)|0;
  $15 = (($11) + ($14<<2)|0);
  $16 = $i;
  $17 = $3;
  _dSolveL1_2($10,$15,$16,$17);
  $Z11 = 0.0;
  $Z21 = 0.0;
  $Z22 = 0.0;
  $18 = $0;
  $19 = $i;
  $20 = $3;
  $21 = Math_imul($19, $20)|0;
  $22 = (($18) + ($21<<2)|0);
  $ell = $22;
  $23 = $1;
  $dee = $23;
  $24 = $i;
  $25 = (($24) - 6)|0;
  $j = $25;
  while(1) {
   $26 = $j;
   $27 = ($26|0)>=(0);
   if (!($27)) {
    break;
   }
   $28 = $ell;
   $29 = +HEAPF32[$28>>2];
   $p1 = $29;
   $30 = $3;
   $31 = $ell;
   $32 = (($31) + ($30<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $p2 = $33;
   $34 = $dee;
   $35 = +HEAPF32[$34>>2];
   $dd = $35;
   $36 = $p1;
   $37 = $dd;
   $38 = $36 * $37;
   $q1 = $38;
   $39 = $p2;
   $40 = $dd;
   $41 = $39 * $40;
   $q2 = $41;
   $42 = $q1;
   $43 = $ell;
   HEAPF32[$43>>2] = $42;
   $44 = $q2;
   $45 = $3;
   $46 = $ell;
   $47 = (($46) + ($45<<2)|0);
   HEAPF32[$47>>2] = $44;
   $48 = $p1;
   $49 = $q1;
   $50 = $48 * $49;
   $m11 = $50;
   $51 = $p2;
   $52 = $q1;
   $53 = $51 * $52;
   $m21 = $53;
   $54 = $p2;
   $55 = $q2;
   $56 = $54 * $55;
   $m22 = $56;
   $57 = $m11;
   $58 = $Z11;
   $59 = $58 + $57;
   $Z11 = $59;
   $60 = $m21;
   $61 = $Z21;
   $62 = $61 + $60;
   $Z21 = $62;
   $63 = $m22;
   $64 = $Z22;
   $65 = $64 + $63;
   $Z22 = $65;
   $66 = $ell;
   $67 = ((($66)) + 4|0);
   $68 = +HEAPF32[$67>>2];
   $p1 = $68;
   $69 = $3;
   $70 = (1 + ($69))|0;
   $71 = $ell;
   $72 = (($71) + ($70<<2)|0);
   $73 = +HEAPF32[$72>>2];
   $p2 = $73;
   $74 = $dee;
   $75 = ((($74)) + 4|0);
   $76 = +HEAPF32[$75>>2];
   $dd = $76;
   $77 = $p1;
   $78 = $dd;
   $79 = $77 * $78;
   $q1 = $79;
   $80 = $p2;
   $81 = $dd;
   $82 = $80 * $81;
   $q2 = $82;
   $83 = $q1;
   $84 = $ell;
   $85 = ((($84)) + 4|0);
   HEAPF32[$85>>2] = $83;
   $86 = $q2;
   $87 = $3;
   $88 = (1 + ($87))|0;
   $89 = $ell;
   $90 = (($89) + ($88<<2)|0);
   HEAPF32[$90>>2] = $86;
   $91 = $p1;
   $92 = $q1;
   $93 = $91 * $92;
   $m11 = $93;
   $94 = $p2;
   $95 = $q1;
   $96 = $94 * $95;
   $m21 = $96;
   $97 = $p2;
   $98 = $q2;
   $99 = $97 * $98;
   $m22 = $99;
   $100 = $m11;
   $101 = $Z11;
   $102 = $101 + $100;
   $Z11 = $102;
   $103 = $m21;
   $104 = $Z21;
   $105 = $104 + $103;
   $Z21 = $105;
   $106 = $m22;
   $107 = $Z22;
   $108 = $107 + $106;
   $Z22 = $108;
   $109 = $ell;
   $110 = ((($109)) + 8|0);
   $111 = +HEAPF32[$110>>2];
   $p1 = $111;
   $112 = $3;
   $113 = (2 + ($112))|0;
   $114 = $ell;
   $115 = (($114) + ($113<<2)|0);
   $116 = +HEAPF32[$115>>2];
   $p2 = $116;
   $117 = $dee;
   $118 = ((($117)) + 8|0);
   $119 = +HEAPF32[$118>>2];
   $dd = $119;
   $120 = $p1;
   $121 = $dd;
   $122 = $120 * $121;
   $q1 = $122;
   $123 = $p2;
   $124 = $dd;
   $125 = $123 * $124;
   $q2 = $125;
   $126 = $q1;
   $127 = $ell;
   $128 = ((($127)) + 8|0);
   HEAPF32[$128>>2] = $126;
   $129 = $q2;
   $130 = $3;
   $131 = (2 + ($130))|0;
   $132 = $ell;
   $133 = (($132) + ($131<<2)|0);
   HEAPF32[$133>>2] = $129;
   $134 = $p1;
   $135 = $q1;
   $136 = $134 * $135;
   $m11 = $136;
   $137 = $p2;
   $138 = $q1;
   $139 = $137 * $138;
   $m21 = $139;
   $140 = $p2;
   $141 = $q2;
   $142 = $140 * $141;
   $m22 = $142;
   $143 = $m11;
   $144 = $Z11;
   $145 = $144 + $143;
   $Z11 = $145;
   $146 = $m21;
   $147 = $Z21;
   $148 = $147 + $146;
   $Z21 = $148;
   $149 = $m22;
   $150 = $Z22;
   $151 = $150 + $149;
   $Z22 = $151;
   $152 = $ell;
   $153 = ((($152)) + 12|0);
   $154 = +HEAPF32[$153>>2];
   $p1 = $154;
   $155 = $3;
   $156 = (3 + ($155))|0;
   $157 = $ell;
   $158 = (($157) + ($156<<2)|0);
   $159 = +HEAPF32[$158>>2];
   $p2 = $159;
   $160 = $dee;
   $161 = ((($160)) + 12|0);
   $162 = +HEAPF32[$161>>2];
   $dd = $162;
   $163 = $p1;
   $164 = $dd;
   $165 = $163 * $164;
   $q1 = $165;
   $166 = $p2;
   $167 = $dd;
   $168 = $166 * $167;
   $q2 = $168;
   $169 = $q1;
   $170 = $ell;
   $171 = ((($170)) + 12|0);
   HEAPF32[$171>>2] = $169;
   $172 = $q2;
   $173 = $3;
   $174 = (3 + ($173))|0;
   $175 = $ell;
   $176 = (($175) + ($174<<2)|0);
   HEAPF32[$176>>2] = $172;
   $177 = $p1;
   $178 = $q1;
   $179 = $177 * $178;
   $m11 = $179;
   $180 = $p2;
   $181 = $q1;
   $182 = $180 * $181;
   $m21 = $182;
   $183 = $p2;
   $184 = $q2;
   $185 = $183 * $184;
   $m22 = $185;
   $186 = $m11;
   $187 = $Z11;
   $188 = $187 + $186;
   $Z11 = $188;
   $189 = $m21;
   $190 = $Z21;
   $191 = $190 + $189;
   $Z21 = $191;
   $192 = $m22;
   $193 = $Z22;
   $194 = $193 + $192;
   $Z22 = $194;
   $195 = $ell;
   $196 = ((($195)) + 16|0);
   $197 = +HEAPF32[$196>>2];
   $p1 = $197;
   $198 = $3;
   $199 = (4 + ($198))|0;
   $200 = $ell;
   $201 = (($200) + ($199<<2)|0);
   $202 = +HEAPF32[$201>>2];
   $p2 = $202;
   $203 = $dee;
   $204 = ((($203)) + 16|0);
   $205 = +HEAPF32[$204>>2];
   $dd = $205;
   $206 = $p1;
   $207 = $dd;
   $208 = $206 * $207;
   $q1 = $208;
   $209 = $p2;
   $210 = $dd;
   $211 = $209 * $210;
   $q2 = $211;
   $212 = $q1;
   $213 = $ell;
   $214 = ((($213)) + 16|0);
   HEAPF32[$214>>2] = $212;
   $215 = $q2;
   $216 = $3;
   $217 = (4 + ($216))|0;
   $218 = $ell;
   $219 = (($218) + ($217<<2)|0);
   HEAPF32[$219>>2] = $215;
   $220 = $p1;
   $221 = $q1;
   $222 = $220 * $221;
   $m11 = $222;
   $223 = $p2;
   $224 = $q1;
   $225 = $223 * $224;
   $m21 = $225;
   $226 = $p2;
   $227 = $q2;
   $228 = $226 * $227;
   $m22 = $228;
   $229 = $m11;
   $230 = $Z11;
   $231 = $230 + $229;
   $Z11 = $231;
   $232 = $m21;
   $233 = $Z21;
   $234 = $233 + $232;
   $Z21 = $234;
   $235 = $m22;
   $236 = $Z22;
   $237 = $236 + $235;
   $Z22 = $237;
   $238 = $ell;
   $239 = ((($238)) + 20|0);
   $240 = +HEAPF32[$239>>2];
   $p1 = $240;
   $241 = $3;
   $242 = (5 + ($241))|0;
   $243 = $ell;
   $244 = (($243) + ($242<<2)|0);
   $245 = +HEAPF32[$244>>2];
   $p2 = $245;
   $246 = $dee;
   $247 = ((($246)) + 20|0);
   $248 = +HEAPF32[$247>>2];
   $dd = $248;
   $249 = $p1;
   $250 = $dd;
   $251 = $249 * $250;
   $q1 = $251;
   $252 = $p2;
   $253 = $dd;
   $254 = $252 * $253;
   $q2 = $254;
   $255 = $q1;
   $256 = $ell;
   $257 = ((($256)) + 20|0);
   HEAPF32[$257>>2] = $255;
   $258 = $q2;
   $259 = $3;
   $260 = (5 + ($259))|0;
   $261 = $ell;
   $262 = (($261) + ($260<<2)|0);
   HEAPF32[$262>>2] = $258;
   $263 = $p1;
   $264 = $q1;
   $265 = $263 * $264;
   $m11 = $265;
   $266 = $p2;
   $267 = $q1;
   $268 = $266 * $267;
   $m21 = $268;
   $269 = $p2;
   $270 = $q2;
   $271 = $269 * $270;
   $m22 = $271;
   $272 = $m11;
   $273 = $Z11;
   $274 = $273 + $272;
   $Z11 = $274;
   $275 = $m21;
   $276 = $Z21;
   $277 = $276 + $275;
   $Z21 = $277;
   $278 = $m22;
   $279 = $Z22;
   $280 = $279 + $278;
   $Z22 = $280;
   $281 = $ell;
   $282 = ((($281)) + 24|0);
   $ell = $282;
   $283 = $dee;
   $284 = ((($283)) + 24|0);
   $dee = $284;
   $285 = $j;
   $286 = (($285) - 6)|0;
   $j = $286;
  }
  $287 = $j;
  $288 = (($287) + 6)|0;
  $j = $288;
  while(1) {
   $289 = $j;
   $290 = ($289|0)>(0);
   $291 = $ell;
   $292 = +HEAPF32[$291>>2];
   if (!($290)) {
    break;
   }
   $p1 = $292;
   $293 = $3;
   $294 = $ell;
   $295 = (($294) + ($293<<2)|0);
   $296 = +HEAPF32[$295>>2];
   $p2 = $296;
   $297 = $dee;
   $298 = +HEAPF32[$297>>2];
   $dd = $298;
   $299 = $p1;
   $300 = $dd;
   $301 = $299 * $300;
   $q1 = $301;
   $302 = $p2;
   $303 = $dd;
   $304 = $302 * $303;
   $q2 = $304;
   $305 = $q1;
   $306 = $ell;
   HEAPF32[$306>>2] = $305;
   $307 = $q2;
   $308 = $3;
   $309 = $ell;
   $310 = (($309) + ($308<<2)|0);
   HEAPF32[$310>>2] = $307;
   $311 = $p1;
   $312 = $q1;
   $313 = $311 * $312;
   $m11 = $313;
   $314 = $p2;
   $315 = $q1;
   $316 = $314 * $315;
   $m21 = $316;
   $317 = $p2;
   $318 = $q2;
   $319 = $317 * $318;
   $m22 = $319;
   $320 = $m11;
   $321 = $Z11;
   $322 = $321 + $320;
   $Z11 = $322;
   $323 = $m21;
   $324 = $Z21;
   $325 = $324 + $323;
   $Z21 = $325;
   $326 = $m22;
   $327 = $Z22;
   $328 = $327 + $326;
   $Z22 = $328;
   $329 = $ell;
   $330 = ((($329)) + 4|0);
   $ell = $330;
   $331 = $dee;
   $332 = ((($331)) + 4|0);
   $dee = $332;
   $333 = $j;
   $334 = (($333) + -1)|0;
   $j = $334;
  }
  $335 = $Z11;
  $336 = $292 - $335;
  $Z11 = $336;
  $337 = $3;
  $338 = $ell;
  $339 = (($338) + ($337<<2)|0);
  $340 = +HEAPF32[$339>>2];
  $341 = $Z21;
  $342 = $340 - $341;
  $Z21 = $342;
  $343 = $3;
  $344 = (1 + ($343))|0;
  $345 = $ell;
  $346 = (($345) + ($344<<2)|0);
  $347 = +HEAPF32[$346>>2];
  $348 = $Z22;
  $349 = $347 - $348;
  $Z22 = $349;
  $350 = $1;
  $351 = $i;
  $352 = (($350) + ($351<<2)|0);
  $dee = $352;
  $353 = $Z11;
  $354 = 1.0 / $353;
  $355 = $dee;
  HEAPF32[$355>>2] = $354;
  $sum = 0.0;
  $356 = $Z21;
  $q1 = $356;
  $357 = $q1;
  $358 = $dee;
  $359 = +HEAPF32[$358>>2];
  $360 = $357 * $359;
  $q2 = $360;
  $361 = $q2;
  $Z21 = $361;
  $362 = $q1;
  $363 = $q2;
  $364 = $362 * $363;
  $365 = $sum;
  $366 = $365 + $364;
  $sum = $366;
  $367 = $Z22;
  $368 = $sum;
  $369 = $367 - $368;
  $370 = 1.0 / $369;
  $371 = $dee;
  $372 = ((($371)) + 4|0);
  HEAPF32[$372>>2] = $370;
  $373 = $Z21;
  $374 = $3;
  $375 = $ell;
  $376 = (($375) + ($374<<2)|0);
  HEAPF32[$376>>2] = $373;
  $377 = $i;
  $378 = (($377) + 2)|0;
  $i = $378;
 }
 $379 = $2;
 $380 = $i;
 $381 = (($379) - ($380))|0;
 switch ($381|0) {
 case 1:  {
  $382 = $0;
  $383 = $0;
  $384 = $i;
  $385 = $3;
  $386 = Math_imul($384, $385)|0;
  $387 = (($383) + ($386<<2)|0);
  $388 = $i;
  $389 = $3;
  _dSolveL1_1($382,$387,$388,$389);
  $Z11 = 0.0;
  $390 = $0;
  $391 = $i;
  $392 = $3;
  $393 = Math_imul($391, $392)|0;
  $394 = (($390) + ($393<<2)|0);
  $ell = $394;
  $395 = $1;
  $dee = $395;
  $396 = $i;
  $397 = (($396) - 6)|0;
  $j = $397;
  while(1) {
   $398 = $j;
   $399 = ($398|0)>=(0);
   if (!($399)) {
    break;
   }
   $400 = $ell;
   $401 = +HEAPF32[$400>>2];
   $p1 = $401;
   $402 = $dee;
   $403 = +HEAPF32[$402>>2];
   $dd = $403;
   $404 = $p1;
   $405 = $dd;
   $406 = $404 * $405;
   $q1 = $406;
   $407 = $q1;
   $408 = $ell;
   HEAPF32[$408>>2] = $407;
   $409 = $p1;
   $410 = $q1;
   $411 = $409 * $410;
   $m11 = $411;
   $412 = $m11;
   $413 = $Z11;
   $414 = $413 + $412;
   $Z11 = $414;
   $415 = $ell;
   $416 = ((($415)) + 4|0);
   $417 = +HEAPF32[$416>>2];
   $p1 = $417;
   $418 = $dee;
   $419 = ((($418)) + 4|0);
   $420 = +HEAPF32[$419>>2];
   $dd = $420;
   $421 = $p1;
   $422 = $dd;
   $423 = $421 * $422;
   $q1 = $423;
   $424 = $q1;
   $425 = $ell;
   $426 = ((($425)) + 4|0);
   HEAPF32[$426>>2] = $424;
   $427 = $p1;
   $428 = $q1;
   $429 = $427 * $428;
   $m11 = $429;
   $430 = $m11;
   $431 = $Z11;
   $432 = $431 + $430;
   $Z11 = $432;
   $433 = $ell;
   $434 = ((($433)) + 8|0);
   $435 = +HEAPF32[$434>>2];
   $p1 = $435;
   $436 = $dee;
   $437 = ((($436)) + 8|0);
   $438 = +HEAPF32[$437>>2];
   $dd = $438;
   $439 = $p1;
   $440 = $dd;
   $441 = $439 * $440;
   $q1 = $441;
   $442 = $q1;
   $443 = $ell;
   $444 = ((($443)) + 8|0);
   HEAPF32[$444>>2] = $442;
   $445 = $p1;
   $446 = $q1;
   $447 = $445 * $446;
   $m11 = $447;
   $448 = $m11;
   $449 = $Z11;
   $450 = $449 + $448;
   $Z11 = $450;
   $451 = $ell;
   $452 = ((($451)) + 12|0);
   $453 = +HEAPF32[$452>>2];
   $p1 = $453;
   $454 = $dee;
   $455 = ((($454)) + 12|0);
   $456 = +HEAPF32[$455>>2];
   $dd = $456;
   $457 = $p1;
   $458 = $dd;
   $459 = $457 * $458;
   $q1 = $459;
   $460 = $q1;
   $461 = $ell;
   $462 = ((($461)) + 12|0);
   HEAPF32[$462>>2] = $460;
   $463 = $p1;
   $464 = $q1;
   $465 = $463 * $464;
   $m11 = $465;
   $466 = $m11;
   $467 = $Z11;
   $468 = $467 + $466;
   $Z11 = $468;
   $469 = $ell;
   $470 = ((($469)) + 16|0);
   $471 = +HEAPF32[$470>>2];
   $p1 = $471;
   $472 = $dee;
   $473 = ((($472)) + 16|0);
   $474 = +HEAPF32[$473>>2];
   $dd = $474;
   $475 = $p1;
   $476 = $dd;
   $477 = $475 * $476;
   $q1 = $477;
   $478 = $q1;
   $479 = $ell;
   $480 = ((($479)) + 16|0);
   HEAPF32[$480>>2] = $478;
   $481 = $p1;
   $482 = $q1;
   $483 = $481 * $482;
   $m11 = $483;
   $484 = $m11;
   $485 = $Z11;
   $486 = $485 + $484;
   $Z11 = $486;
   $487 = $ell;
   $488 = ((($487)) + 20|0);
   $489 = +HEAPF32[$488>>2];
   $p1 = $489;
   $490 = $dee;
   $491 = ((($490)) + 20|0);
   $492 = +HEAPF32[$491>>2];
   $dd = $492;
   $493 = $p1;
   $494 = $dd;
   $495 = $493 * $494;
   $q1 = $495;
   $496 = $q1;
   $497 = $ell;
   $498 = ((($497)) + 20|0);
   HEAPF32[$498>>2] = $496;
   $499 = $p1;
   $500 = $q1;
   $501 = $499 * $500;
   $m11 = $501;
   $502 = $m11;
   $503 = $Z11;
   $504 = $503 + $502;
   $Z11 = $504;
   $505 = $ell;
   $506 = ((($505)) + 24|0);
   $ell = $506;
   $507 = $dee;
   $508 = ((($507)) + 24|0);
   $dee = $508;
   $509 = $j;
   $510 = (($509) - 6)|0;
   $j = $510;
  }
  $511 = $j;
  $512 = (($511) + 6)|0;
  $j = $512;
  while(1) {
   $513 = $j;
   $514 = ($513|0)>(0);
   $515 = $ell;
   $516 = +HEAPF32[$515>>2];
   if (!($514)) {
    break;
   }
   $p1 = $516;
   $517 = $dee;
   $518 = +HEAPF32[$517>>2];
   $dd = $518;
   $519 = $p1;
   $520 = $dd;
   $521 = $519 * $520;
   $q1 = $521;
   $522 = $q1;
   $523 = $ell;
   HEAPF32[$523>>2] = $522;
   $524 = $p1;
   $525 = $q1;
   $526 = $524 * $525;
   $m11 = $526;
   $527 = $m11;
   $528 = $Z11;
   $529 = $528 + $527;
   $Z11 = $529;
   $530 = $ell;
   $531 = ((($530)) + 4|0);
   $ell = $531;
   $532 = $dee;
   $533 = ((($532)) + 4|0);
   $dee = $533;
   $534 = $j;
   $535 = (($534) + -1)|0;
   $j = $535;
  }
  $536 = $Z11;
  $537 = $516 - $536;
  $Z11 = $537;
  $538 = $1;
  $539 = $i;
  $540 = (($538) + ($539<<2)|0);
  $dee = $540;
  $541 = $Z11;
  $542 = 1.0 / $541;
  $543 = $dee;
  HEAPF32[$543>>2] = $542;
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  _llvm_trap();
  // unreachable;
 }
 }
}
function _dSolveL1_2($L,$B,$n,$lskip1) {
 $L = $L|0;
 $B = $B|0;
 $n = $n|0;
 $lskip1 = $lskip1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $Z11 = 0.0, $Z12 = 0.0, $Z21 = 0.0, $Z22 = 0.0, $ell = 0;
 var $ex = 0, $i = 0, $j = 0, $m11 = 0.0, $m12 = 0.0, $m21 = 0.0, $m22 = 0.0, $p1 = 0.0, $p2 = 0.0, $q1 = 0.0, $q2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $L;
 $1 = $B;
 $2 = $n;
 $3 = $lskip1;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $2;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $Z11 = 0.0;
  $Z12 = 0.0;
  $Z21 = 0.0;
  $Z22 = 0.0;
  $7 = $0;
  $8 = $i;
  $9 = $3;
  $10 = Math_imul($8, $9)|0;
  $11 = (($7) + ($10<<2)|0);
  $ell = $11;
  $12 = $1;
  $ex = $12;
  $13 = $i;
  $14 = (($13) - 2)|0;
  $j = $14;
  while(1) {
   $15 = $j;
   $16 = ($15|0)>=(0);
   if (!($16)) {
    break;
   }
   $17 = $ell;
   $18 = +HEAPF32[$17>>2];
   $p1 = $18;
   $19 = $ex;
   $20 = +HEAPF32[$19>>2];
   $q1 = $20;
   $21 = $p1;
   $22 = $q1;
   $23 = $21 * $22;
   $m11 = $23;
   $24 = $3;
   $25 = $ex;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $q2 = $27;
   $28 = $p1;
   $29 = $q2;
   $30 = $28 * $29;
   $m12 = $30;
   $31 = $3;
   $32 = $ell;
   $33 = (($32) + ($31<<2)|0);
   $34 = +HEAPF32[$33>>2];
   $p2 = $34;
   $35 = $p2;
   $36 = $q1;
   $37 = $35 * $36;
   $m21 = $37;
   $38 = $p2;
   $39 = $q2;
   $40 = $38 * $39;
   $m22 = $40;
   $41 = $m11;
   $42 = $Z11;
   $43 = $42 + $41;
   $Z11 = $43;
   $44 = $m12;
   $45 = $Z12;
   $46 = $45 + $44;
   $Z12 = $46;
   $47 = $m21;
   $48 = $Z21;
   $49 = $48 + $47;
   $Z21 = $49;
   $50 = $m22;
   $51 = $Z22;
   $52 = $51 + $50;
   $Z22 = $52;
   $53 = $ell;
   $54 = ((($53)) + 4|0);
   $55 = +HEAPF32[$54>>2];
   $p1 = $55;
   $56 = $ex;
   $57 = ((($56)) + 4|0);
   $58 = +HEAPF32[$57>>2];
   $q1 = $58;
   $59 = $p1;
   $60 = $q1;
   $61 = $59 * $60;
   $m11 = $61;
   $62 = $3;
   $63 = (1 + ($62))|0;
   $64 = $ex;
   $65 = (($64) + ($63<<2)|0);
   $66 = +HEAPF32[$65>>2];
   $q2 = $66;
   $67 = $p1;
   $68 = $q2;
   $69 = $67 * $68;
   $m12 = $69;
   $70 = $3;
   $71 = (1 + ($70))|0;
   $72 = $ell;
   $73 = (($72) + ($71<<2)|0);
   $74 = +HEAPF32[$73>>2];
   $p2 = $74;
   $75 = $p2;
   $76 = $q1;
   $77 = $75 * $76;
   $m21 = $77;
   $78 = $p2;
   $79 = $q2;
   $80 = $78 * $79;
   $m22 = $80;
   $81 = $ell;
   $82 = ((($81)) + 8|0);
   $ell = $82;
   $83 = $ex;
   $84 = ((($83)) + 8|0);
   $ex = $84;
   $85 = $m11;
   $86 = $Z11;
   $87 = $86 + $85;
   $Z11 = $87;
   $88 = $m12;
   $89 = $Z12;
   $90 = $89 + $88;
   $Z12 = $90;
   $91 = $m21;
   $92 = $Z21;
   $93 = $92 + $91;
   $Z21 = $93;
   $94 = $m22;
   $95 = $Z22;
   $96 = $95 + $94;
   $Z22 = $96;
   $97 = $j;
   $98 = (($97) - 2)|0;
   $j = $98;
  }
  $99 = $j;
  $100 = (($99) + 2)|0;
  $j = $100;
  while(1) {
   $101 = $j;
   $102 = ($101|0)>(0);
   if (!($102)) {
    break;
   }
   $103 = $ell;
   $104 = +HEAPF32[$103>>2];
   $p1 = $104;
   $105 = $ex;
   $106 = +HEAPF32[$105>>2];
   $q1 = $106;
   $107 = $p1;
   $108 = $q1;
   $109 = $107 * $108;
   $m11 = $109;
   $110 = $3;
   $111 = $ex;
   $112 = (($111) + ($110<<2)|0);
   $113 = +HEAPF32[$112>>2];
   $q2 = $113;
   $114 = $p1;
   $115 = $q2;
   $116 = $114 * $115;
   $m12 = $116;
   $117 = $3;
   $118 = $ell;
   $119 = (($118) + ($117<<2)|0);
   $120 = +HEAPF32[$119>>2];
   $p2 = $120;
   $121 = $p2;
   $122 = $q1;
   $123 = $121 * $122;
   $m21 = $123;
   $124 = $p2;
   $125 = $q2;
   $126 = $124 * $125;
   $m22 = $126;
   $127 = $ell;
   $128 = ((($127)) + 4|0);
   $ell = $128;
   $129 = $ex;
   $130 = ((($129)) + 4|0);
   $ex = $130;
   $131 = $m11;
   $132 = $Z11;
   $133 = $132 + $131;
   $Z11 = $133;
   $134 = $m12;
   $135 = $Z12;
   $136 = $135 + $134;
   $Z12 = $136;
   $137 = $m21;
   $138 = $Z21;
   $139 = $138 + $137;
   $Z21 = $139;
   $140 = $m22;
   $141 = $Z22;
   $142 = $141 + $140;
   $Z22 = $142;
   $143 = $j;
   $144 = (($143) + -1)|0;
   $j = $144;
  }
  $145 = $ex;
  $146 = +HEAPF32[$145>>2];
  $147 = $Z11;
  $148 = $146 - $147;
  $Z11 = $148;
  $149 = $Z11;
  $150 = $ex;
  HEAPF32[$150>>2] = $149;
  $151 = $3;
  $152 = $ex;
  $153 = (($152) + ($151<<2)|0);
  $154 = +HEAPF32[$153>>2];
  $155 = $Z12;
  $156 = $154 - $155;
  $Z12 = $156;
  $157 = $Z12;
  $158 = $3;
  $159 = $ex;
  $160 = (($159) + ($158<<2)|0);
  HEAPF32[$160>>2] = $157;
  $161 = $3;
  $162 = $ell;
  $163 = (($162) + ($161<<2)|0);
  $164 = +HEAPF32[$163>>2];
  $p1 = $164;
  $165 = $ex;
  $166 = ((($165)) + 4|0);
  $167 = +HEAPF32[$166>>2];
  $168 = $Z21;
  $169 = $167 - $168;
  $170 = $p1;
  $171 = $Z11;
  $172 = $170 * $171;
  $173 = $169 - $172;
  $Z21 = $173;
  $174 = $Z21;
  $175 = $ex;
  $176 = ((($175)) + 4|0);
  HEAPF32[$176>>2] = $174;
  $177 = $3;
  $178 = (1 + ($177))|0;
  $179 = $ex;
  $180 = (($179) + ($178<<2)|0);
  $181 = +HEAPF32[$180>>2];
  $182 = $Z22;
  $183 = $181 - $182;
  $184 = $p1;
  $185 = $Z12;
  $186 = $184 * $185;
  $187 = $183 - $186;
  $Z22 = $187;
  $188 = $Z22;
  $189 = $3;
  $190 = (1 + ($189))|0;
  $191 = $ex;
  $192 = (($191) + ($190<<2)|0);
  HEAPF32[$192>>2] = $188;
  $193 = $i;
  $194 = (($193) + 2)|0;
  $i = $194;
 }
 STACKTOP = sp;return;
}
function _dSolveL1_1($L,$B,$n,$lskip1) {
 $L = $L|0;
 $B = $B|0;
 $n = $n|0;
 $lskip1 = $lskip1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var $Z11 = 0.0, $Z21 = 0.0, $ell = 0, $ex = 0, $i = 0, $j = 0, $m11 = 0.0, $m21 = 0.0, $p1 = 0.0, $p2 = 0.0, $q1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $L;
 $1 = $B;
 $2 = $n;
 $3 = $lskip1;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $2;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $Z11 = 0.0;
  $Z21 = 0.0;
  $7 = $0;
  $8 = $i;
  $9 = $3;
  $10 = Math_imul($8, $9)|0;
  $11 = (($7) + ($10<<2)|0);
  $ell = $11;
  $12 = $1;
  $ex = $12;
  $13 = $i;
  $14 = (($13) - 2)|0;
  $j = $14;
  while(1) {
   $15 = $j;
   $16 = ($15|0)>=(0);
   if (!($16)) {
    break;
   }
   $17 = $ell;
   $18 = +HEAPF32[$17>>2];
   $p1 = $18;
   $19 = $ex;
   $20 = +HEAPF32[$19>>2];
   $q1 = $20;
   $21 = $p1;
   $22 = $q1;
   $23 = $21 * $22;
   $m11 = $23;
   $24 = $3;
   $25 = $ell;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $p2 = $27;
   $28 = $p2;
   $29 = $q1;
   $30 = $28 * $29;
   $m21 = $30;
   $31 = $m11;
   $32 = $Z11;
   $33 = $32 + $31;
   $Z11 = $33;
   $34 = $m21;
   $35 = $Z21;
   $36 = $35 + $34;
   $Z21 = $36;
   $37 = $ell;
   $38 = ((($37)) + 4|0);
   $39 = +HEAPF32[$38>>2];
   $p1 = $39;
   $40 = $ex;
   $41 = ((($40)) + 4|0);
   $42 = +HEAPF32[$41>>2];
   $q1 = $42;
   $43 = $p1;
   $44 = $q1;
   $45 = $43 * $44;
   $m11 = $45;
   $46 = $3;
   $47 = (1 + ($46))|0;
   $48 = $ell;
   $49 = (($48) + ($47<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $p2 = $50;
   $51 = $p2;
   $52 = $q1;
   $53 = $51 * $52;
   $m21 = $53;
   $54 = $ell;
   $55 = ((($54)) + 8|0);
   $ell = $55;
   $56 = $ex;
   $57 = ((($56)) + 8|0);
   $ex = $57;
   $58 = $m11;
   $59 = $Z11;
   $60 = $59 + $58;
   $Z11 = $60;
   $61 = $m21;
   $62 = $Z21;
   $63 = $62 + $61;
   $Z21 = $63;
   $64 = $j;
   $65 = (($64) - 2)|0;
   $j = $65;
  }
  $66 = $j;
  $67 = (($66) + 2)|0;
  $j = $67;
  while(1) {
   $68 = $j;
   $69 = ($68|0)>(0);
   if (!($69)) {
    break;
   }
   $70 = $ell;
   $71 = +HEAPF32[$70>>2];
   $p1 = $71;
   $72 = $ex;
   $73 = +HEAPF32[$72>>2];
   $q1 = $73;
   $74 = $p1;
   $75 = $q1;
   $76 = $74 * $75;
   $m11 = $76;
   $77 = $3;
   $78 = $ell;
   $79 = (($78) + ($77<<2)|0);
   $80 = +HEAPF32[$79>>2];
   $p2 = $80;
   $81 = $p2;
   $82 = $q1;
   $83 = $81 * $82;
   $m21 = $83;
   $84 = $ell;
   $85 = ((($84)) + 4|0);
   $ell = $85;
   $86 = $ex;
   $87 = ((($86)) + 4|0);
   $ex = $87;
   $88 = $m11;
   $89 = $Z11;
   $90 = $89 + $88;
   $Z11 = $90;
   $91 = $m21;
   $92 = $Z21;
   $93 = $92 + $91;
   $Z21 = $93;
   $94 = $j;
   $95 = (($94) + -1)|0;
   $j = $95;
  }
  $96 = $ex;
  $97 = +HEAPF32[$96>>2];
  $98 = $Z11;
  $99 = $97 - $98;
  $Z11 = $99;
  $100 = $Z11;
  $101 = $ex;
  HEAPF32[$101>>2] = $100;
  $102 = $3;
  $103 = $ell;
  $104 = (($103) + ($102<<2)|0);
  $105 = +HEAPF32[$104>>2];
  $p1 = $105;
  $106 = $ex;
  $107 = ((($106)) + 4|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $Z21;
  $110 = $108 - $109;
  $111 = $p1;
  $112 = $Z11;
  $113 = $111 * $112;
  $114 = $110 - $113;
  $Z21 = $114;
  $115 = $Z21;
  $116 = $ex;
  $117 = ((($116)) + 4|0);
  HEAPF32[$117>>2] = $115;
  $118 = $i;
  $119 = (($118) + 2)|0;
  $i = $119;
 }
 STACKTOP = sp;return;
}
function _dSolveL1($L,$B,$n,$lskip1) {
 $L = $L|0;
 $B = $B|0;
 $n = $n|0;
 $lskip1 = $lskip1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0;
 var $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0.0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0;
 var $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0;
 var $387 = 0, $388 = 0.0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0.0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0;
 var $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0.0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0;
 var $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0;
 var $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0.0, $521 = 0, $522 = 0.0, $523 = 0, $524 = 0, $525 = 0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0, $53 = 0.0;
 var $530 = 0.0, $531 = 0, $532 = 0, $533 = 0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0.0;
 var $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0.0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0.0, $592 = 0, $593 = 0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0.0, $600 = 0.0, $601 = 0.0;
 var $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0.0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0.0, $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0.0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0;
 var $639 = 0.0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0.0;
 var $675 = 0.0, $676 = 0.0, $677 = 0, $678 = 0, $679 = 0.0, $68 = 0.0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0.0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0;
 var $693 = 0.0, $694 = 0.0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $698 = 0.0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0.0, $702 = 0, $703 = 0, $704 = 0.0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0.0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0.0, $713 = 0, $714 = 0, $715 = 0.0, $716 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0.0, $721 = 0, $722 = 0, $723 = 0.0, $724 = 0, $725 = 0, $726 = 0.0, $727 = 0.0, $728 = 0.0;
 var $729 = 0.0, $73 = 0.0, $730 = 0.0, $731 = 0.0, $732 = 0, $733 = 0, $734 = 0.0, $735 = 0, $736 = 0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0.0, $741 = 0.0, $742 = 0.0, $743 = 0, $744 = 0, $745 = 0.0, $746 = 0;
 var $747 = 0, $748 = 0.0, $749 = 0.0, $75 = 0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0, $755 = 0, $756 = 0.0, $757 = 0, $758 = 0, $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0.0, $764 = 0.0;
 var $765 = 0, $766 = 0, $767 = 0.0, $768 = 0, $769 = 0, $77 = 0, $770 = 0.0, $771 = 0.0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0.0, $776 = 0, $777 = 0, $778 = 0.0, $779 = 0, $78 = 0.0, $780 = 0, $781 = 0.0, $782 = 0.0;
 var $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0, $788 = 0, $789 = 0, $79 = 0.0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0.0, $799 = 0, $8 = 0, $80 = 0.0;
 var $800 = 0.0, $801 = 0.0, $802 = 0.0, $803 = 0.0, $804 = 0.0, $805 = 0.0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0.0, $810 = 0, $811 = 0, $812 = 0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0;
 var $Z11 = 0.0, $Z21 = 0.0, $Z31 = 0.0, $Z41 = 0.0, $ell = 0, $ex = 0, $i = 0, $j = 0, $lskip2 = 0, $lskip3 = 0, $p1 = 0.0, $p2 = 0.0, $p3 = 0.0, $p4 = 0.0, $q1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $L;
 $1 = $B;
 $2 = $n;
 $3 = $lskip1;
 $4 = $3;
 $5 = $4<<1;
 $lskip2 = $5;
 $6 = $3;
 $7 = ($6*3)|0;
 $lskip3 = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $2;
  $10 = (($9) - 4)|0;
  $11 = ($8|0)<=($10|0);
  if (!($11)) {
   break;
  }
  $Z11 = 0.0;
  $Z21 = 0.0;
  $Z31 = 0.0;
  $Z41 = 0.0;
  $12 = $0;
  $13 = $i;
  $14 = $3;
  $15 = Math_imul($13, $14)|0;
  $16 = (($12) + ($15<<2)|0);
  $ell = $16;
  $17 = $1;
  $ex = $17;
  $18 = $i;
  $19 = (($18) - 12)|0;
  $j = $19;
  while(1) {
   $20 = $j;
   $21 = ($20|0)>=(0);
   if (!($21)) {
    break;
   }
   $22 = $ell;
   $23 = +HEAPF32[$22>>2];
   $p1 = $23;
   $24 = $ex;
   $25 = +HEAPF32[$24>>2];
   $q1 = $25;
   $26 = $3;
   $27 = $ell;
   $28 = (($27) + ($26<<2)|0);
   $29 = +HEAPF32[$28>>2];
   $p2 = $29;
   $30 = $lskip2;
   $31 = $ell;
   $32 = (($31) + ($30<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $p3 = $33;
   $34 = $lskip3;
   $35 = $ell;
   $36 = (($35) + ($34<<2)|0);
   $37 = +HEAPF32[$36>>2];
   $p4 = $37;
   $38 = $p1;
   $39 = $q1;
   $40 = $38 * $39;
   $41 = $Z11;
   $42 = $41 + $40;
   $Z11 = $42;
   $43 = $p2;
   $44 = $q1;
   $45 = $43 * $44;
   $46 = $Z21;
   $47 = $46 + $45;
   $Z21 = $47;
   $48 = $p3;
   $49 = $q1;
   $50 = $48 * $49;
   $51 = $Z31;
   $52 = $51 + $50;
   $Z31 = $52;
   $53 = $p4;
   $54 = $q1;
   $55 = $53 * $54;
   $56 = $Z41;
   $57 = $56 + $55;
   $Z41 = $57;
   $58 = $ell;
   $59 = ((($58)) + 4|0);
   $60 = +HEAPF32[$59>>2];
   $p1 = $60;
   $61 = $ex;
   $62 = ((($61)) + 4|0);
   $63 = +HEAPF32[$62>>2];
   $q1 = $63;
   $64 = $3;
   $65 = (1 + ($64))|0;
   $66 = $ell;
   $67 = (($66) + ($65<<2)|0);
   $68 = +HEAPF32[$67>>2];
   $p2 = $68;
   $69 = $lskip2;
   $70 = (1 + ($69))|0;
   $71 = $ell;
   $72 = (($71) + ($70<<2)|0);
   $73 = +HEAPF32[$72>>2];
   $p3 = $73;
   $74 = $lskip3;
   $75 = (1 + ($74))|0;
   $76 = $ell;
   $77 = (($76) + ($75<<2)|0);
   $78 = +HEAPF32[$77>>2];
   $p4 = $78;
   $79 = $p1;
   $80 = $q1;
   $81 = $79 * $80;
   $82 = $Z11;
   $83 = $82 + $81;
   $Z11 = $83;
   $84 = $p2;
   $85 = $q1;
   $86 = $84 * $85;
   $87 = $Z21;
   $88 = $87 + $86;
   $Z21 = $88;
   $89 = $p3;
   $90 = $q1;
   $91 = $89 * $90;
   $92 = $Z31;
   $93 = $92 + $91;
   $Z31 = $93;
   $94 = $p4;
   $95 = $q1;
   $96 = $94 * $95;
   $97 = $Z41;
   $98 = $97 + $96;
   $Z41 = $98;
   $99 = $ell;
   $100 = ((($99)) + 8|0);
   $101 = +HEAPF32[$100>>2];
   $p1 = $101;
   $102 = $ex;
   $103 = ((($102)) + 8|0);
   $104 = +HEAPF32[$103>>2];
   $q1 = $104;
   $105 = $3;
   $106 = (2 + ($105))|0;
   $107 = $ell;
   $108 = (($107) + ($106<<2)|0);
   $109 = +HEAPF32[$108>>2];
   $p2 = $109;
   $110 = $lskip2;
   $111 = (2 + ($110))|0;
   $112 = $ell;
   $113 = (($112) + ($111<<2)|0);
   $114 = +HEAPF32[$113>>2];
   $p3 = $114;
   $115 = $lskip3;
   $116 = (2 + ($115))|0;
   $117 = $ell;
   $118 = (($117) + ($116<<2)|0);
   $119 = +HEAPF32[$118>>2];
   $p4 = $119;
   $120 = $p1;
   $121 = $q1;
   $122 = $120 * $121;
   $123 = $Z11;
   $124 = $123 + $122;
   $Z11 = $124;
   $125 = $p2;
   $126 = $q1;
   $127 = $125 * $126;
   $128 = $Z21;
   $129 = $128 + $127;
   $Z21 = $129;
   $130 = $p3;
   $131 = $q1;
   $132 = $130 * $131;
   $133 = $Z31;
   $134 = $133 + $132;
   $Z31 = $134;
   $135 = $p4;
   $136 = $q1;
   $137 = $135 * $136;
   $138 = $Z41;
   $139 = $138 + $137;
   $Z41 = $139;
   $140 = $ell;
   $141 = ((($140)) + 12|0);
   $142 = +HEAPF32[$141>>2];
   $p1 = $142;
   $143 = $ex;
   $144 = ((($143)) + 12|0);
   $145 = +HEAPF32[$144>>2];
   $q1 = $145;
   $146 = $3;
   $147 = (3 + ($146))|0;
   $148 = $ell;
   $149 = (($148) + ($147<<2)|0);
   $150 = +HEAPF32[$149>>2];
   $p2 = $150;
   $151 = $lskip2;
   $152 = (3 + ($151))|0;
   $153 = $ell;
   $154 = (($153) + ($152<<2)|0);
   $155 = +HEAPF32[$154>>2];
   $p3 = $155;
   $156 = $lskip3;
   $157 = (3 + ($156))|0;
   $158 = $ell;
   $159 = (($158) + ($157<<2)|0);
   $160 = +HEAPF32[$159>>2];
   $p4 = $160;
   $161 = $p1;
   $162 = $q1;
   $163 = $161 * $162;
   $164 = $Z11;
   $165 = $164 + $163;
   $Z11 = $165;
   $166 = $p2;
   $167 = $q1;
   $168 = $166 * $167;
   $169 = $Z21;
   $170 = $169 + $168;
   $Z21 = $170;
   $171 = $p3;
   $172 = $q1;
   $173 = $171 * $172;
   $174 = $Z31;
   $175 = $174 + $173;
   $Z31 = $175;
   $176 = $p4;
   $177 = $q1;
   $178 = $176 * $177;
   $179 = $Z41;
   $180 = $179 + $178;
   $Z41 = $180;
   $181 = $ell;
   $182 = ((($181)) + 16|0);
   $183 = +HEAPF32[$182>>2];
   $p1 = $183;
   $184 = $ex;
   $185 = ((($184)) + 16|0);
   $186 = +HEAPF32[$185>>2];
   $q1 = $186;
   $187 = $3;
   $188 = (4 + ($187))|0;
   $189 = $ell;
   $190 = (($189) + ($188<<2)|0);
   $191 = +HEAPF32[$190>>2];
   $p2 = $191;
   $192 = $lskip2;
   $193 = (4 + ($192))|0;
   $194 = $ell;
   $195 = (($194) + ($193<<2)|0);
   $196 = +HEAPF32[$195>>2];
   $p3 = $196;
   $197 = $lskip3;
   $198 = (4 + ($197))|0;
   $199 = $ell;
   $200 = (($199) + ($198<<2)|0);
   $201 = +HEAPF32[$200>>2];
   $p4 = $201;
   $202 = $p1;
   $203 = $q1;
   $204 = $202 * $203;
   $205 = $Z11;
   $206 = $205 + $204;
   $Z11 = $206;
   $207 = $p2;
   $208 = $q1;
   $209 = $207 * $208;
   $210 = $Z21;
   $211 = $210 + $209;
   $Z21 = $211;
   $212 = $p3;
   $213 = $q1;
   $214 = $212 * $213;
   $215 = $Z31;
   $216 = $215 + $214;
   $Z31 = $216;
   $217 = $p4;
   $218 = $q1;
   $219 = $217 * $218;
   $220 = $Z41;
   $221 = $220 + $219;
   $Z41 = $221;
   $222 = $ell;
   $223 = ((($222)) + 20|0);
   $224 = +HEAPF32[$223>>2];
   $p1 = $224;
   $225 = $ex;
   $226 = ((($225)) + 20|0);
   $227 = +HEAPF32[$226>>2];
   $q1 = $227;
   $228 = $3;
   $229 = (5 + ($228))|0;
   $230 = $ell;
   $231 = (($230) + ($229<<2)|0);
   $232 = +HEAPF32[$231>>2];
   $p2 = $232;
   $233 = $lskip2;
   $234 = (5 + ($233))|0;
   $235 = $ell;
   $236 = (($235) + ($234<<2)|0);
   $237 = +HEAPF32[$236>>2];
   $p3 = $237;
   $238 = $lskip3;
   $239 = (5 + ($238))|0;
   $240 = $ell;
   $241 = (($240) + ($239<<2)|0);
   $242 = +HEAPF32[$241>>2];
   $p4 = $242;
   $243 = $p1;
   $244 = $q1;
   $245 = $243 * $244;
   $246 = $Z11;
   $247 = $246 + $245;
   $Z11 = $247;
   $248 = $p2;
   $249 = $q1;
   $250 = $248 * $249;
   $251 = $Z21;
   $252 = $251 + $250;
   $Z21 = $252;
   $253 = $p3;
   $254 = $q1;
   $255 = $253 * $254;
   $256 = $Z31;
   $257 = $256 + $255;
   $Z31 = $257;
   $258 = $p4;
   $259 = $q1;
   $260 = $258 * $259;
   $261 = $Z41;
   $262 = $261 + $260;
   $Z41 = $262;
   $263 = $ell;
   $264 = ((($263)) + 24|0);
   $265 = +HEAPF32[$264>>2];
   $p1 = $265;
   $266 = $ex;
   $267 = ((($266)) + 24|0);
   $268 = +HEAPF32[$267>>2];
   $q1 = $268;
   $269 = $3;
   $270 = (6 + ($269))|0;
   $271 = $ell;
   $272 = (($271) + ($270<<2)|0);
   $273 = +HEAPF32[$272>>2];
   $p2 = $273;
   $274 = $lskip2;
   $275 = (6 + ($274))|0;
   $276 = $ell;
   $277 = (($276) + ($275<<2)|0);
   $278 = +HEAPF32[$277>>2];
   $p3 = $278;
   $279 = $lskip3;
   $280 = (6 + ($279))|0;
   $281 = $ell;
   $282 = (($281) + ($280<<2)|0);
   $283 = +HEAPF32[$282>>2];
   $p4 = $283;
   $284 = $p1;
   $285 = $q1;
   $286 = $284 * $285;
   $287 = $Z11;
   $288 = $287 + $286;
   $Z11 = $288;
   $289 = $p2;
   $290 = $q1;
   $291 = $289 * $290;
   $292 = $Z21;
   $293 = $292 + $291;
   $Z21 = $293;
   $294 = $p3;
   $295 = $q1;
   $296 = $294 * $295;
   $297 = $Z31;
   $298 = $297 + $296;
   $Z31 = $298;
   $299 = $p4;
   $300 = $q1;
   $301 = $299 * $300;
   $302 = $Z41;
   $303 = $302 + $301;
   $Z41 = $303;
   $304 = $ell;
   $305 = ((($304)) + 28|0);
   $306 = +HEAPF32[$305>>2];
   $p1 = $306;
   $307 = $ex;
   $308 = ((($307)) + 28|0);
   $309 = +HEAPF32[$308>>2];
   $q1 = $309;
   $310 = $3;
   $311 = (7 + ($310))|0;
   $312 = $ell;
   $313 = (($312) + ($311<<2)|0);
   $314 = +HEAPF32[$313>>2];
   $p2 = $314;
   $315 = $lskip2;
   $316 = (7 + ($315))|0;
   $317 = $ell;
   $318 = (($317) + ($316<<2)|0);
   $319 = +HEAPF32[$318>>2];
   $p3 = $319;
   $320 = $lskip3;
   $321 = (7 + ($320))|0;
   $322 = $ell;
   $323 = (($322) + ($321<<2)|0);
   $324 = +HEAPF32[$323>>2];
   $p4 = $324;
   $325 = $p1;
   $326 = $q1;
   $327 = $325 * $326;
   $328 = $Z11;
   $329 = $328 + $327;
   $Z11 = $329;
   $330 = $p2;
   $331 = $q1;
   $332 = $330 * $331;
   $333 = $Z21;
   $334 = $333 + $332;
   $Z21 = $334;
   $335 = $p3;
   $336 = $q1;
   $337 = $335 * $336;
   $338 = $Z31;
   $339 = $338 + $337;
   $Z31 = $339;
   $340 = $p4;
   $341 = $q1;
   $342 = $340 * $341;
   $343 = $Z41;
   $344 = $343 + $342;
   $Z41 = $344;
   $345 = $ell;
   $346 = ((($345)) + 32|0);
   $347 = +HEAPF32[$346>>2];
   $p1 = $347;
   $348 = $ex;
   $349 = ((($348)) + 32|0);
   $350 = +HEAPF32[$349>>2];
   $q1 = $350;
   $351 = $3;
   $352 = (8 + ($351))|0;
   $353 = $ell;
   $354 = (($353) + ($352<<2)|0);
   $355 = +HEAPF32[$354>>2];
   $p2 = $355;
   $356 = $lskip2;
   $357 = (8 + ($356))|0;
   $358 = $ell;
   $359 = (($358) + ($357<<2)|0);
   $360 = +HEAPF32[$359>>2];
   $p3 = $360;
   $361 = $lskip3;
   $362 = (8 + ($361))|0;
   $363 = $ell;
   $364 = (($363) + ($362<<2)|0);
   $365 = +HEAPF32[$364>>2];
   $p4 = $365;
   $366 = $p1;
   $367 = $q1;
   $368 = $366 * $367;
   $369 = $Z11;
   $370 = $369 + $368;
   $Z11 = $370;
   $371 = $p2;
   $372 = $q1;
   $373 = $371 * $372;
   $374 = $Z21;
   $375 = $374 + $373;
   $Z21 = $375;
   $376 = $p3;
   $377 = $q1;
   $378 = $376 * $377;
   $379 = $Z31;
   $380 = $379 + $378;
   $Z31 = $380;
   $381 = $p4;
   $382 = $q1;
   $383 = $381 * $382;
   $384 = $Z41;
   $385 = $384 + $383;
   $Z41 = $385;
   $386 = $ell;
   $387 = ((($386)) + 36|0);
   $388 = +HEAPF32[$387>>2];
   $p1 = $388;
   $389 = $ex;
   $390 = ((($389)) + 36|0);
   $391 = +HEAPF32[$390>>2];
   $q1 = $391;
   $392 = $3;
   $393 = (9 + ($392))|0;
   $394 = $ell;
   $395 = (($394) + ($393<<2)|0);
   $396 = +HEAPF32[$395>>2];
   $p2 = $396;
   $397 = $lskip2;
   $398 = (9 + ($397))|0;
   $399 = $ell;
   $400 = (($399) + ($398<<2)|0);
   $401 = +HEAPF32[$400>>2];
   $p3 = $401;
   $402 = $lskip3;
   $403 = (9 + ($402))|0;
   $404 = $ell;
   $405 = (($404) + ($403<<2)|0);
   $406 = +HEAPF32[$405>>2];
   $p4 = $406;
   $407 = $p1;
   $408 = $q1;
   $409 = $407 * $408;
   $410 = $Z11;
   $411 = $410 + $409;
   $Z11 = $411;
   $412 = $p2;
   $413 = $q1;
   $414 = $412 * $413;
   $415 = $Z21;
   $416 = $415 + $414;
   $Z21 = $416;
   $417 = $p3;
   $418 = $q1;
   $419 = $417 * $418;
   $420 = $Z31;
   $421 = $420 + $419;
   $Z31 = $421;
   $422 = $p4;
   $423 = $q1;
   $424 = $422 * $423;
   $425 = $Z41;
   $426 = $425 + $424;
   $Z41 = $426;
   $427 = $ell;
   $428 = ((($427)) + 40|0);
   $429 = +HEAPF32[$428>>2];
   $p1 = $429;
   $430 = $ex;
   $431 = ((($430)) + 40|0);
   $432 = +HEAPF32[$431>>2];
   $q1 = $432;
   $433 = $3;
   $434 = (10 + ($433))|0;
   $435 = $ell;
   $436 = (($435) + ($434<<2)|0);
   $437 = +HEAPF32[$436>>2];
   $p2 = $437;
   $438 = $lskip2;
   $439 = (10 + ($438))|0;
   $440 = $ell;
   $441 = (($440) + ($439<<2)|0);
   $442 = +HEAPF32[$441>>2];
   $p3 = $442;
   $443 = $lskip3;
   $444 = (10 + ($443))|0;
   $445 = $ell;
   $446 = (($445) + ($444<<2)|0);
   $447 = +HEAPF32[$446>>2];
   $p4 = $447;
   $448 = $p1;
   $449 = $q1;
   $450 = $448 * $449;
   $451 = $Z11;
   $452 = $451 + $450;
   $Z11 = $452;
   $453 = $p2;
   $454 = $q1;
   $455 = $453 * $454;
   $456 = $Z21;
   $457 = $456 + $455;
   $Z21 = $457;
   $458 = $p3;
   $459 = $q1;
   $460 = $458 * $459;
   $461 = $Z31;
   $462 = $461 + $460;
   $Z31 = $462;
   $463 = $p4;
   $464 = $q1;
   $465 = $463 * $464;
   $466 = $Z41;
   $467 = $466 + $465;
   $Z41 = $467;
   $468 = $ell;
   $469 = ((($468)) + 44|0);
   $470 = +HEAPF32[$469>>2];
   $p1 = $470;
   $471 = $ex;
   $472 = ((($471)) + 44|0);
   $473 = +HEAPF32[$472>>2];
   $q1 = $473;
   $474 = $3;
   $475 = (11 + ($474))|0;
   $476 = $ell;
   $477 = (($476) + ($475<<2)|0);
   $478 = +HEAPF32[$477>>2];
   $p2 = $478;
   $479 = $lskip2;
   $480 = (11 + ($479))|0;
   $481 = $ell;
   $482 = (($481) + ($480<<2)|0);
   $483 = +HEAPF32[$482>>2];
   $p3 = $483;
   $484 = $lskip3;
   $485 = (11 + ($484))|0;
   $486 = $ell;
   $487 = (($486) + ($485<<2)|0);
   $488 = +HEAPF32[$487>>2];
   $p4 = $488;
   $489 = $p1;
   $490 = $q1;
   $491 = $489 * $490;
   $492 = $Z11;
   $493 = $492 + $491;
   $Z11 = $493;
   $494 = $p2;
   $495 = $q1;
   $496 = $494 * $495;
   $497 = $Z21;
   $498 = $497 + $496;
   $Z21 = $498;
   $499 = $p3;
   $500 = $q1;
   $501 = $499 * $500;
   $502 = $Z31;
   $503 = $502 + $501;
   $Z31 = $503;
   $504 = $p4;
   $505 = $q1;
   $506 = $504 * $505;
   $507 = $Z41;
   $508 = $507 + $506;
   $Z41 = $508;
   $509 = $ell;
   $510 = ((($509)) + 48|0);
   $ell = $510;
   $511 = $ex;
   $512 = ((($511)) + 48|0);
   $ex = $512;
   $513 = $j;
   $514 = (($513) - 12)|0;
   $j = $514;
  }
  $515 = $j;
  $516 = (($515) + 12)|0;
  $j = $516;
  while(1) {
   $517 = $j;
   $518 = ($517|0)>(0);
   if (!($518)) {
    break;
   }
   $519 = $ell;
   $520 = +HEAPF32[$519>>2];
   $p1 = $520;
   $521 = $ex;
   $522 = +HEAPF32[$521>>2];
   $q1 = $522;
   $523 = $3;
   $524 = $ell;
   $525 = (($524) + ($523<<2)|0);
   $526 = +HEAPF32[$525>>2];
   $p2 = $526;
   $527 = $lskip2;
   $528 = $ell;
   $529 = (($528) + ($527<<2)|0);
   $530 = +HEAPF32[$529>>2];
   $p3 = $530;
   $531 = $lskip3;
   $532 = $ell;
   $533 = (($532) + ($531<<2)|0);
   $534 = +HEAPF32[$533>>2];
   $p4 = $534;
   $535 = $p1;
   $536 = $q1;
   $537 = $535 * $536;
   $538 = $Z11;
   $539 = $538 + $537;
   $Z11 = $539;
   $540 = $p2;
   $541 = $q1;
   $542 = $540 * $541;
   $543 = $Z21;
   $544 = $543 + $542;
   $Z21 = $544;
   $545 = $p3;
   $546 = $q1;
   $547 = $545 * $546;
   $548 = $Z31;
   $549 = $548 + $547;
   $Z31 = $549;
   $550 = $p4;
   $551 = $q1;
   $552 = $550 * $551;
   $553 = $Z41;
   $554 = $553 + $552;
   $Z41 = $554;
   $555 = $ell;
   $556 = ((($555)) + 4|0);
   $ell = $556;
   $557 = $ex;
   $558 = ((($557)) + 4|0);
   $ex = $558;
   $559 = $j;
   $560 = (($559) + -1)|0;
   $j = $560;
  }
  $561 = $ex;
  $562 = +HEAPF32[$561>>2];
  $563 = $Z11;
  $564 = $562 - $563;
  $Z11 = $564;
  $565 = $Z11;
  $566 = $ex;
  HEAPF32[$566>>2] = $565;
  $567 = $3;
  $568 = $ell;
  $569 = (($568) + ($567<<2)|0);
  $570 = +HEAPF32[$569>>2];
  $p1 = $570;
  $571 = $ex;
  $572 = ((($571)) + 4|0);
  $573 = +HEAPF32[$572>>2];
  $574 = $Z21;
  $575 = $573 - $574;
  $576 = $p1;
  $577 = $Z11;
  $578 = $576 * $577;
  $579 = $575 - $578;
  $Z21 = $579;
  $580 = $Z21;
  $581 = $ex;
  $582 = ((($581)) + 4|0);
  HEAPF32[$582>>2] = $580;
  $583 = $lskip2;
  $584 = $ell;
  $585 = (($584) + ($583<<2)|0);
  $586 = +HEAPF32[$585>>2];
  $p1 = $586;
  $587 = $lskip2;
  $588 = (1 + ($587))|0;
  $589 = $ell;
  $590 = (($589) + ($588<<2)|0);
  $591 = +HEAPF32[$590>>2];
  $p2 = $591;
  $592 = $ex;
  $593 = ((($592)) + 8|0);
  $594 = +HEAPF32[$593>>2];
  $595 = $Z31;
  $596 = $594 - $595;
  $597 = $p1;
  $598 = $Z11;
  $599 = $597 * $598;
  $600 = $596 - $599;
  $601 = $p2;
  $602 = $Z21;
  $603 = $601 * $602;
  $604 = $600 - $603;
  $Z31 = $604;
  $605 = $Z31;
  $606 = $ex;
  $607 = ((($606)) + 8|0);
  HEAPF32[$607>>2] = $605;
  $608 = $lskip3;
  $609 = $ell;
  $610 = (($609) + ($608<<2)|0);
  $611 = +HEAPF32[$610>>2];
  $p1 = $611;
  $612 = $lskip3;
  $613 = (1 + ($612))|0;
  $614 = $ell;
  $615 = (($614) + ($613<<2)|0);
  $616 = +HEAPF32[$615>>2];
  $p2 = $616;
  $617 = $lskip3;
  $618 = (2 + ($617))|0;
  $619 = $ell;
  $620 = (($619) + ($618<<2)|0);
  $621 = +HEAPF32[$620>>2];
  $p3 = $621;
  $622 = $ex;
  $623 = ((($622)) + 12|0);
  $624 = +HEAPF32[$623>>2];
  $625 = $Z41;
  $626 = $624 - $625;
  $627 = $p1;
  $628 = $Z11;
  $629 = $627 * $628;
  $630 = $626 - $629;
  $631 = $p2;
  $632 = $Z21;
  $633 = $631 * $632;
  $634 = $630 - $633;
  $635 = $p3;
  $636 = $Z31;
  $637 = $635 * $636;
  $638 = $634 - $637;
  $Z41 = $638;
  $639 = $Z41;
  $640 = $ex;
  $641 = ((($640)) + 12|0);
  HEAPF32[$641>>2] = $639;
  $642 = $i;
  $643 = (($642) + 4)|0;
  $i = $643;
 }
 while(1) {
  $644 = $i;
  $645 = $2;
  $646 = ($644|0)<($645|0);
  if (!($646)) {
   break;
  }
  $Z11 = 0.0;
  $647 = $0;
  $648 = $i;
  $649 = $3;
  $650 = Math_imul($648, $649)|0;
  $651 = (($647) + ($650<<2)|0);
  $ell = $651;
  $652 = $1;
  $ex = $652;
  $653 = $i;
  $654 = (($653) - 12)|0;
  $j = $654;
  while(1) {
   $655 = $j;
   $656 = ($655|0)>=(0);
   if (!($656)) {
    break;
   }
   $657 = $ell;
   $658 = +HEAPF32[$657>>2];
   $p1 = $658;
   $659 = $ex;
   $660 = +HEAPF32[$659>>2];
   $q1 = $660;
   $661 = $p1;
   $662 = $q1;
   $663 = $661 * $662;
   $664 = $Z11;
   $665 = $664 + $663;
   $Z11 = $665;
   $666 = $ell;
   $667 = ((($666)) + 4|0);
   $668 = +HEAPF32[$667>>2];
   $p1 = $668;
   $669 = $ex;
   $670 = ((($669)) + 4|0);
   $671 = +HEAPF32[$670>>2];
   $q1 = $671;
   $672 = $p1;
   $673 = $q1;
   $674 = $672 * $673;
   $675 = $Z11;
   $676 = $675 + $674;
   $Z11 = $676;
   $677 = $ell;
   $678 = ((($677)) + 8|0);
   $679 = +HEAPF32[$678>>2];
   $p1 = $679;
   $680 = $ex;
   $681 = ((($680)) + 8|0);
   $682 = +HEAPF32[$681>>2];
   $q1 = $682;
   $683 = $p1;
   $684 = $q1;
   $685 = $683 * $684;
   $686 = $Z11;
   $687 = $686 + $685;
   $Z11 = $687;
   $688 = $ell;
   $689 = ((($688)) + 12|0);
   $690 = +HEAPF32[$689>>2];
   $p1 = $690;
   $691 = $ex;
   $692 = ((($691)) + 12|0);
   $693 = +HEAPF32[$692>>2];
   $q1 = $693;
   $694 = $p1;
   $695 = $q1;
   $696 = $694 * $695;
   $697 = $Z11;
   $698 = $697 + $696;
   $Z11 = $698;
   $699 = $ell;
   $700 = ((($699)) + 16|0);
   $701 = +HEAPF32[$700>>2];
   $p1 = $701;
   $702 = $ex;
   $703 = ((($702)) + 16|0);
   $704 = +HEAPF32[$703>>2];
   $q1 = $704;
   $705 = $p1;
   $706 = $q1;
   $707 = $705 * $706;
   $708 = $Z11;
   $709 = $708 + $707;
   $Z11 = $709;
   $710 = $ell;
   $711 = ((($710)) + 20|0);
   $712 = +HEAPF32[$711>>2];
   $p1 = $712;
   $713 = $ex;
   $714 = ((($713)) + 20|0);
   $715 = +HEAPF32[$714>>2];
   $q1 = $715;
   $716 = $p1;
   $717 = $q1;
   $718 = $716 * $717;
   $719 = $Z11;
   $720 = $719 + $718;
   $Z11 = $720;
   $721 = $ell;
   $722 = ((($721)) + 24|0);
   $723 = +HEAPF32[$722>>2];
   $p1 = $723;
   $724 = $ex;
   $725 = ((($724)) + 24|0);
   $726 = +HEAPF32[$725>>2];
   $q1 = $726;
   $727 = $p1;
   $728 = $q1;
   $729 = $727 * $728;
   $730 = $Z11;
   $731 = $730 + $729;
   $Z11 = $731;
   $732 = $ell;
   $733 = ((($732)) + 28|0);
   $734 = +HEAPF32[$733>>2];
   $p1 = $734;
   $735 = $ex;
   $736 = ((($735)) + 28|0);
   $737 = +HEAPF32[$736>>2];
   $q1 = $737;
   $738 = $p1;
   $739 = $q1;
   $740 = $738 * $739;
   $741 = $Z11;
   $742 = $741 + $740;
   $Z11 = $742;
   $743 = $ell;
   $744 = ((($743)) + 32|0);
   $745 = +HEAPF32[$744>>2];
   $p1 = $745;
   $746 = $ex;
   $747 = ((($746)) + 32|0);
   $748 = +HEAPF32[$747>>2];
   $q1 = $748;
   $749 = $p1;
   $750 = $q1;
   $751 = $749 * $750;
   $752 = $Z11;
   $753 = $752 + $751;
   $Z11 = $753;
   $754 = $ell;
   $755 = ((($754)) + 36|0);
   $756 = +HEAPF32[$755>>2];
   $p1 = $756;
   $757 = $ex;
   $758 = ((($757)) + 36|0);
   $759 = +HEAPF32[$758>>2];
   $q1 = $759;
   $760 = $p1;
   $761 = $q1;
   $762 = $760 * $761;
   $763 = $Z11;
   $764 = $763 + $762;
   $Z11 = $764;
   $765 = $ell;
   $766 = ((($765)) + 40|0);
   $767 = +HEAPF32[$766>>2];
   $p1 = $767;
   $768 = $ex;
   $769 = ((($768)) + 40|0);
   $770 = +HEAPF32[$769>>2];
   $q1 = $770;
   $771 = $p1;
   $772 = $q1;
   $773 = $771 * $772;
   $774 = $Z11;
   $775 = $774 + $773;
   $Z11 = $775;
   $776 = $ell;
   $777 = ((($776)) + 44|0);
   $778 = +HEAPF32[$777>>2];
   $p1 = $778;
   $779 = $ex;
   $780 = ((($779)) + 44|0);
   $781 = +HEAPF32[$780>>2];
   $q1 = $781;
   $782 = $p1;
   $783 = $q1;
   $784 = $782 * $783;
   $785 = $Z11;
   $786 = $785 + $784;
   $Z11 = $786;
   $787 = $ell;
   $788 = ((($787)) + 48|0);
   $ell = $788;
   $789 = $ex;
   $790 = ((($789)) + 48|0);
   $ex = $790;
   $791 = $j;
   $792 = (($791) - 12)|0;
   $j = $792;
  }
  $793 = $j;
  $794 = (($793) + 12)|0;
  $j = $794;
  while(1) {
   $795 = $j;
   $796 = ($795|0)>(0);
   if (!($796)) {
    break;
   }
   $797 = $ell;
   $798 = +HEAPF32[$797>>2];
   $p1 = $798;
   $799 = $ex;
   $800 = +HEAPF32[$799>>2];
   $q1 = $800;
   $801 = $p1;
   $802 = $q1;
   $803 = $801 * $802;
   $804 = $Z11;
   $805 = $804 + $803;
   $Z11 = $805;
   $806 = $ell;
   $807 = ((($806)) + 4|0);
   $ell = $807;
   $808 = $ex;
   $809 = ((($808)) + 4|0);
   $ex = $809;
   $810 = $j;
   $811 = (($810) + -1)|0;
   $j = $811;
  }
  $812 = $ex;
  $813 = +HEAPF32[$812>>2];
  $814 = $Z11;
  $815 = $813 - $814;
  $Z11 = $815;
  $816 = $Z11;
  $817 = $ex;
  HEAPF32[$817>>2] = $816;
  $818 = $i;
  $819 = (($818) + 1)|0;
  $i = $819;
 }
 STACKTOP = sp;return;
}
function _dSolveL1T($L,$B,$n,$lskip1) {
 $L = $L|0;
 $B = $B|0;
 $n = $n|0;
 $lskip1 = $lskip1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0;
 var $369 = 0.0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0.0;
 var $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0.0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $Z11 = 0.0, $Z21 = 0.0, $Z31 = 0.0, $Z41 = 0.0, $ell = 0, $ex = 0, $i = 0, $j = 0, $lskip2 = 0, $lskip3 = 0, $m11 = 0.0;
 var $m21 = 0.0, $m31 = 0.0, $m41 = 0.0, $p1 = 0.0, $p2 = 0.0, $p3 = 0.0, $p4 = 0.0, $q1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $L;
 $1 = $B;
 $2 = $n;
 $3 = $lskip1;
 $4 = $0;
 $5 = $2;
 $6 = (($5) - 1)|0;
 $7 = $3;
 $8 = (($7) + 1)|0;
 $9 = Math_imul($6, $8)|0;
 $10 = (($4) + ($9<<2)|0);
 $0 = $10;
 $11 = $1;
 $12 = $2;
 $13 = (($11) + ($12<<2)|0);
 $14 = ((($13)) + -4|0);
 $1 = $14;
 $15 = $3;
 $16 = (0 - ($15))|0;
 $3 = $16;
 $17 = $3;
 $18 = $17<<1;
 $lskip2 = $18;
 $19 = $3;
 $20 = ($19*3)|0;
 $lskip3 = $20;
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = $2;
  $23 = (($22) - 4)|0;
  $24 = ($21|0)<=($23|0);
  if (!($24)) {
   break;
  }
  $Z11 = 0.0;
  $Z21 = 0.0;
  $Z31 = 0.0;
  $Z41 = 0.0;
  $25 = $0;
  $26 = $i;
  $27 = (0 - ($26))|0;
  $28 = (($25) + ($27<<2)|0);
  $ell = $28;
  $29 = $1;
  $ex = $29;
  $30 = $i;
  $31 = (($30) - 4)|0;
  $j = $31;
  while(1) {
   $32 = $j;
   $33 = ($32|0)>=(0);
   if (!($33)) {
    break;
   }
   $34 = $ell;
   $35 = +HEAPF32[$34>>2];
   $p1 = $35;
   $36 = $ex;
   $37 = +HEAPF32[$36>>2];
   $q1 = $37;
   $38 = $ell;
   $39 = ((($38)) + -4|0);
   $40 = +HEAPF32[$39>>2];
   $p2 = $40;
   $41 = $ell;
   $42 = ((($41)) + -8|0);
   $43 = +HEAPF32[$42>>2];
   $p3 = $43;
   $44 = $ell;
   $45 = ((($44)) + -12|0);
   $46 = +HEAPF32[$45>>2];
   $p4 = $46;
   $47 = $p1;
   $48 = $q1;
   $49 = $47 * $48;
   $m11 = $49;
   $50 = $p2;
   $51 = $q1;
   $52 = $50 * $51;
   $m21 = $52;
   $53 = $p3;
   $54 = $q1;
   $55 = $53 * $54;
   $m31 = $55;
   $56 = $p4;
   $57 = $q1;
   $58 = $56 * $57;
   $m41 = $58;
   $59 = $3;
   $60 = $ell;
   $61 = (($60) + ($59<<2)|0);
   $ell = $61;
   $62 = $m11;
   $63 = $Z11;
   $64 = $63 + $62;
   $Z11 = $64;
   $65 = $m21;
   $66 = $Z21;
   $67 = $66 + $65;
   $Z21 = $67;
   $68 = $m31;
   $69 = $Z31;
   $70 = $69 + $68;
   $Z31 = $70;
   $71 = $m41;
   $72 = $Z41;
   $73 = $72 + $71;
   $Z41 = $73;
   $74 = $ell;
   $75 = +HEAPF32[$74>>2];
   $p1 = $75;
   $76 = $ex;
   $77 = ((($76)) + -4|0);
   $78 = +HEAPF32[$77>>2];
   $q1 = $78;
   $79 = $ell;
   $80 = ((($79)) + -4|0);
   $81 = +HEAPF32[$80>>2];
   $p2 = $81;
   $82 = $ell;
   $83 = ((($82)) + -8|0);
   $84 = +HEAPF32[$83>>2];
   $p3 = $84;
   $85 = $ell;
   $86 = ((($85)) + -12|0);
   $87 = +HEAPF32[$86>>2];
   $p4 = $87;
   $88 = $p1;
   $89 = $q1;
   $90 = $88 * $89;
   $m11 = $90;
   $91 = $p2;
   $92 = $q1;
   $93 = $91 * $92;
   $m21 = $93;
   $94 = $p3;
   $95 = $q1;
   $96 = $94 * $95;
   $m31 = $96;
   $97 = $p4;
   $98 = $q1;
   $99 = $97 * $98;
   $m41 = $99;
   $100 = $3;
   $101 = $ell;
   $102 = (($101) + ($100<<2)|0);
   $ell = $102;
   $103 = $m11;
   $104 = $Z11;
   $105 = $104 + $103;
   $Z11 = $105;
   $106 = $m21;
   $107 = $Z21;
   $108 = $107 + $106;
   $Z21 = $108;
   $109 = $m31;
   $110 = $Z31;
   $111 = $110 + $109;
   $Z31 = $111;
   $112 = $m41;
   $113 = $Z41;
   $114 = $113 + $112;
   $Z41 = $114;
   $115 = $ell;
   $116 = +HEAPF32[$115>>2];
   $p1 = $116;
   $117 = $ex;
   $118 = ((($117)) + -8|0);
   $119 = +HEAPF32[$118>>2];
   $q1 = $119;
   $120 = $ell;
   $121 = ((($120)) + -4|0);
   $122 = +HEAPF32[$121>>2];
   $p2 = $122;
   $123 = $ell;
   $124 = ((($123)) + -8|0);
   $125 = +HEAPF32[$124>>2];
   $p3 = $125;
   $126 = $ell;
   $127 = ((($126)) + -12|0);
   $128 = +HEAPF32[$127>>2];
   $p4 = $128;
   $129 = $p1;
   $130 = $q1;
   $131 = $129 * $130;
   $m11 = $131;
   $132 = $p2;
   $133 = $q1;
   $134 = $132 * $133;
   $m21 = $134;
   $135 = $p3;
   $136 = $q1;
   $137 = $135 * $136;
   $m31 = $137;
   $138 = $p4;
   $139 = $q1;
   $140 = $138 * $139;
   $m41 = $140;
   $141 = $3;
   $142 = $ell;
   $143 = (($142) + ($141<<2)|0);
   $ell = $143;
   $144 = $m11;
   $145 = $Z11;
   $146 = $145 + $144;
   $Z11 = $146;
   $147 = $m21;
   $148 = $Z21;
   $149 = $148 + $147;
   $Z21 = $149;
   $150 = $m31;
   $151 = $Z31;
   $152 = $151 + $150;
   $Z31 = $152;
   $153 = $m41;
   $154 = $Z41;
   $155 = $154 + $153;
   $Z41 = $155;
   $156 = $ell;
   $157 = +HEAPF32[$156>>2];
   $p1 = $157;
   $158 = $ex;
   $159 = ((($158)) + -12|0);
   $160 = +HEAPF32[$159>>2];
   $q1 = $160;
   $161 = $ell;
   $162 = ((($161)) + -4|0);
   $163 = +HEAPF32[$162>>2];
   $p2 = $163;
   $164 = $ell;
   $165 = ((($164)) + -8|0);
   $166 = +HEAPF32[$165>>2];
   $p3 = $166;
   $167 = $ell;
   $168 = ((($167)) + -12|0);
   $169 = +HEAPF32[$168>>2];
   $p4 = $169;
   $170 = $p1;
   $171 = $q1;
   $172 = $170 * $171;
   $m11 = $172;
   $173 = $p2;
   $174 = $q1;
   $175 = $173 * $174;
   $m21 = $175;
   $176 = $p3;
   $177 = $q1;
   $178 = $176 * $177;
   $m31 = $178;
   $179 = $p4;
   $180 = $q1;
   $181 = $179 * $180;
   $m41 = $181;
   $182 = $3;
   $183 = $ell;
   $184 = (($183) + ($182<<2)|0);
   $ell = $184;
   $185 = $ex;
   $186 = ((($185)) + -16|0);
   $ex = $186;
   $187 = $m11;
   $188 = $Z11;
   $189 = $188 + $187;
   $Z11 = $189;
   $190 = $m21;
   $191 = $Z21;
   $192 = $191 + $190;
   $Z21 = $192;
   $193 = $m31;
   $194 = $Z31;
   $195 = $194 + $193;
   $Z31 = $195;
   $196 = $m41;
   $197 = $Z41;
   $198 = $197 + $196;
   $Z41 = $198;
   $199 = $j;
   $200 = (($199) - 4)|0;
   $j = $200;
  }
  $201 = $j;
  $202 = (($201) + 4)|0;
  $j = $202;
  while(1) {
   $203 = $j;
   $204 = ($203|0)>(0);
   if (!($204)) {
    break;
   }
   $205 = $ell;
   $206 = +HEAPF32[$205>>2];
   $p1 = $206;
   $207 = $ex;
   $208 = +HEAPF32[$207>>2];
   $q1 = $208;
   $209 = $ell;
   $210 = ((($209)) + -4|0);
   $211 = +HEAPF32[$210>>2];
   $p2 = $211;
   $212 = $ell;
   $213 = ((($212)) + -8|0);
   $214 = +HEAPF32[$213>>2];
   $p3 = $214;
   $215 = $ell;
   $216 = ((($215)) + -12|0);
   $217 = +HEAPF32[$216>>2];
   $p4 = $217;
   $218 = $p1;
   $219 = $q1;
   $220 = $218 * $219;
   $m11 = $220;
   $221 = $p2;
   $222 = $q1;
   $223 = $221 * $222;
   $m21 = $223;
   $224 = $p3;
   $225 = $q1;
   $226 = $224 * $225;
   $m31 = $226;
   $227 = $p4;
   $228 = $q1;
   $229 = $227 * $228;
   $m41 = $229;
   $230 = $3;
   $231 = $ell;
   $232 = (($231) + ($230<<2)|0);
   $ell = $232;
   $233 = $ex;
   $234 = ((($233)) + -4|0);
   $ex = $234;
   $235 = $m11;
   $236 = $Z11;
   $237 = $236 + $235;
   $Z11 = $237;
   $238 = $m21;
   $239 = $Z21;
   $240 = $239 + $238;
   $Z21 = $240;
   $241 = $m31;
   $242 = $Z31;
   $243 = $242 + $241;
   $Z31 = $243;
   $244 = $m41;
   $245 = $Z41;
   $246 = $245 + $244;
   $Z41 = $246;
   $247 = $j;
   $248 = (($247) + -1)|0;
   $j = $248;
  }
  $249 = $ex;
  $250 = +HEAPF32[$249>>2];
  $251 = $Z11;
  $252 = $250 - $251;
  $Z11 = $252;
  $253 = $Z11;
  $254 = $ex;
  HEAPF32[$254>>2] = $253;
  $255 = $ell;
  $256 = ((($255)) + -4|0);
  $257 = +HEAPF32[$256>>2];
  $p1 = $257;
  $258 = $ex;
  $259 = ((($258)) + -4|0);
  $260 = +HEAPF32[$259>>2];
  $261 = $Z21;
  $262 = $260 - $261;
  $263 = $p1;
  $264 = $Z11;
  $265 = $263 * $264;
  $266 = $262 - $265;
  $Z21 = $266;
  $267 = $Z21;
  $268 = $ex;
  $269 = ((($268)) + -4|0);
  HEAPF32[$269>>2] = $267;
  $270 = $ell;
  $271 = ((($270)) + -8|0);
  $272 = +HEAPF32[$271>>2];
  $p1 = $272;
  $273 = $3;
  $274 = (-2 + ($273))|0;
  $275 = $ell;
  $276 = (($275) + ($274<<2)|0);
  $277 = +HEAPF32[$276>>2];
  $p2 = $277;
  $278 = $ex;
  $279 = ((($278)) + -8|0);
  $280 = +HEAPF32[$279>>2];
  $281 = $Z31;
  $282 = $280 - $281;
  $283 = $p1;
  $284 = $Z11;
  $285 = $283 * $284;
  $286 = $282 - $285;
  $287 = $p2;
  $288 = $Z21;
  $289 = $287 * $288;
  $290 = $286 - $289;
  $Z31 = $290;
  $291 = $Z31;
  $292 = $ex;
  $293 = ((($292)) + -8|0);
  HEAPF32[$293>>2] = $291;
  $294 = $ell;
  $295 = ((($294)) + -12|0);
  $296 = +HEAPF32[$295>>2];
  $p1 = $296;
  $297 = $3;
  $298 = (-3 + ($297))|0;
  $299 = $ell;
  $300 = (($299) + ($298<<2)|0);
  $301 = +HEAPF32[$300>>2];
  $p2 = $301;
  $302 = $lskip2;
  $303 = (-3 + ($302))|0;
  $304 = $ell;
  $305 = (($304) + ($303<<2)|0);
  $306 = +HEAPF32[$305>>2];
  $p3 = $306;
  $307 = $ex;
  $308 = ((($307)) + -12|0);
  $309 = +HEAPF32[$308>>2];
  $310 = $Z41;
  $311 = $309 - $310;
  $312 = $p1;
  $313 = $Z11;
  $314 = $312 * $313;
  $315 = $311 - $314;
  $316 = $p2;
  $317 = $Z21;
  $318 = $316 * $317;
  $319 = $315 - $318;
  $320 = $p3;
  $321 = $Z31;
  $322 = $320 * $321;
  $323 = $319 - $322;
  $Z41 = $323;
  $324 = $Z41;
  $325 = $ex;
  $326 = ((($325)) + -12|0);
  HEAPF32[$326>>2] = $324;
  $327 = $i;
  $328 = (($327) + 4)|0;
  $i = $328;
 }
 while(1) {
  $329 = $i;
  $330 = $2;
  $331 = ($329|0)<($330|0);
  if (!($331)) {
   break;
  }
  $Z11 = 0.0;
  $332 = $0;
  $333 = $i;
  $334 = (0 - ($333))|0;
  $335 = (($332) + ($334<<2)|0);
  $ell = $335;
  $336 = $1;
  $ex = $336;
  $337 = $i;
  $338 = (($337) - 4)|0;
  $j = $338;
  while(1) {
   $339 = $j;
   $340 = ($339|0)>=(0);
   if (!($340)) {
    break;
   }
   $341 = $ell;
   $342 = +HEAPF32[$341>>2];
   $p1 = $342;
   $343 = $ex;
   $344 = +HEAPF32[$343>>2];
   $q1 = $344;
   $345 = $p1;
   $346 = $q1;
   $347 = $345 * $346;
   $m11 = $347;
   $348 = $3;
   $349 = $ell;
   $350 = (($349) + ($348<<2)|0);
   $ell = $350;
   $351 = $m11;
   $352 = $Z11;
   $353 = $352 + $351;
   $Z11 = $353;
   $354 = $ell;
   $355 = +HEAPF32[$354>>2];
   $p1 = $355;
   $356 = $ex;
   $357 = ((($356)) + -4|0);
   $358 = +HEAPF32[$357>>2];
   $q1 = $358;
   $359 = $p1;
   $360 = $q1;
   $361 = $359 * $360;
   $m11 = $361;
   $362 = $3;
   $363 = $ell;
   $364 = (($363) + ($362<<2)|0);
   $ell = $364;
   $365 = $m11;
   $366 = $Z11;
   $367 = $366 + $365;
   $Z11 = $367;
   $368 = $ell;
   $369 = +HEAPF32[$368>>2];
   $p1 = $369;
   $370 = $ex;
   $371 = ((($370)) + -8|0);
   $372 = +HEAPF32[$371>>2];
   $q1 = $372;
   $373 = $p1;
   $374 = $q1;
   $375 = $373 * $374;
   $m11 = $375;
   $376 = $3;
   $377 = $ell;
   $378 = (($377) + ($376<<2)|0);
   $ell = $378;
   $379 = $m11;
   $380 = $Z11;
   $381 = $380 + $379;
   $Z11 = $381;
   $382 = $ell;
   $383 = +HEAPF32[$382>>2];
   $p1 = $383;
   $384 = $ex;
   $385 = ((($384)) + -12|0);
   $386 = +HEAPF32[$385>>2];
   $q1 = $386;
   $387 = $p1;
   $388 = $q1;
   $389 = $387 * $388;
   $m11 = $389;
   $390 = $3;
   $391 = $ell;
   $392 = (($391) + ($390<<2)|0);
   $ell = $392;
   $393 = $ex;
   $394 = ((($393)) + -16|0);
   $ex = $394;
   $395 = $m11;
   $396 = $Z11;
   $397 = $396 + $395;
   $Z11 = $397;
   $398 = $j;
   $399 = (($398) - 4)|0;
   $j = $399;
  }
  $400 = $j;
  $401 = (($400) + 4)|0;
  $j = $401;
  while(1) {
   $402 = $j;
   $403 = ($402|0)>(0);
   if (!($403)) {
    break;
   }
   $404 = $ell;
   $405 = +HEAPF32[$404>>2];
   $p1 = $405;
   $406 = $ex;
   $407 = +HEAPF32[$406>>2];
   $q1 = $407;
   $408 = $p1;
   $409 = $q1;
   $410 = $408 * $409;
   $m11 = $410;
   $411 = $3;
   $412 = $ell;
   $413 = (($412) + ($411<<2)|0);
   $ell = $413;
   $414 = $ex;
   $415 = ((($414)) + -4|0);
   $ex = $415;
   $416 = $m11;
   $417 = $Z11;
   $418 = $417 + $416;
   $Z11 = $418;
   $419 = $j;
   $420 = (($419) + -1)|0;
   $j = $420;
  }
  $421 = $ex;
  $422 = +HEAPF32[$421>>2];
  $423 = $Z11;
  $424 = $422 - $423;
  $Z11 = $424;
  $425 = $Z11;
  $426 = $ex;
  HEAPF32[$426>>2] = $425;
  $427 = $i;
  $428 = (($427) + 1)|0;
  $i = $428;
 }
 STACKTOP = sp;return;
}
function _dDot($a,$b,$n) {
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $m0 = 0.0, $m1 = 0.0, $p0 = 0.0, $p1 = 0.0, $q0 = 0.0, $q1 = 0.0, $sum = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $n;
 $sum = 0.0;
 $3 = $2;
 $4 = (($3) - 2)|0;
 $2 = $4;
 while(1) {
  $5 = $2;
  $6 = ($5|0)>=(0);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = +HEAPF32[$7>>2];
  $p0 = $8;
  $9 = $1;
  $10 = +HEAPF32[$9>>2];
  $q0 = $10;
  $11 = $p0;
  $12 = $q0;
  $13 = $11 * $12;
  $m0 = $13;
  $14 = $0;
  $15 = ((($14)) + 4|0);
  $16 = +HEAPF32[$15>>2];
  $p1 = $16;
  $17 = $1;
  $18 = ((($17)) + 4|0);
  $19 = +HEAPF32[$18>>2];
  $q1 = $19;
  $20 = $p1;
  $21 = $q1;
  $22 = $20 * $21;
  $m1 = $22;
  $23 = $m0;
  $24 = $sum;
  $25 = $24 + $23;
  $sum = $25;
  $26 = $m1;
  $27 = $sum;
  $28 = $27 + $26;
  $sum = $28;
  $29 = $0;
  $30 = ((($29)) + 8|0);
  $0 = $30;
  $31 = $1;
  $32 = ((($31)) + 8|0);
  $1 = $32;
  $33 = $2;
  $34 = (($33) - 2)|0;
  $2 = $34;
 }
 $35 = $2;
 $36 = (($35) + 2)|0;
 $2 = $36;
 while(1) {
  $37 = $2;
  $38 = ($37|0)>(0);
  if (!($38)) {
   break;
  }
  $39 = $0;
  $40 = +HEAPF32[$39>>2];
  $41 = $1;
  $42 = +HEAPF32[$41>>2];
  $43 = $40 * $42;
  $44 = $sum;
  $45 = $44 + $43;
  $sum = $45;
  $46 = $0;
  $47 = ((($46)) + 4|0);
  $0 = $47;
  $48 = $1;
  $49 = ((($48)) + 4|0);
  $1 = $49;
  $50 = $2;
  $51 = (($50) + -1)|0;
  $2 = $51;
 }
 $52 = $sum;
 STACKTOP = sp;return (+$52);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[712>>2]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((660|0),(90|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[656>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(7902,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(91,(7951|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(91,(7991|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(92);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(93)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[143]|0;HEAP32[143] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,80,96,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 63]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 63]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 L1: do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 63]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 63]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   switch ($27|0) {
   case 0:  {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 63]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 63]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 63]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 63]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,80,128,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[664>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(8230,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[64>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 63](64,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[664>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 127]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(8144,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[664>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(8189,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(8268,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((656|0),(94|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(8041,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[656>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(8091,$vararg_buffer);
  // unreachable;
 }
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (8289 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 8377;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 8377;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 8377;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[668>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 720;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[716>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[716>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((696)|0));
   $$012 = HEAP32[(692)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((696)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $7 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $7 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $8 = $7;
   $9 = $6;
   $10 = (($8) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 63]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 63]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 63]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 63]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[668>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((95|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 56;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 63]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 63]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $65 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((11221 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 11701;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 11701;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 11701;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 11701 : (11703);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (11702);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 11701;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 11701;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 11711;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 11718;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (11719) : (11724);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (11721);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (11685 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$480 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$480 = $$pre179$i;
      }
      $481 = ($480|0)<(0);
      $$31$i = $481 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $490 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $491 = ($490|0)>(29);
        $492 = $491 ? 29 : $490;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $490 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(11753,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(11753,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 11737 : 11741;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 11745 : 11749;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 11701;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 11701;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (11685 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 11701;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (11701 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 11701;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $792 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $793 = ($792|0)<(10);
       if ($793) {
        $i$398 = $792;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _cleanup526($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[948>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (988 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (988 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[948>>2] = $22;
     } else {
      $23 = HEAP32[(964)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(956)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (988 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (988 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[948>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(964)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(956)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(968)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (988 + ($92<<2)|0);
      $94 = HEAP32[948>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[948>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (988 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (988 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(964)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(956)>>2] = $81;
     HEAP32[(968)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(952)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (1252 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(964)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (1252 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(952)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(952)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(964)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(964)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(964)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(956)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(968)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (988 + ($229<<2)|0);
       $231 = HEAP32[948>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[948>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (988 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (988 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(964)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(956)>>2] = $rsize$0$i$lcssa;
      HEAP32[(968)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(952)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (1252 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (1252 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(956)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(964)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (1252 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(952)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(952)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(964)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(964)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(964)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (988 + ($424<<2)|0);
          $426 = HEAP32[948>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[948>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (988 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (988 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(964)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (1252 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(952)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(952)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(964)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(964)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(956)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(968)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(968)>>2] = $514;
   HEAP32[(956)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(956)>>2] = 0;
   HEAP32[(968)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(960)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(960)>>2] = $528;
  $529 = HEAP32[(972)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(972)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[1420>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(1428)>>2] = $538;
    HEAP32[(1424)>>2] = $538;
    HEAP32[(1432)>>2] = -1;
    HEAP32[(1436)>>2] = -1;
    HEAP32[(1440)>>2] = 0;
    HEAP32[(1392)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[1420>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(1428)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(1388)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(1380)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(1392)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(972)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (1396);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(960)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(1424)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(1380)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(1388)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(1428)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(1392)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(1392)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(1380)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(1380)>>2] = $632;
  $633 = HEAP32[(1384)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(1384)>>2] = $632;
  }
  $635 = HEAP32[(972)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(964)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(964)>>2] = $tbase$255$i;
    }
    HEAP32[(1396)>>2] = $tbase$255$i;
    HEAP32[(1400)>>2] = $tsize$254$i;
    HEAP32[(1408)>>2] = 0;
    $640 = HEAP32[1420>>2]|0;
    HEAP32[(984)>>2] = $640;
    HEAP32[(980)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (988 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (988 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (988 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(972)>>2] = $654;
    HEAP32[(960)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(1436)>>2]|0;
    HEAP32[(976)>>2] = $659;
   } else {
    $sp$084$i = (1396);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(960)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(972)>>2] = $684;
       HEAP32[(960)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(1436)>>2]|0;
       HEAP32[(976)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(964)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(964)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (1396);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (1396);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(960)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(960)>>2] = $730;
        HEAP32[(972)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(968)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(956)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(956)>>2] = $736;
         HEAP32[(968)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (988 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[948>>2]|0;
            $763 = $762 & $761;
            HEAP32[948>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (1252 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(952)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(952)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(964)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(964)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(964)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (988 + ($840<<2)|0);
         $842 = HEAP32[948>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[948>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (988 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (988 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(964)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (1252 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(952)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(952)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(964)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(964)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (1396);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(972)>>2] = $953;
    HEAP32[(960)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(1436)>>2]|0;
    HEAP32[(976)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(1396)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(1396)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(1396)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(1396)+12>>2]|0;
    HEAP32[(1396)>>2] = $tbase$255$i;
    HEAP32[(1400)>>2] = $tsize$254$i;
    HEAP32[(1408)>>2] = 0;
    HEAP32[(1404)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (988 + ($977<<2)|0);
      $979 = HEAP32[948>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[948>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (988 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (988 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(964)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (1252 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(952)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(952)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(964)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(964)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(960)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(960)>>2] = $1062;
   $1063 = HEAP32[(972)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(972)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(964)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(968)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(956)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (988 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[948>>2]|0;
     $36 = $35 & $34;
     HEAP32[948>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (1252 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(952)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(952)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(964)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(964)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(964)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(972)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(960)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(960)>>2] = $120;
   HEAP32[(972)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(968)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(968)>>2] = 0;
   HEAP32[(956)>>2] = 0;
   return;
  }
  $125 = HEAP32[(968)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(956)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(956)>>2] = $128;
   HEAP32[(968)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (988 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(964)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[948>>2]|0;
     $152 = $151 & $150;
     HEAP32[948>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(964)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(964)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(964)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (1252 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(952)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(952)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(964)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(964)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(964)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(968)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(956)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (988 + ($233<<2)|0);
  $235 = HEAP32[948>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[948>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (988 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (988 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(964)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (1252 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(952)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(952)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(964)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(964)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(980)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(980)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (1404);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(980)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(964)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(1428)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(972)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(960)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(972)>>2] = $36;
  HEAP32[(960)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(968)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(956)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(956)>>2] = $storemerge21;
  HEAP32[(968)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (988 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[948>>2]|0;
    $88 = $87 & $86;
    HEAP32[948>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (1252 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(952)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(952)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(964)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(964)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(964)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(964)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(968)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(956)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (988 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[948>>2]|0;
     $32 = $31 & $30;
     HEAP32[948>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (1252 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(952)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(952)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(964)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(964)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(964)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(964)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(972)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(960)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(960)>>2] = $115;
   HEAP32[(972)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(968)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(968)>>2] = 0;
   HEAP32[(956)>>2] = 0;
   return;
  }
  $120 = HEAP32[(968)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(956)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(956)>>2] = $123;
   HEAP32[(968)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (988 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[948>>2]|0;
     $146 = $145 & $144;
     HEAP32[948>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (1252 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(952)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(952)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(964)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(964)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(964)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(968)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(956)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (988 + ($224<<2)|0);
  $226 = HEAP32[948>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[948>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (988 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (988 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(964)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (1252 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(952)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(952)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(964)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(964)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(1,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(2,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(3,a1|0,a2|0,a3|0)|0;
}



function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function jsCall_viiiii_0(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_1(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_2(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_3(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&127]()|0;
}


function jsCall_i_0() {
  
  return jsCall_i(0)|0;
}



function jsCall_i_1() {
  
  return jsCall_i(1)|0;
}



function jsCall_i_2() {
  
  return jsCall_i(2)|0;
}



function jsCall_i_3() {
  
  return jsCall_i(3)|0;
}



function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function jsCall_vi_0(a1) {
  a1=a1|0;
  jsCall_vi(0,a1|0);
}



function jsCall_vi_1(a1) {
  a1=a1|0;
  jsCall_vi(1,a1|0);
}



function jsCall_vi_2(a1) {
  a1=a1|0;
  jsCall_vi(2,a1|0);
}



function jsCall_vi_3(a1) {
  a1=a1|0;
  jsCall_vi(3,a1|0);
}



function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function jsCall_vii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(0,a1|0,a2|0);
}



function jsCall_vii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(1,a1|0,a2|0);
}



function jsCall_vii_2(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(2,a1|0,a2|0);
}



function jsCall_vii_3(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(3,a1|0,a2|0);
}



function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function jsCall_ii_1(a1) {
  a1=a1|0;
  return jsCall_ii(1,a1|0)|0;
}



function jsCall_ii_2(a1) {
  a1=a1|0;
  return jsCall_ii(2,a1|0)|0;
}



function jsCall_ii_3(a1) {
  a1=a1|0;
  return jsCall_ii(3,a1|0)|0;
}



function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&63](a1|0,a2|0,a3|0);
}


function jsCall_viii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(0,a1|0,a2|0,a3|0);
}



function jsCall_viii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(1,a1|0,a2|0,a3|0);
}



function jsCall_viii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(2,a1|0,a2|0,a3|0);
}



function jsCall_viii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(3,a1|0,a2|0,a3|0);
}



function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function jsCall_v_0() {
  
  jsCall_v(0);
}



function jsCall_v_1() {
  
  jsCall_v(1);
}



function jsCall_v_2() {
  
  jsCall_v(2);
}



function jsCall_v_3() {
  
  jsCall_v(3);
}



function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function jsCall_iiiiii_0(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_1(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_2(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_3(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}


function jsCall_viiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(0,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(1,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(2,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(3,a1|0,a2|0,a3|0,a4|0);
}


function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2() {
 ; nullFunc_i(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function b7() {
 ; nullFunc_v(7);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b8(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(8);
}
function b9(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(9);return 0;
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,jsCall_iiii_0,b0,jsCall_iiii_1,b0,jsCall_iiii_2,b0,jsCall_iiii_3,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_write,___stdio_seek,___stdout_write
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,jsCall_viiiii_0,b1,jsCall_viiiii_1,b1,jsCall_viiiii_2,b1,jsCall_viiiii_3,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,jsCall_i_0,b2,jsCall_i_1,b2,jsCall_i_2,b2,jsCall_i_3,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,___cxa_get_globals_fast,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,jsCall_vi_0,b3,jsCall_vi_1,b3,jsCall_vi_2,b3,jsCall_vi_3,b3,__ZL8ballInitP11dxJointBall,b3,b3,__ZL9hingeInitP12dxJointHinge,b3,b3,__ZL10sliderInitP13dxJointSlider,b3,b3,__ZL11contactInitP14dxJointContact,b3,b3,__ZL10hinge2InitP13dxJointHinge2,b3,b3,__ZL10amotorInitP13dxJointAMotor,b3,b3,__ZL9fixedInitP12dxJointFixed
,b3,b3,b3,b3,__ZN13dxSimpleSpace7destroyEv,b3,b3,b3,__ZN11dxHashSpace7destroyEv,b3,b3,b3,b3,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,b3
,__ZN6dxBodyC2Ev,b3,__ZN12dxJointGroupC2Ev,__ZN12dxJointGroupD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZL14dGeomGroupDtorP6dxGeom,b3,b3,__ZL18dGeomTransformDtorP6dxGeom,__ZN6dArrayIP11dxGeomClassEC2Ev,b3,__ZN6dArrayI14dColliderEntryEC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,_cleanup526,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,jsCall_vii_0,b4,jsCall_vii_1,b4,jsCall_vii_2,b4,jsCall_vii_3,b4,b4,__ZL12ballGetInfo1P11dxJointBallPN7dxJoint5Info1E,__ZL12ballGetInfo2P11dxJointBallPN7dxJoint5Info2E,b4,__ZL13hingeGetInfo1P12dxJointHingePN7dxJoint5Info1E,__ZL13hingeGetInfo2P12dxJointHingePN7dxJoint5Info2E,b4,__ZL14sliderGetInfo1P13dxJointSliderPN7dxJoint5Info1E,__ZL14sliderGetInfo2P13dxJointSliderPN7dxJoint5Info2E,b4,__ZL15contactGetInfo1P14dxJointContactPN7dxJoint5Info1E,__ZL15contactGetInfo2P14dxJointContactPN7dxJoint5Info2E,b4,__ZL14hinge2GetInfo1P13dxJointHinge2PN7dxJoint5Info1E,__ZL14hinge2GetInfo2P13dxJointHinge2PN7dxJoint5Info2E,b4,__ZL14amotorGetInfo1P13dxJointAMotorPN7dxJoint5Info1E,__ZL14amotorGetInfo2P13dxJointAMotorPN7dxJoint5Info2E,b4
,__ZL13fixedGetInfo1P12dxJointFixedPN7dxJoint5Info1E,__ZL13fixedGetInfo2P12dxJointFixedPN7dxJoint5Info2E,__ZL12nullGetInfo1P11dxJointNullPN7dxJoint5Info1E,__ZL12nullGetInfo2P11dxJointNullPN7dxJoint5Info2E,b4,__ZN13dxSimpleSpace3addEP6dxGeom,__ZN13dxSimpleSpace6removeEP6dxGeom,b4,b4,__ZN11dxHashSpace3addEP6dxGeom,__ZN11dxHashSpace6removeEP6dxGeom,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,__ZN5dBasedlEPvj,b4,b4,b4,__ZL11dSphereAABBP6dxGeomPf,b4,__ZL8dBoxAABBP6dxGeomPf,b4,__ZL14dCCylinderAABBP6dxGeomPf,b4,__ZL10dPlaneAABBP6dxGeomPf,b4,__ZL14dGeomGroupAABBP6dxGeomPf,b4,b4,__ZL18dGeomTransformAABBP6dxGeomPf,b4,b4,__ZN10dArrayBasedlEPvj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,jsCall_ii_0,b5,jsCall_ii_1,b5,jsCall_ii_2,b5,jsCall_ii_3,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,___stdio_close,b5,b5,b5
,b5,b5,b5,b5,__ZL17dSphereColliderFni,b5,__ZL14dBoxColliderFni,b5,__ZL20dCCylinderColliderFni,b5,__Z16dPlaneColliderFni,b5,__ZL20dGeomGroupColliderFni,b5,b5,__ZL24dGeomTransformColliderFni,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_viii = [b6,b6,jsCall_viii_0,b6,jsCall_viii_1,b6,jsCall_viii_2,b6,jsCall_viii_3,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,__ZN13dxSimpleSpace7collideEPvPFvS0_P6dxGeomS2_E,b6,b6,b6,__ZN11dxHashSpace7collideEPvPFvS0_P6dxGeomS2_E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_v = [b7,b7,jsCall_v_0,b7,jsCall_v_1,b7,jsCall_v_2,b7,jsCall_v_3,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b7,___cxa_end_catch__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiiiii = [b8,b8,jsCall_viiiiii_0,b8,jsCall_viiiiii_1,b8,jsCall_viiiiii_2,b8,jsCall_viiiiii_3,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b8,b8,b8,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiiii = [b9,b9,jsCall_iiiiii_0,b9,jsCall_iiiiii_1,b9,jsCall_iiiiii_2,b9,jsCall_iiiiii_3,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__Z10dCollideSSPK6dxGeomS1_iP12dContactGeomi,__Z10dCollideSBPK6dxGeomS1_iP12dContactGeomi,__Z10dCollideSPPK6dxGeomS1_iP12dContactGeomi,__Z10dCollideBBPK6dxGeomS1_iP12dContactGeomi,__Z10dCollideBPPK6dxGeomS1_iP12dContactGeomi,__Z10dCollideCSPK6dxGeomS1_iP12dContactGeomi,__Z10dCollideCPPK6dxGeomS1_iP12dContactGeomi,__Z10dCollideCCPK6dxGeomS1_iP12dContactGeomi,__Z9dCollideGPK6dxGeomS1_iP12dContactGeomi
,__Z9dCollideTPK6dxGeomS1_iP12dContactGeomi,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiii = [b10,b10,jsCall_viiii_0,b10,jsCall_viiii_1,b10,jsCall_viiii_2,b10,jsCall_viiii_3,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b10,b10,b10,b10
,b10,b10,b10,b10,b10];

  return { _dJointSetFixed: _dJointSetFixed, _dRSetIdentity: _dRSetIdentity, _dBodyDestroy: _dBodyDestroy, _dRFrom2Axes: _dRFrom2Axes, _dCreateSphere: _dCreateSphere, _dAreConnected: _dAreConnected, _dMassSetCappedCylinder: _dMassSetCappedCylinder, _dJointCreateNull: _dJointCreateNull, _dMassTranslate: _dMassTranslate, _dBodyGetLinearVel: _dBodyGetLinearVel, _dJointGetAMotorAxis: _dJointGetAMotorAxis, _dJointGetHingeAxis: _dJointGetHingeAxis, _bitshift64Lshr: _bitshift64Lshr, _dBodyDisable: _dBodyDisable, _dWorldDestroy: _dWorldDestroy, _dGeomSphereGetRadius: _dGeomSphereGetRadius, _dJointGroupDestroy: _dJointGroupDestroy, _dHashSpaceSetLevels: _dHashSpaceSetLevels, _dBodyGetTorque: _dBodyGetTorque, _dJointGetHinge2Param: _dJointGetHinge2Param, _dGeomGroupGetNumGeoms: _dGeomGroupGetNumGeoms, _dSpaceDestroy: _dSpaceDestroy, _dWorldSetERP: _dWorldSetERP, _dJointGetBody: _dJointGetBody, _dJointGetSliderPositionRate: _dJointGetSliderPositionRate, _dJointCreateFixed: _dJointCreateFixed, _free: _free, _dJointSetAMotorAxis: _dJointSetAMotorAxis, _dBodyGetMass: _dBodyGetMass, ___cxa_can_catch: ___cxa_can_catch, _dGeomBoxGetLengths: _dGeomBoxGetLengths, _dCreatePlane: _dCreatePlane, _dQFromAxisAndAngle: _dQFromAxisAndAngle, _dGeomSetPosition: _dGeomSetPosition, _dJointGetAMotorAngle: _dJointGetAMotorAngle, _dJointSetHingeParam: _dJointSetHingeParam, _dBodyGetRotation: _dBodyGetRotation, _dCreateBox: _dCreateBox, _dBodySetQuaternion: _dBodySetQuaternion, _dBodyAddRelForceAtPos: _dBodyAddRelForceAtPos, _dMassSetBox: _dMassSetBox, _dWorldCreate: _dWorldCreate, _dBodyGetPosition: _dBodyGetPosition, _dJointGetHinge2Axis1: _dJointGetHinge2Axis1, _dJointSetHinge2Param: _dJointSetHinge2Param, _dSpaceAdd: _dSpaceAdd, _dQSetIdentity: _dQSetIdentity, _dBodySetRotation: _dBodySetRotation, _dGeomCCylinderSetParams: _dGeomCCylinderSetParams, _dJointGetBallAnchor: _dJointGetBallAnchor, _dJointGetHingeAngle: _dJointGetHingeAngle, _dGeomGetBody: _dGeomGetBody, _dBodyAddRelTorque: _dBodyAddRelTorque, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _dJointGetSliderAxis: _dJointGetSliderAxis, _i64Add: _i64Add, _dBodySetMass: _dBodySetMass, _dWorldSetCFM: _dWorldSetCFM, _dGeomGroupRemove: _dGeomGroupRemove, _dMassSetParameters: _dMassSetParameters, _dGeomDestroy: _dGeomDestroy, _dJointGetHingeParam: _dJointGetHingeParam, _dBodyGetAngularVel: _dBodyGetAngularVel, _dJointSetSliderAxis: _dJointSetSliderAxis, _dJointGetAMotorNumAxes: _dJointGetAMotorNumAxes, _dGeomTransformGetCleanup: _dGeomTransformGetCleanup, _dJointCreateHinge2: _dJointCreateHinge2, _dMassRotate: _dMassRotate, _dJointGetType: _dJointGetType, _dBodyIsEnabled: _dBodyIsEnabled, _dBodyAddRelForce: _dBodyAddRelForce, _dJointGetHinge2Angle2Rate: _dJointGetHinge2Angle2Rate, _dGeomTransformGetGeom: _dGeomTransformGetGeom, _dSpaceRemove: _dSpaceRemove, _dJointGetHinge2Anchor: _dJointGetHinge2Anchor, _dJointGetHingeAngleRate: _dJointGetHingeAngleRate, _dBodyGetRelPointVel: _dBodyGetRelPointVel, _dJointSetAMotorNumAxes: _dJointSetAMotorNumAxes, _dWorldGetGravity: _dWorldGetGravity, _dJointSetBallAnchor: _dJointSetBallAnchor, _dJointGroupCreate: _dJointGroupCreate, _dBodySetAngularVel: _dBodySetAngularVel, _dMassSetZero: _dMassSetZero, _dJointCreateContact: _dJointCreateContact, _dJointGetSliderParam: _dJointGetSliderParam, _dJointSetHinge2Anchor: _dJointSetHinge2Anchor, _dJointCreateSlider: _dJointCreateSlider, _memset: _memset, _dJointGetAMotorAxisRel: _dJointGetAMotorAxisRel, _memcpy: _memcpy, _dJointGetAMotorAngleRate: _dJointGetAMotorAngleRate, _dBodyAddForce: _dBodyAddForce, _i64Subtract: _i64Subtract, _dRFromAxisAndAngle: _dRFromAxisAndAngle, _dGeomTransformSetCleanup: _dGeomTransformSetCleanup, _dCollide: _dCollide, _dJointSetSliderParam: _dJointSetSliderParam, _dRFromEulerAngles: _dRFromEulerAngles, _dWorldGetERP: _dWorldGetERP, _dSimpleSpaceCreate: _dSimpleSpaceCreate, _dBodySetPosition: _dBodySetPosition, _dJointCreateHinge: _dJointCreateHinge, _dGeomGetRotation: _dGeomGetRotation, _dJointGetHinge2Angle1Rate: _dJointGetHinge2Angle1Rate, _dGeomGroupGetGeom: _dGeomGroupGetGeom, _dMassAdjust: _dMassAdjust, _dBodySetLinearVel: _dBodySetLinearVel, _dGeomBoxSetLengths: _dGeomBoxSetLengths, _dJointSetHinge2Axis1: _dJointSetHinge2Axis1, _dJointSetHinge2Axis2: _dJointSetHinge2Axis2, _dBodyAddTorque: _dBodyAddTorque, _dBodyCreate: _dBodyCreate, _dMassSetSphere: _dMassSetSphere, _malloc: _malloc, _dJointSetAMotorAngle: _dJointSetAMotorAngle, _dGeomSetRotation: _dGeomSetRotation, _dCreateGeomTransform: _dCreateGeomTransform, _dSpaceCollide: _dSpaceCollide, _dJointGetAMotorMode: _dJointGetAMotorMode, _dJointDestroy: _dJointDestroy, _dBodyEnable: _dBodyEnable, _dGeomGroupAdd: _dGeomGroupAdd, _dBodyGetRelPointPos: _dBodyGetRelPointPos, _dBodyAddRelForceAtRelPos: _dBodyAddRelForceAtRelPos, _dWorldStep: _dWorldStep, _dCreateCCylinder: _dCreateCCylinder, _dCreateGeomGroup: _dCreateGeomGroup, _dJointSetHingeAxis: _dJointSetHingeAxis, _dGeomSetBody: _dGeomSetBody, _bitshift64Shl: _bitshift64Shl, _dJointSetAMotorParam: _dJointSetAMotorParam, _dBodyGetQuaternion: _dBodyGetQuaternion, _dJointGroupEmpty: _dJointGroupEmpty, _dGeomPlaneSetParams: _dGeomPlaneSetParams, _dJointSetAMotorMode: _dJointSetAMotorMode, _dBodyAddForceAtPos: _dBodyAddForceAtPos, _dJointGetHinge2Axis2: _dJointGetHinge2Axis2, _dGeomGetAABB: _dGeomGetAABB, _dBodyAddForceAtRelPos: _dBodyAddForceAtRelPos, _dJointCreateAMotor: _dJointCreateAMotor, _dGeomTransformSetGeom: _dGeomTransformSetGeom, _dWorldGetCFM: _dWorldGetCFM, _dWorldSetGravity: _dWorldSetGravity, _dJointGetAMotorParam: _dJointGetAMotorParam, _realloc: _realloc, _dJointSetHingeAnchor: _dJointSetHingeAnchor, _dJointAttach: _dJointAttach, _dJointGetHingeAnchor: _dJointGetHingeAnchor, _dJointCreateBall: _dJointCreateBall, _dMassAdd: _dMassAdd, _dGeomCCylinderGetParams: _dGeomCCylinderGetParams, _fflush: _fflush, ___errno_location: ___errno_location, _dGeomGetPosition: _dGeomGetPosition, _dHashSpaceCreate: _dHashSpaceCreate, _memmove: _memmove, _dJointGetHinge2Angle1: _dJointGetHinge2Angle1, _dGeomPlaneGetParams: _dGeomPlaneGetParams, _dGeomGetSpaceAABB: _dGeomGetSpaceAABB, _dGeomSphereSetRadius: _dGeomSphereSetRadius, _dJointGetSliderPosition: _dJointGetSliderPosition, _dBodyGetForce: _dBodyGetForce, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__dJointSetFixed = asm["_dJointSetFixed"]; asm["_dJointSetFixed"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetFixed.apply(null, arguments);
};

var real__dRSetIdentity = asm["_dRSetIdentity"]; asm["_dRSetIdentity"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dRSetIdentity.apply(null, arguments);
};

var real__dBodyDestroy = asm["_dBodyDestroy"]; asm["_dBodyDestroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyDestroy.apply(null, arguments);
};

var real__dRFrom2Axes = asm["_dRFrom2Axes"]; asm["_dRFrom2Axes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dRFrom2Axes.apply(null, arguments);
};

var real__dJointSetAMotorMode = asm["_dJointSetAMotorMode"]; asm["_dJointSetAMotorMode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetAMotorMode.apply(null, arguments);
};

var real__dAreConnected = asm["_dAreConnected"]; asm["_dAreConnected"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dAreConnected.apply(null, arguments);
};

var real__dMassSetCappedCylinder = asm["_dMassSetCappedCylinder"]; asm["_dMassSetCappedCylinder"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dMassSetCappedCylinder.apply(null, arguments);
};

var real__dJointCreateNull = asm["_dJointCreateNull"]; asm["_dJointCreateNull"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointCreateNull.apply(null, arguments);
};

var real__dMassTranslate = asm["_dMassTranslate"]; asm["_dMassTranslate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dMassTranslate.apply(null, arguments);
};

var real__dBodyGetLinearVel = asm["_dBodyGetLinearVel"]; asm["_dBodyGetLinearVel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyGetLinearVel.apply(null, arguments);
};

var real__dJointGetHinge2Axis2 = asm["_dJointGetHinge2Axis2"]; asm["_dJointGetHinge2Axis2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHinge2Axis2.apply(null, arguments);
};

var real__dWorldCreate = asm["_dWorldCreate"]; asm["_dWorldCreate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dWorldCreate.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__dBodyDisable = asm["_dBodyDisable"]; asm["_dBodyDisable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyDisable.apply(null, arguments);
};

var real__dWorldDestroy = asm["_dWorldDestroy"]; asm["_dWorldDestroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dWorldDestroy.apply(null, arguments);
};

var real__dJointGroupDestroy = asm["_dJointGroupDestroy"]; asm["_dJointGroupDestroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGroupDestroy.apply(null, arguments);
};

var real__dHashSpaceSetLevels = asm["_dHashSpaceSetLevels"]; asm["_dHashSpaceSetLevels"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dHashSpaceSetLevels.apply(null, arguments);
};

var real__dBodyGetTorque = asm["_dBodyGetTorque"]; asm["_dBodyGetTorque"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyGetTorque.apply(null, arguments);
};

var real__dJointGetHinge2Param = asm["_dJointGetHinge2Param"]; asm["_dJointGetHinge2Param"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHinge2Param.apply(null, arguments);
};

var real__dGeomGroupGetNumGeoms = asm["_dGeomGroupGetNumGeoms"]; asm["_dGeomGroupGetNumGeoms"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomGroupGetNumGeoms.apply(null, arguments);
};

var real__dWorldSetERP = asm["_dWorldSetERP"]; asm["_dWorldSetERP"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dWorldSetERP.apply(null, arguments);
};

var real__dJointGetBody = asm["_dJointGetBody"]; asm["_dJointGetBody"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetBody.apply(null, arguments);
};

var real__dJointGetSliderPositionRate = asm["_dJointGetSliderPositionRate"]; asm["_dJointGetSliderPositionRate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetSliderPositionRate.apply(null, arguments);
};

var real__dJointCreateFixed = asm["_dJointCreateFixed"]; asm["_dJointCreateFixed"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointCreateFixed.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__dBodySetMass = asm["_dBodySetMass"]; asm["_dBodySetMass"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodySetMass.apply(null, arguments);
};

var real__dBodyGetMass = asm["_dBodyGetMass"]; asm["_dBodyGetMass"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyGetMass.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__dGeomBoxGetLengths = asm["_dGeomBoxGetLengths"]; asm["_dGeomBoxGetLengths"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomBoxGetLengths.apply(null, arguments);
};

var real__dJointCreateAMotor = asm["_dJointCreateAMotor"]; asm["_dJointCreateAMotor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointCreateAMotor.apply(null, arguments);
};

var real__dQFromAxisAndAngle = asm["_dQFromAxisAndAngle"]; asm["_dQFromAxisAndAngle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dQFromAxisAndAngle.apply(null, arguments);
};

var real__dGeomSetPosition = asm["_dGeomSetPosition"]; asm["_dGeomSetPosition"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomSetPosition.apply(null, arguments);
};

var real__dWorldGetCFM = asm["_dWorldGetCFM"]; asm["_dWorldGetCFM"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dWorldGetCFM.apply(null, arguments);
};

var real__dGeomBoxSetLengths = asm["_dGeomBoxSetLengths"]; asm["_dGeomBoxSetLengths"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomBoxSetLengths.apply(null, arguments);
};

var real__dJointGetAMotorAngle = asm["_dJointGetAMotorAngle"]; asm["_dJointGetAMotorAngle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetAMotorAngle.apply(null, arguments);
};

var real__dJointSetHingeParam = asm["_dJointSetHingeParam"]; asm["_dJointSetHingeParam"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetHingeParam.apply(null, arguments);
};

var real__dBodyGetRotation = asm["_dBodyGetRotation"]; asm["_dBodyGetRotation"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyGetRotation.apply(null, arguments);
};

var real__dCreateBox = asm["_dCreateBox"]; asm["_dCreateBox"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dCreateBox.apply(null, arguments);
};

var real__dBodySetQuaternion = asm["_dBodySetQuaternion"]; asm["_dBodySetQuaternion"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodySetQuaternion.apply(null, arguments);
};

var real__dBodyAddRelForceAtPos = asm["_dBodyAddRelForceAtPos"]; asm["_dBodyAddRelForceAtPos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyAddRelForceAtPos.apply(null, arguments);
};

var real__dMassSetBox = asm["_dMassSetBox"]; asm["_dMassSetBox"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dMassSetBox.apply(null, arguments);
};

var real__dJointGetHingeAxis = asm["_dJointGetHingeAxis"]; asm["_dJointGetHingeAxis"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHingeAxis.apply(null, arguments);
};

var real__dBodyGetPosition = asm["_dBodyGetPosition"]; asm["_dBodyGetPosition"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyGetPosition.apply(null, arguments);
};

var real__dJointSetHinge2Param = asm["_dJointSetHinge2Param"]; asm["_dJointSetHinge2Param"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetHinge2Param.apply(null, arguments);
};

var real__dSpaceAdd = asm["_dSpaceAdd"]; asm["_dSpaceAdd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dSpaceAdd.apply(null, arguments);
};

var real__dWorldGetERP = asm["_dWorldGetERP"]; asm["_dWorldGetERP"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dWorldGetERP.apply(null, arguments);
};

var real__dBodySetRotation = asm["_dBodySetRotation"]; asm["_dBodySetRotation"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodySetRotation.apply(null, arguments);
};

var real__dGeomCCylinderSetParams = asm["_dGeomCCylinderSetParams"]; asm["_dGeomCCylinderSetParams"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomCCylinderSetParams.apply(null, arguments);
};

var real__dJointGetBallAnchor = asm["_dJointGetBallAnchor"]; asm["_dJointGetBallAnchor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetBallAnchor.apply(null, arguments);
};

var real__dJointGetHingeAngle = asm["_dJointGetHingeAngle"]; asm["_dJointGetHingeAngle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHingeAngle.apply(null, arguments);
};

var real__dGeomGetBody = asm["_dGeomGetBody"]; asm["_dGeomGetBody"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomGetBody.apply(null, arguments);
};

var real__dBodyAddRelTorque = asm["_dBodyAddRelTorque"]; asm["_dBodyAddRelTorque"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyAddRelTorque.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__dJointGetSliderAxis = asm["_dJointGetSliderAxis"]; asm["_dJointGetSliderAxis"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetSliderAxis.apply(null, arguments);
};

var real__dJointSetHingeAnchor = asm["_dJointSetHingeAnchor"]; asm["_dJointSetHingeAnchor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetHingeAnchor.apply(null, arguments);
};

var real__dBodyAddForceAtRelPos = asm["_dBodyAddForceAtRelPos"]; asm["_dBodyAddForceAtRelPos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyAddForceAtRelPos.apply(null, arguments);
};

var real__dJointSetAMotorAxis = asm["_dJointSetAMotorAxis"]; asm["_dJointSetAMotorAxis"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetAMotorAxis.apply(null, arguments);
};

var real__dWorldSetCFM = asm["_dWorldSetCFM"]; asm["_dWorldSetCFM"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dWorldSetCFM.apply(null, arguments);
};

var real__dJointAttach = asm["_dJointAttach"]; asm["_dJointAttach"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointAttach.apply(null, arguments);
};

var real__dGeomGroupRemove = asm["_dGeomGroupRemove"]; asm["_dGeomGroupRemove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomGroupRemove.apply(null, arguments);
};

var real__dMassSetParameters = asm["_dMassSetParameters"]; asm["_dMassSetParameters"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dMassSetParameters.apply(null, arguments);
};

var real__dGeomDestroy = asm["_dGeomDestroy"]; asm["_dGeomDestroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomDestroy.apply(null, arguments);
};

var real__dJointGetHingeParam = asm["_dJointGetHingeParam"]; asm["_dJointGetHingeParam"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHingeParam.apply(null, arguments);
};

var real__dBodyGetAngularVel = asm["_dBodyGetAngularVel"]; asm["_dBodyGetAngularVel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyGetAngularVel.apply(null, arguments);
};

var real__dJointSetSliderAxis = asm["_dJointSetSliderAxis"]; asm["_dJointSetSliderAxis"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetSliderAxis.apply(null, arguments);
};

var real__dJointGetAMotorNumAxes = asm["_dJointGetAMotorNumAxes"]; asm["_dJointGetAMotorNumAxes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetAMotorNumAxes.apply(null, arguments);
};

var real__dGeomTransformGetCleanup = asm["_dGeomTransformGetCleanup"]; asm["_dGeomTransformGetCleanup"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomTransformGetCleanup.apply(null, arguments);
};

var real__dJointCreateHinge2 = asm["_dJointCreateHinge2"]; asm["_dJointCreateHinge2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointCreateHinge2.apply(null, arguments);
};

var real__dMassRotate = asm["_dMassRotate"]; asm["_dMassRotate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dMassRotate.apply(null, arguments);
};

var real__dJointGetType = asm["_dJointGetType"]; asm["_dJointGetType"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetType.apply(null, arguments);
};

var real__dBodyIsEnabled = asm["_dBodyIsEnabled"]; asm["_dBodyIsEnabled"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyIsEnabled.apply(null, arguments);
};

var real__dBodyAddRelForce = asm["_dBodyAddRelForce"]; asm["_dBodyAddRelForce"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyAddRelForce.apply(null, arguments);
};

var real__dJointGetHinge2Angle2Rate = asm["_dJointGetHinge2Angle2Rate"]; asm["_dJointGetHinge2Angle2Rate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHinge2Angle2Rate.apply(null, arguments);
};

var real__dGeomTransformGetGeom = asm["_dGeomTransformGetGeom"]; asm["_dGeomTransformGetGeom"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomTransformGetGeom.apply(null, arguments);
};

var real__dSpaceRemove = asm["_dSpaceRemove"]; asm["_dSpaceRemove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dSpaceRemove.apply(null, arguments);
};

var real__dJointGetHinge2Anchor = asm["_dJointGetHinge2Anchor"]; asm["_dJointGetHinge2Anchor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHinge2Anchor.apply(null, arguments);
};

var real__dJointGetHingeAngleRate = asm["_dJointGetHingeAngleRate"]; asm["_dJointGetHingeAngleRate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHingeAngleRate.apply(null, arguments);
};

var real__dBodyGetRelPointVel = asm["_dBodyGetRelPointVel"]; asm["_dBodyGetRelPointVel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyGetRelPointVel.apply(null, arguments);
};

var real__dJointSetAMotorNumAxes = asm["_dJointSetAMotorNumAxes"]; asm["_dJointSetAMotorNumAxes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetAMotorNumAxes.apply(null, arguments);
};

var real__dWorldGetGravity = asm["_dWorldGetGravity"]; asm["_dWorldGetGravity"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dWorldGetGravity.apply(null, arguments);
};

var real__dJointSetBallAnchor = asm["_dJointSetBallAnchor"]; asm["_dJointSetBallAnchor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetBallAnchor.apply(null, arguments);
};

var real__dJointGroupCreate = asm["_dJointGroupCreate"]; asm["_dJointGroupCreate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGroupCreate.apply(null, arguments);
};

var real__dBodySetAngularVel = asm["_dBodySetAngularVel"]; asm["_dBodySetAngularVel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodySetAngularVel.apply(null, arguments);
};

var real__dMassSetZero = asm["_dMassSetZero"]; asm["_dMassSetZero"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dMassSetZero.apply(null, arguments);
};

var real__dGeomSphereGetRadius = asm["_dGeomSphereGetRadius"]; asm["_dGeomSphereGetRadius"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomSphereGetRadius.apply(null, arguments);
};

var real__dJointGetSliderParam = asm["_dJointGetSliderParam"]; asm["_dJointGetSliderParam"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetSliderParam.apply(null, arguments);
};

var real__dJointSetHinge2Anchor = asm["_dJointSetHinge2Anchor"]; asm["_dJointSetHinge2Anchor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetHinge2Anchor.apply(null, arguments);
};

var real__dJointCreateSlider = asm["_dJointCreateSlider"]; asm["_dJointCreateSlider"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointCreateSlider.apply(null, arguments);
};

var real__dBodyEnable = asm["_dBodyEnable"]; asm["_dBodyEnable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyEnable.apply(null, arguments);
};

var real__dJointGetAMotorAngleRate = asm["_dJointGetAMotorAngleRate"]; asm["_dJointGetAMotorAngleRate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetAMotorAngleRate.apply(null, arguments);
};

var real__dBodyAddForce = asm["_dBodyAddForce"]; asm["_dBodyAddForce"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyAddForce.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__dRFromAxisAndAngle = asm["_dRFromAxisAndAngle"]; asm["_dRFromAxisAndAngle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dRFromAxisAndAngle.apply(null, arguments);
};

var real__dGeomTransformSetCleanup = asm["_dGeomTransformSetCleanup"]; asm["_dGeomTransformSetCleanup"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomTransformSetCleanup.apply(null, arguments);
};

var real__dBodyGetRelPointPos = asm["_dBodyGetRelPointPos"]; asm["_dBodyGetRelPointPos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyGetRelPointPos.apply(null, arguments);
};

var real__dJointSetSliderParam = asm["_dJointSetSliderParam"]; asm["_dJointSetSliderParam"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetSliderParam.apply(null, arguments);
};

var real__dRFromEulerAngles = asm["_dRFromEulerAngles"]; asm["_dRFromEulerAngles"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dRFromEulerAngles.apply(null, arguments);
};

var real__dSimpleSpaceCreate = asm["_dSimpleSpaceCreate"]; asm["_dSimpleSpaceCreate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dSimpleSpaceCreate.apply(null, arguments);
};

var real__dBodySetPosition = asm["_dBodySetPosition"]; asm["_dBodySetPosition"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodySetPosition.apply(null, arguments);
};

var real__dJointCreateHinge = asm["_dJointCreateHinge"]; asm["_dJointCreateHinge"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointCreateHinge.apply(null, arguments);
};

var real__dHashSpaceCreate = asm["_dHashSpaceCreate"]; asm["_dHashSpaceCreate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dHashSpaceCreate.apply(null, arguments);
};

var real__dJointGetHinge2Angle1Rate = asm["_dJointGetHinge2Angle1Rate"]; asm["_dJointGetHinge2Angle1Rate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHinge2Angle1Rate.apply(null, arguments);
};

var real__dGeomGroupGetGeom = asm["_dGeomGroupGetGeom"]; asm["_dGeomGroupGetGeom"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomGroupGetGeom.apply(null, arguments);
};

var real__dMassAdjust = asm["_dMassAdjust"]; asm["_dMassAdjust"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dMassAdjust.apply(null, arguments);
};

var real__dBodySetLinearVel = asm["_dBodySetLinearVel"]; asm["_dBodySetLinearVel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodySetLinearVel.apply(null, arguments);
};

var real__dJointCreateContact = asm["_dJointCreateContact"]; asm["_dJointCreateContact"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointCreateContact.apply(null, arguments);
};

var real__dJointSetHinge2Axis1 = asm["_dJointSetHinge2Axis1"]; asm["_dJointSetHinge2Axis1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetHinge2Axis1.apply(null, arguments);
};

var real__dJointSetHinge2Axis2 = asm["_dJointSetHinge2Axis2"]; asm["_dJointSetHinge2Axis2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetHinge2Axis2.apply(null, arguments);
};

var real__dBodyAddTorque = asm["_dBodyAddTorque"]; asm["_dBodyAddTorque"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyAddTorque.apply(null, arguments);
};

var real__dBodyCreate = asm["_dBodyCreate"]; asm["_dBodyCreate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyCreate.apply(null, arguments);
};

var real__dMassSetSphere = asm["_dMassSetSphere"]; asm["_dMassSetSphere"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dMassSetSphere.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__dJointSetAMotorAngle = asm["_dJointSetAMotorAngle"]; asm["_dJointSetAMotorAngle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetAMotorAngle.apply(null, arguments);
};

var real__dGeomSetRotation = asm["_dGeomSetRotation"]; asm["_dGeomSetRotation"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomSetRotation.apply(null, arguments);
};

var real__dCreateGeomTransform = asm["_dCreateGeomTransform"]; asm["_dCreateGeomTransform"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dCreateGeomTransform.apply(null, arguments);
};

var real__dSpaceCollide = asm["_dSpaceCollide"]; asm["_dSpaceCollide"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dSpaceCollide.apply(null, arguments);
};

var real__dJointGetAMotorMode = asm["_dJointGetAMotorMode"]; asm["_dJointGetAMotorMode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetAMotorMode.apply(null, arguments);
};

var real__dJointDestroy = asm["_dJointDestroy"]; asm["_dJointDestroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointDestroy.apply(null, arguments);
};

var real__dJointGetAMotorAxisRel = asm["_dJointGetAMotorAxisRel"]; asm["_dJointGetAMotorAxisRel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetAMotorAxisRel.apply(null, arguments);
};

var real__dGeomGroupAdd = asm["_dGeomGroupAdd"]; asm["_dGeomGroupAdd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomGroupAdd.apply(null, arguments);
};

var real__dCollide = asm["_dCollide"]; asm["_dCollide"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dCollide.apply(null, arguments);
};

var real__dBodyAddRelForceAtRelPos = asm["_dBodyAddRelForceAtRelPos"]; asm["_dBodyAddRelForceAtRelPos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyAddRelForceAtRelPos.apply(null, arguments);
};

var real__dWorldStep = asm["_dWorldStep"]; asm["_dWorldStep"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dWorldStep.apply(null, arguments);
};

var real__dCreateCCylinder = asm["_dCreateCCylinder"]; asm["_dCreateCCylinder"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dCreateCCylinder.apply(null, arguments);
};

var real__dCreateGeomGroup = asm["_dCreateGeomGroup"]; asm["_dCreateGeomGroup"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dCreateGeomGroup.apply(null, arguments);
};

var real__dJointSetHingeAxis = asm["_dJointSetHingeAxis"]; asm["_dJointSetHingeAxis"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetHingeAxis.apply(null, arguments);
};

var real__dGeomSetBody = asm["_dGeomSetBody"]; asm["_dGeomSetBody"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomSetBody.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__dJointSetAMotorParam = asm["_dJointSetAMotorParam"]; asm["_dJointSetAMotorParam"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointSetAMotorParam.apply(null, arguments);
};

var real__dBodyGetQuaternion = asm["_dBodyGetQuaternion"]; asm["_dBodyGetQuaternion"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyGetQuaternion.apply(null, arguments);
};

var real__dJointGroupEmpty = asm["_dJointGroupEmpty"]; asm["_dJointGroupEmpty"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGroupEmpty.apply(null, arguments);
};

var real__dGeomPlaneSetParams = asm["_dGeomPlaneSetParams"]; asm["_dGeomPlaneSetParams"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomPlaneSetParams.apply(null, arguments);
};

var real__dCreateSphere = asm["_dCreateSphere"]; asm["_dCreateSphere"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dCreateSphere.apply(null, arguments);
};

var real__dJointGetHinge2Axis1 = asm["_dJointGetHinge2Axis1"]; asm["_dJointGetHinge2Axis1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHinge2Axis1.apply(null, arguments);
};

var real__dJointGetAMotorAxis = asm["_dJointGetAMotorAxis"]; asm["_dJointGetAMotorAxis"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetAMotorAxis.apply(null, arguments);
};

var real__dGeomGetAABB = asm["_dGeomGetAABB"]; asm["_dGeomGetAABB"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomGetAABB.apply(null, arguments);
};

var real__dSpaceDestroy = asm["_dSpaceDestroy"]; asm["_dSpaceDestroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dSpaceDestroy.apply(null, arguments);
};

var real__dCreatePlane = asm["_dCreatePlane"]; asm["_dCreatePlane"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dCreatePlane.apply(null, arguments);
};

var real__dGeomTransformSetGeom = asm["_dGeomTransformSetGeom"]; asm["_dGeomTransformSetGeom"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomTransformSetGeom.apply(null, arguments);
};

var real__dQSetIdentity = asm["_dQSetIdentity"]; asm["_dQSetIdentity"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dQSetIdentity.apply(null, arguments);
};

var real__dWorldSetGravity = asm["_dWorldSetGravity"]; asm["_dWorldSetGravity"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dWorldSetGravity.apply(null, arguments);
};

var real__dJointGetAMotorParam = asm["_dJointGetAMotorParam"]; asm["_dJointGetAMotorParam"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetAMotorParam.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__dBodyAddForceAtPos = asm["_dBodyAddForceAtPos"]; asm["_dBodyAddForceAtPos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyAddForceAtPos.apply(null, arguments);
};

var real__dJointGetHingeAnchor = asm["_dJointGetHingeAnchor"]; asm["_dJointGetHingeAnchor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHingeAnchor.apply(null, arguments);
};

var real__dJointCreateBall = asm["_dJointCreateBall"]; asm["_dJointCreateBall"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointCreateBall.apply(null, arguments);
};

var real__dMassAdd = asm["_dMassAdd"]; asm["_dMassAdd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dMassAdd.apply(null, arguments);
};

var real__dGeomCCylinderGetParams = asm["_dGeomCCylinderGetParams"]; asm["_dGeomCCylinderGetParams"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomCCylinderGetParams.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__dGeomGetPosition = asm["_dGeomGetPosition"]; asm["_dGeomGetPosition"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomGetPosition.apply(null, arguments);
};

var real__dGeomGetRotation = asm["_dGeomGetRotation"]; asm["_dGeomGetRotation"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomGetRotation.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__dJointGetHinge2Angle1 = asm["_dJointGetHinge2Angle1"]; asm["_dJointGetHinge2Angle1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetHinge2Angle1.apply(null, arguments);
};

var real__dGeomPlaneGetParams = asm["_dGeomPlaneGetParams"]; asm["_dGeomPlaneGetParams"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomPlaneGetParams.apply(null, arguments);
};

var real__dGeomGetSpaceAABB = asm["_dGeomGetSpaceAABB"]; asm["_dGeomGetSpaceAABB"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomGetSpaceAABB.apply(null, arguments);
};

var real__dGeomSphereSetRadius = asm["_dGeomSphereSetRadius"]; asm["_dGeomSphereSetRadius"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dGeomSphereSetRadius.apply(null, arguments);
};

var real__dJointGetSliderPosition = asm["_dJointGetSliderPosition"]; asm["_dJointGetSliderPosition"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dJointGetSliderPosition.apply(null, arguments);
};

var real__dBodyGetForce = asm["_dBodyGetForce"]; asm["_dBodyGetForce"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dBodyGetForce.apply(null, arguments);
};
var _dJointSetFixed = Module["_dJointSetFixed"] = asm["_dJointSetFixed"];
var _dRSetIdentity = Module["_dRSetIdentity"] = asm["_dRSetIdentity"];
var _dBodyDestroy = Module["_dBodyDestroy"] = asm["_dBodyDestroy"];
var _dRFrom2Axes = Module["_dRFrom2Axes"] = asm["_dRFrom2Axes"];
var _dJointSetAMotorMode = Module["_dJointSetAMotorMode"] = asm["_dJointSetAMotorMode"];
var _dAreConnected = Module["_dAreConnected"] = asm["_dAreConnected"];
var _dMassSetCappedCylinder = Module["_dMassSetCappedCylinder"] = asm["_dMassSetCappedCylinder"];
var _dJointCreateNull = Module["_dJointCreateNull"] = asm["_dJointCreateNull"];
var _dMassTranslate = Module["_dMassTranslate"] = asm["_dMassTranslate"];
var _dBodyGetLinearVel = Module["_dBodyGetLinearVel"] = asm["_dBodyGetLinearVel"];
var _dJointGetHinge2Axis2 = Module["_dJointGetHinge2Axis2"] = asm["_dJointGetHinge2Axis2"];
var _dWorldCreate = Module["_dWorldCreate"] = asm["_dWorldCreate"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _dBodyDisable = Module["_dBodyDisable"] = asm["_dBodyDisable"];
var _dWorldDestroy = Module["_dWorldDestroy"] = asm["_dWorldDestroy"];
var _dJointGroupDestroy = Module["_dJointGroupDestroy"] = asm["_dJointGroupDestroy"];
var _dHashSpaceSetLevels = Module["_dHashSpaceSetLevels"] = asm["_dHashSpaceSetLevels"];
var _dBodyGetTorque = Module["_dBodyGetTorque"] = asm["_dBodyGetTorque"];
var _dJointGetHinge2Param = Module["_dJointGetHinge2Param"] = asm["_dJointGetHinge2Param"];
var _dGeomGroupGetNumGeoms = Module["_dGeomGroupGetNumGeoms"] = asm["_dGeomGroupGetNumGeoms"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _dWorldSetERP = Module["_dWorldSetERP"] = asm["_dWorldSetERP"];
var _dJointGetBody = Module["_dJointGetBody"] = asm["_dJointGetBody"];
var _dJointGetSliderPositionRate = Module["_dJointGetSliderPositionRate"] = asm["_dJointGetSliderPositionRate"];
var _dJointCreateFixed = Module["_dJointCreateFixed"] = asm["_dJointCreateFixed"];
var _free = Module["_free"] = asm["_free"];
var _dBodySetMass = Module["_dBodySetMass"] = asm["_dBodySetMass"];
var _dBodyGetMass = Module["_dBodyGetMass"] = asm["_dBodyGetMass"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _dGeomBoxGetLengths = Module["_dGeomBoxGetLengths"] = asm["_dGeomBoxGetLengths"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _dJointCreateAMotor = Module["_dJointCreateAMotor"] = asm["_dJointCreateAMotor"];
var _dQFromAxisAndAngle = Module["_dQFromAxisAndAngle"] = asm["_dQFromAxisAndAngle"];
var _dGeomSetPosition = Module["_dGeomSetPosition"] = asm["_dGeomSetPosition"];
var _dWorldGetCFM = Module["_dWorldGetCFM"] = asm["_dWorldGetCFM"];
var _dGeomBoxSetLengths = Module["_dGeomBoxSetLengths"] = asm["_dGeomBoxSetLengths"];
var _dJointGetAMotorAngle = Module["_dJointGetAMotorAngle"] = asm["_dJointGetAMotorAngle"];
var _dJointSetHingeParam = Module["_dJointSetHingeParam"] = asm["_dJointSetHingeParam"];
var _dBodyGetRotation = Module["_dBodyGetRotation"] = asm["_dBodyGetRotation"];
var _dCreateBox = Module["_dCreateBox"] = asm["_dCreateBox"];
var _dBodySetQuaternion = Module["_dBodySetQuaternion"] = asm["_dBodySetQuaternion"];
var _dBodyAddRelForceAtPos = Module["_dBodyAddRelForceAtPos"] = asm["_dBodyAddRelForceAtPos"];
var _dMassSetBox = Module["_dMassSetBox"] = asm["_dMassSetBox"];
var _dJointGetHingeAxis = Module["_dJointGetHingeAxis"] = asm["_dJointGetHingeAxis"];
var _dBodyGetPosition = Module["_dBodyGetPosition"] = asm["_dBodyGetPosition"];
var _dJointSetHinge2Param = Module["_dJointSetHinge2Param"] = asm["_dJointSetHinge2Param"];
var _dSpaceAdd = Module["_dSpaceAdd"] = asm["_dSpaceAdd"];
var _dWorldGetERP = Module["_dWorldGetERP"] = asm["_dWorldGetERP"];
var _dBodySetRotation = Module["_dBodySetRotation"] = asm["_dBodySetRotation"];
var _dGeomCCylinderSetParams = Module["_dGeomCCylinderSetParams"] = asm["_dGeomCCylinderSetParams"];
var _dJointGetBallAnchor = Module["_dJointGetBallAnchor"] = asm["_dJointGetBallAnchor"];
var _dJointGetHingeAngle = Module["_dJointGetHingeAngle"] = asm["_dJointGetHingeAngle"];
var _dGeomGetBody = Module["_dGeomGetBody"] = asm["_dGeomGetBody"];
var _dBodyAddRelTorque = Module["_dBodyAddRelTorque"] = asm["_dBodyAddRelTorque"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _dJointGetSliderAxis = Module["_dJointGetSliderAxis"] = asm["_dJointGetSliderAxis"];
var _dJointSetHingeAnchor = Module["_dJointSetHingeAnchor"] = asm["_dJointSetHingeAnchor"];
var _dBodyAddForceAtRelPos = Module["_dBodyAddForceAtRelPos"] = asm["_dBodyAddForceAtRelPos"];
var _dJointSetAMotorAxis = Module["_dJointSetAMotorAxis"] = asm["_dJointSetAMotorAxis"];
var _dWorldSetCFM = Module["_dWorldSetCFM"] = asm["_dWorldSetCFM"];
var _dJointAttach = Module["_dJointAttach"] = asm["_dJointAttach"];
var _dGeomGroupRemove = Module["_dGeomGroupRemove"] = asm["_dGeomGroupRemove"];
var _dMassSetParameters = Module["_dMassSetParameters"] = asm["_dMassSetParameters"];
var _dGeomDestroy = Module["_dGeomDestroy"] = asm["_dGeomDestroy"];
var _dJointGetHingeParam = Module["_dJointGetHingeParam"] = asm["_dJointGetHingeParam"];
var _dBodyGetAngularVel = Module["_dBodyGetAngularVel"] = asm["_dBodyGetAngularVel"];
var _dJointSetSliderAxis = Module["_dJointSetSliderAxis"] = asm["_dJointSetSliderAxis"];
var _dJointGetAMotorNumAxes = Module["_dJointGetAMotorNumAxes"] = asm["_dJointGetAMotorNumAxes"];
var _dGeomTransformGetCleanup = Module["_dGeomTransformGetCleanup"] = asm["_dGeomTransformGetCleanup"];
var _dJointCreateHinge2 = Module["_dJointCreateHinge2"] = asm["_dJointCreateHinge2"];
var _dMassRotate = Module["_dMassRotate"] = asm["_dMassRotate"];
var _dJointGetType = Module["_dJointGetType"] = asm["_dJointGetType"];
var _dBodyIsEnabled = Module["_dBodyIsEnabled"] = asm["_dBodyIsEnabled"];
var _dBodyAddRelForce = Module["_dBodyAddRelForce"] = asm["_dBodyAddRelForce"];
var _dJointGetHinge2Angle2Rate = Module["_dJointGetHinge2Angle2Rate"] = asm["_dJointGetHinge2Angle2Rate"];
var _dGeomTransformGetGeom = Module["_dGeomTransformGetGeom"] = asm["_dGeomTransformGetGeom"];
var _dSpaceRemove = Module["_dSpaceRemove"] = asm["_dSpaceRemove"];
var _dJointGetHinge2Anchor = Module["_dJointGetHinge2Anchor"] = asm["_dJointGetHinge2Anchor"];
var _dJointGetHingeAngleRate = Module["_dJointGetHingeAngleRate"] = asm["_dJointGetHingeAngleRate"];
var _dBodyGetRelPointVel = Module["_dBodyGetRelPointVel"] = asm["_dBodyGetRelPointVel"];
var _dJointSetAMotorNumAxes = Module["_dJointSetAMotorNumAxes"] = asm["_dJointSetAMotorNumAxes"];
var _dWorldGetGravity = Module["_dWorldGetGravity"] = asm["_dWorldGetGravity"];
var _dJointSetBallAnchor = Module["_dJointSetBallAnchor"] = asm["_dJointSetBallAnchor"];
var _dJointGroupCreate = Module["_dJointGroupCreate"] = asm["_dJointGroupCreate"];
var _dBodySetAngularVel = Module["_dBodySetAngularVel"] = asm["_dBodySetAngularVel"];
var _dMassSetZero = Module["_dMassSetZero"] = asm["_dMassSetZero"];
var _dGeomSphereGetRadius = Module["_dGeomSphereGetRadius"] = asm["_dGeomSphereGetRadius"];
var _dJointGetSliderParam = Module["_dJointGetSliderParam"] = asm["_dJointGetSliderParam"];
var _dJointSetHinge2Anchor = Module["_dJointSetHinge2Anchor"] = asm["_dJointSetHinge2Anchor"];
var _dJointCreateSlider = Module["_dJointCreateSlider"] = asm["_dJointCreateSlider"];
var _memset = Module["_memset"] = asm["_memset"];
var _dBodyEnable = Module["_dBodyEnable"] = asm["_dBodyEnable"];
var _dJointGetAMotorAngleRate = Module["_dJointGetAMotorAngleRate"] = asm["_dJointGetAMotorAngleRate"];
var _dBodyAddForce = Module["_dBodyAddForce"] = asm["_dBodyAddForce"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _dRFromAxisAndAngle = Module["_dRFromAxisAndAngle"] = asm["_dRFromAxisAndAngle"];
var _dGeomTransformSetCleanup = Module["_dGeomTransformSetCleanup"] = asm["_dGeomTransformSetCleanup"];
var _dBodyGetRelPointPos = Module["_dBodyGetRelPointPos"] = asm["_dBodyGetRelPointPos"];
var _dJointSetSliderParam = Module["_dJointSetSliderParam"] = asm["_dJointSetSliderParam"];
var _dRFromEulerAngles = Module["_dRFromEulerAngles"] = asm["_dRFromEulerAngles"];
var _dSimpleSpaceCreate = Module["_dSimpleSpaceCreate"] = asm["_dSimpleSpaceCreate"];
var _dBodySetPosition = Module["_dBodySetPosition"] = asm["_dBodySetPosition"];
var _dJointCreateHinge = Module["_dJointCreateHinge"] = asm["_dJointCreateHinge"];
var _dHashSpaceCreate = Module["_dHashSpaceCreate"] = asm["_dHashSpaceCreate"];
var _dJointGetHinge2Angle1Rate = Module["_dJointGetHinge2Angle1Rate"] = asm["_dJointGetHinge2Angle1Rate"];
var _dGeomGroupGetGeom = Module["_dGeomGroupGetGeom"] = asm["_dGeomGroupGetGeom"];
var _dMassAdjust = Module["_dMassAdjust"] = asm["_dMassAdjust"];
var _dBodySetLinearVel = Module["_dBodySetLinearVel"] = asm["_dBodySetLinearVel"];
var _dJointCreateContact = Module["_dJointCreateContact"] = asm["_dJointCreateContact"];
var _dJointSetHinge2Axis1 = Module["_dJointSetHinge2Axis1"] = asm["_dJointSetHinge2Axis1"];
var _dJointSetHinge2Axis2 = Module["_dJointSetHinge2Axis2"] = asm["_dJointSetHinge2Axis2"];
var _dBodyAddTorque = Module["_dBodyAddTorque"] = asm["_dBodyAddTorque"];
var _dBodyCreate = Module["_dBodyCreate"] = asm["_dBodyCreate"];
var _dMassSetSphere = Module["_dMassSetSphere"] = asm["_dMassSetSphere"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _dJointSetAMotorAngle = Module["_dJointSetAMotorAngle"] = asm["_dJointSetAMotorAngle"];
var _dGeomSetRotation = Module["_dGeomSetRotation"] = asm["_dGeomSetRotation"];
var _dCreateGeomTransform = Module["_dCreateGeomTransform"] = asm["_dCreateGeomTransform"];
var _dSpaceCollide = Module["_dSpaceCollide"] = asm["_dSpaceCollide"];
var _dJointGetAMotorMode = Module["_dJointGetAMotorMode"] = asm["_dJointGetAMotorMode"];
var _dJointDestroy = Module["_dJointDestroy"] = asm["_dJointDestroy"];
var _dJointGetAMotorAxisRel = Module["_dJointGetAMotorAxisRel"] = asm["_dJointGetAMotorAxisRel"];
var _dGeomGroupAdd = Module["_dGeomGroupAdd"] = asm["_dGeomGroupAdd"];
var _dCollide = Module["_dCollide"] = asm["_dCollide"];
var _dBodyAddRelForceAtRelPos = Module["_dBodyAddRelForceAtRelPos"] = asm["_dBodyAddRelForceAtRelPos"];
var _dWorldStep = Module["_dWorldStep"] = asm["_dWorldStep"];
var _dCreateCCylinder = Module["_dCreateCCylinder"] = asm["_dCreateCCylinder"];
var _dCreateGeomGroup = Module["_dCreateGeomGroup"] = asm["_dCreateGeomGroup"];
var _dJointSetHingeAxis = Module["_dJointSetHingeAxis"] = asm["_dJointSetHingeAxis"];
var _dGeomSetBody = Module["_dGeomSetBody"] = asm["_dGeomSetBody"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _dJointSetAMotorParam = Module["_dJointSetAMotorParam"] = asm["_dJointSetAMotorParam"];
var _dBodyGetQuaternion = Module["_dBodyGetQuaternion"] = asm["_dBodyGetQuaternion"];
var _dJointGroupEmpty = Module["_dJointGroupEmpty"] = asm["_dJointGroupEmpty"];
var _dGeomPlaneSetParams = Module["_dGeomPlaneSetParams"] = asm["_dGeomPlaneSetParams"];
var _dCreateSphere = Module["_dCreateSphere"] = asm["_dCreateSphere"];
var _dJointGetHinge2Axis1 = Module["_dJointGetHinge2Axis1"] = asm["_dJointGetHinge2Axis1"];
var _dJointGetAMotorAxis = Module["_dJointGetAMotorAxis"] = asm["_dJointGetAMotorAxis"];
var _dGeomGetAABB = Module["_dGeomGetAABB"] = asm["_dGeomGetAABB"];
var _dSpaceDestroy = Module["_dSpaceDestroy"] = asm["_dSpaceDestroy"];
var _dCreatePlane = Module["_dCreatePlane"] = asm["_dCreatePlane"];
var _dGeomTransformSetGeom = Module["_dGeomTransformSetGeom"] = asm["_dGeomTransformSetGeom"];
var _dQSetIdentity = Module["_dQSetIdentity"] = asm["_dQSetIdentity"];
var _dWorldSetGravity = Module["_dWorldSetGravity"] = asm["_dWorldSetGravity"];
var _dJointGetAMotorParam = Module["_dJointGetAMotorParam"] = asm["_dJointGetAMotorParam"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _dBodyAddForceAtPos = Module["_dBodyAddForceAtPos"] = asm["_dBodyAddForceAtPos"];
var _dJointGetHingeAnchor = Module["_dJointGetHingeAnchor"] = asm["_dJointGetHingeAnchor"];
var _dJointCreateBall = Module["_dJointCreateBall"] = asm["_dJointCreateBall"];
var _dMassAdd = Module["_dMassAdd"] = asm["_dMassAdd"];
var _dGeomCCylinderGetParams = Module["_dGeomCCylinderGetParams"] = asm["_dGeomCCylinderGetParams"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _dGeomGetPosition = Module["_dGeomGetPosition"] = asm["_dGeomGetPosition"];
var _dGeomGetRotation = Module["_dGeomGetRotation"] = asm["_dGeomGetRotation"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _dJointGetHinge2Angle1 = Module["_dJointGetHinge2Angle1"] = asm["_dJointGetHinge2Angle1"];
var _dGeomPlaneGetParams = Module["_dGeomPlaneGetParams"] = asm["_dGeomPlaneGetParams"];
var _dGeomGetSpaceAABB = Module["_dGeomGetSpaceAABB"] = asm["_dGeomGetSpaceAABB"];
var _dGeomSphereSetRadius = Module["_dGeomSphereSetRadius"] = asm["_dGeomSphereSetRadius"];
var _dJointGetSliderPosition = Module["_dJointGetSliderPosition"] = asm["_dJointGetSliderPosition"];
var _dBodyGetForce = Module["_dBodyGetForce"] = asm["_dBodyGetForce"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}




	var vec4 = Module._malloc(4*4);
	var mat3 = Module._malloc(4*3*4);
	var mass = Module._malloc((1+4+4*3)*4);
	var vec6 = Module._malloc(6*4);
	function setVec4(vec)
	{
		for(var i=0;i<4;i++)
			Module.setValue(vec4+i*4, vec[i], 'float');
		return vec4;
	}
	
	function setMat3(mat)
	{
		for(var i=0;i<12;i++)
			Module.setValue(mat3+i*4, mat[i], 'float');
		return mat3;
	}
	
	
	function getVec6()
	{
		var mat = new Array(6);
		for(var i=0;i<6;i++)
			mat[i] = Module.getValue(vec6+i*4, 'float');
		return mat;
	}
	var sizeOfCantact= 104;
	var sizeOfRotation = 4*3*4;	
	var sizeOfQuaternion = 4*4;
	
	var dWorldGetGravity = Module.cwrap('dWorldGetGravity',null,['number','number']);
	var dBodySetRotation = Module.cwrap('dBodySetRotation',null,['number','number']);
	var dBodySetQuaternion = Module.cwrap('dBodySetQuaternion',null,['number','number']);
	var dBodyGetPosition = Module.cwrap('dBodyGetPosition','number',['number']);
	var dBodyGetRotation = Module.cwrap('dBodyGetRotation','number',['number']);
	var dBodyGetQuaternion = Module.cwrap('dBodyGetQuaternion','number',['number']);
	var dBodyGetLinearVel = Module.cwrap('dBodyGetLinearVel','number',['number']);
	var dBodyGetAngularVel = Module.cwrap('dBodyGetAngularVel','number',['number']);
	var dBodyGetMass = Module.cwrap('dBodyGetMass',null,['number','number']);
	var dBodyGetForce = Module.cwrap('dBodyGetForce','number',['number']);
	var dBodyGetTorque = Module.cwrap('dBodyGetTorque','number',['number']);
	var dBodyGetRelPointPos = Module.cwrap('dBodyGetRelPointPos',null,['number','number','number','number','number']);
	var dBodyGetRelPointVel = Module.cwrap('dBodyGetRelPointVel',null,['number','number','number','number','number']);
	var dMassRotate = Module.cwrap('dMassRotate',null,['number', 'number']);
	var dJointCreateContact = Module.cwrap('dJointCreateContact','number',['number', 'number' , 'number'])
	var dJointGetBallAnchor = Module.cwrap('dJointGetBallAnchor',null,['number','number']);
	var dJointGetHingeAnchor = Module.cwrap('dJointGetHingeAnchor',null,['number','number']);
	var dJointGetHingeAxis = Module.cwrap('dJointGetHingeAxis',null,['number','number']);
	var dJointGetSliderAxis = Module.cwrap('dJointGetSliderAxis',null,['number','number']);
	var dJointGetHinge2Anchor = Module.cwrap('dJointGetHinge2Anchor',null,['number','number']);
	var dJointGetHinge2Axis1 = Module.cwrap('dJointGetHinge2Axis1',null,['number','number']);
	var dJointGetHinge2Axis2 = Module.cwrap('dJointGetHinge2Axis2',null,['number','number']);
	var dJointGetAMotorAxis = Module.cwrap('dJointGetAMotorAxis',null,['number','number','number']);
	var dSpaceCollide = Module.cwrap('dSpaceCollide',null,['number','number','number']);
	var dGeomSetRotation = Module.cwrap('dGeomSetRotation',null,['number','number']);
	var dGeomGetPosition = Module.cwrap('dGeomGetPosition','number',['number']);
	var dGeomGetRotation = Module.cwrap('dGeomGetRotation','number',['number']);
	var dGeomGetAABB = Module.cwrap('dGeomGetAABB',null,['number','number']);
	var dGeomGetSpaceAABB = Module.cwrap('dGeomGetRotation','number',['number']);
	var dGeomBoxGetLengths = Module.cwrap('dGeomBoxGetLengths',null,['number','number']);
	var dGeomPlaneGetParams = Module.cwrap('dGeomPlaneGetParams',null,['number','number']);
	var dGeomCCylinderGetParams = Module.cwrap('dGeomCCylinderGetParams',null,['number','number', 'number']);
	var dCollide = Module.cwrap('dCollide','number',['number','number', 'number', 'number', 'number']);
	var dRSetIdentity = Module.cwrap('dRSetIdentity',null,['number']);
	var dRFromAxisAndAngle = Module.cwrap('dRFromAxisAndAngle',null,['number', 'number', 'number', 'number', 'number']);
	var dRFromEulerAngles = Module.cwrap('dRFromEulerAngles',null,['number', 'number', 'number', 'number']);
	var dRFrom2Axes = Module.cwrap('dRFrom2Axes',null,['number', 'number', 'number', 'number', 'number', 'number', 'number']);
	var dQSetIdentity = Module.cwrap('dQSetIdentity',null,['number']);
	var dQFromAxisAndAngle = Module.cwrap('dQFromAxisAndAngle',null,['number', 'number', 'number', 'number', 'number']);
	
	var ODE = {
		Module : Module,
		Runtime : Runtime,
		/**************                                   World API                                   *********************/
		World : {
			create : Module.cwrap('dWorldCreate','number',[]),
			destroy : Module.cwrap('dWorldCreate',null,['number']),
			setGravity : Module.cwrap('dWorldSetGravity',null,['number','number','number','number']),
			getGravity : function(world) {
				dWorldGetGravity(world,vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			setERP : Module.cwrap('dWorldSetERP',null,['number','number']),
			getERP : Module.cwrap('dWorldGetERP','number',['number']),
			setCFM : Module.cwrap('dWorldSetCFM',null,['number','number']),
			getCFM : Module.cwrap('dWorldGetCFM','number',['number']),
			step : Module.cwrap('dWorldStep',null,['number','number'])
		},
		
		/**************                                   Body API                                   *********************/
		Body : {
			create : Module.cwrap('dBodyCreate','number',['number']),
			destroy : Module.cwrap('dBodyDestroy',null,['number']),
			
			setPosition : Module.cwrap('dBodySetPosition',null,['number','number','number','number']),
			setRotation : function(world,rotation) { dBodySetRotation(world, rotation.getPointor());	},
			setQuaternion : function(world,quat) {	dBodySetQuaternion(world,quat.getPointor());	},
			setLinearVel : Module.cwrap('dBodySetLinearVel',null,['number','number','number','number']),
			setAngularVel : Module.cwrap('dBodySetAngularVel',null,['number','number','number','number']),
			
			getPosition : function(body)
			{
				var p = dBodyGetPosition(body);
				return Module.HEAPF32.slice(p/4,p/4+3);
			},
			
			getRotation : function(body)
			{
				return new ODE.Rotation(dBodyGetRotation(body));
			},
			
			getQuaternion : function(body)
			{
				return new ODE.Quaternion(dBodyGetQuaternion(body));
			},
			
			getLinearVel : function(body)
			{
				var p = dBodyGetLinearVel(body);
				return Module.HEAPF32.slice(p/4,p/4+3);
			},
			
			getAngularVel : function(body)
			{
				var p = dBodyGetAngularVel(body);
				return Module.HEAPF32.slice(p/4,p/4+3);
			},
			
			setMass : Module.cwrap('dBodySetMass',null,['number','number']),
			getMass : function(body) 
			{
				dBodyGetMass(body,mass)
				return mass;
			},
			
			addForce : Module.cwrap('dBodyAddForce',null,['number','number','number','number']),
			addTorque : Module.cwrap('dBodyAddTorque',null,['number','number','number','number']),
			addRelForce : Module.cwrap('dBodyAddRelForce',null,['number','number','number','number']),
			addRelTorque : Module.cwrap('dBodyAddRelTorque',null,['number','number','number','number']),
			
			addForceAtPos : Module.cwrap('dBodyAddForceAtPos',null,['number','number','number','number','number','number','number']),
			addForceAtRelPos : Module.cwrap('dBodyAddForceAtRelPos',null,['number','number','number','number','number','number','number']),
			addRelForceAtPos : Module.cwrap('dBodyAddRelForceAtPos',null,['number','number','number','number','number','number','number']),
			addRelForceAtRelPos : Module.cwrap('dBodyAddRelForceAtRelPos',null,['number','number','number','number','number','number','number']),
			
			getForce : function(body)
			{
				var p = dBodyGetForce(body);
				return Module.HEAPF32.slice(p/4,p/4+3);
			},
			
			getTorque : function(body)
			{
				var p = dBodyGetTorque(body);
				return Module.HEAPF32.slice(p/4,p/4+3);
			},
			
			getRelPointPos : function(body, px, py, pz) {
				dBodyGetRelPointPos(body, px, py, pz, vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			
			getRelPointVel : function(body, px, py, pz) {
				dBodyGetRelPointVel(body, px, py, pz, vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			
			areConnected : Module.cwrap('dAreConnected','number',['number','number']),
			enable : Module.cwrap('dBodyEnable',null,['number']),
			disable : Module.cwrap('dBodyDisable',null,['number']),
			isEnabled : Module.cwrap('dBodyIsEnabled','number',['number'])
			
		},
		
		/**************                                   Mass API                                   *********************/
		Mass : {
			create : function() {	return Module._malloc((1+4+4*3)*4); },
			destroy : function(mass) { return Module._free(mass); },
			setZero : Module.cwrap('dMassSetZero',null,['number']),
			setParameters : Module.cwrap('dMassSetParameters',null,['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']),
			setSphere : Module.cwrap('dMassSetSphere',null,['number', 'number', 'number']),
			setCappedCylinder : Module.cwrap('dMassSetCappedCylinder',null,['number', 'number', 'number', 'number', 'number']),
			setBox : Module.cwrap('dMassSetBox',null,['number', 'number', 'number', 'number', 'number']),
			adjust : Module.cwrap('dMassAdjust',null,['number', 'number']),
			translate : Module.cwrap('dMassTranslate',null,['number', 'number', 'number', 'number']),
			rotate : function(mass,rotation) { dMassRotate(mass, setMat3(rotation));},
			add : Module.cwrap('dMassAdd',null,['number', 'number'])
		},
		
		/**************                                   Joint API                                   *********************/
		Joint : {
			createGroup : Module.cwrap('dJointGroupCreate','number',['number']),
			createBall : Module.cwrap('dJointCreateBall','number',['number', 'number']),
			createHinge : Module.cwrap('dJointCreateHinge','number',['number', 'number']),
			createSlider : Module.cwrap('dJointCreateSlider','number',['number', 'number']),
			createContact : function( world, group, contact) {
				return dJointCreateContact( world, group, contact.getPointor());
			},
			createHinge2 : Module.cwrap('dJointCreateHinge2','number',['number', 'number']),
			createFixed : Module.cwrap('dJointCreateFixed','number',['number', 'number']),
			createNull : Module.cwrap('dJointCreateNull','number',['number', 'number']),
			createAMotor : Module.cwrap('dJointCreateAMotor','number',['number', 'number']),
			destroyJoint : Module.cwrap('dJointDestroy',null,['number']),
			destroyGroup : Module.cwrap('dJointGroupDestroy',null,['number']),
			emptyGroup : Module.cwrap('dJointGroupEmpty',null,['number']),
			attach : Module.cwrap('dJointAttach',null,['number', 'number' , 'number']),
			getType : Module.cwrap('dJointGetType','number',['number']),
			Types : {
				Unknown 	: 0,
				Ball 		: 1,
				Hinge 		: 2,
				Slider 		: 3,
				Contact		: 4,
				Hinge2 		: 5,
				Fixed 		: 6,
				Null 		: 7,
				AMotor 		: 8
			},
			getBody : Module.cwrap('dJointGetBody','number',['number', 'number']),
			setBallAnchor : Module.cwrap('dJointSetBallAnchor',null,['number','number','number','number']),
			setHingeAnchor : Module.cwrap('dJointSetHingeAnchor',null,['number','number','number','number']),
			setHingeAxis : Module.cwrap('dJointSetHingeAxis',null,['number','number','number','number']),
			setSliderAxis : Module.cwrap('dJointSetSliderAxis',null,['number','number','number','number']),
			setHinge2Anchor : Module.cwrap('dJointSetHinge2Anchor',null,['number','number','number','number']),
			setHinge2Axis1 : Module.cwrap('dJointSetHinge2Axis1',null,['number','number','number','number']),
			setHinge2Axis2 : Module.cwrap('dJointSetHinge2Axis2',null,['number','number','number','number']),
			Parameters : {
				LoStop				: 0,
				HiStop				: 1,
				Vel					: 2,
				FMax				: 3,
				FudgeFactor			: 4,
				Bounce				: 5,
				StopERP				: 6,
				StopCFM				: 7,
				SuspensionERP		: 8,
				SuspensionCFM		: 9,
				
				LoStop2				: 0x100 + 0,
				HiStop2				: 0x100 + 1,
				Vel2				: 0x100 + 2,
				FMax2				: 0x100 + 3,
				FudgeFactor2		: 0x100 + 4,
				Bounce2				: 0x100 + 5,
				StopERP2			: 0x100 + 6,
				StopCFM2			: 0x100 + 7,
				SuspensionERP2		: 0x100 + 8,
				SuspensionCFM2		: 0x100 + 9,
				
				LoStop3				: 0x200 + 0,
				HiStop3				: 0x200 + 1,
				Vel3				: 0x200 + 2,
				FMax3				: 0x200 + 3,
				FudgeFactor3		: 0x200 + 4,
				Bounce3				: 0x200 + 5,
				StopERP3			: 0x200 + 6,
				StopCFM3			: 0x200 + 7,
				SuspensionERP3		: 0x200 + 8,
				SuspensionCFM3		: 0x200 + 9
			},
			setHingeParam : Module.cwrap('dJointSetHingeParam',null,['number','number','number']),
			setSliderParam : Module.cwrap('dJointSetSliderParam',null,['number','number','number']),
			setHinge2Param : Module.cwrap('dJointSetHinge2Param',null,['number','number','number']),
			setAMotorParam : Module.cwrap('dJointSetAMotorParam',null,['number','number','number']),
			setFixed : Module.cwrap('dJointSetFixed',null,['number']),
			setAMotorNumAxes : Module.cwrap('dJointSetAMotorNumAxes',null,['number','number']),
			setAMotorAxis : Module.cwrap('dJointSetAMotorAxis',null,['number','number','number','number','number','number']),
			setAMotorAngle : Module.cwrap('dJointSetAMotorAngle',null,['number','number','number']),
			AMotorModes : {
				User : 0,
				Euler : 1
			},
			setAMotorMode : Module.cwrap('dJointSetAMotorMode',null,['number','number']),
			
			getBallAnchor : function(joint) {
				dJointGetBallAnchor(joint,vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			getHingeAnchor : function(joint) {
				dJointGetHingeAnchor(joint,vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			getHingeAxis : function(joint) {
				dJointGetHingeAxis(joint,vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			getSliderAxis : function(joint) {
				dJointGetSliderAxis(joint,vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			getHinge2Anchor : function(joint) {
				dJointGetHinge2Anchor(joint,vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			getHinge2Axis1 : function(joint) {
				dJointGetHinge2Axis1(joint,vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			getHinge2Axis2 : function(joint) {
				dJointGetHinge2Axis2(joint,vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			getAMotorAxis : function(joint, anum) {
				dJointGetAMotorAxis(joint, anum,vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			getHingeParam : Module.cwrap('dJointGetHingeParam','number',['number', 'number']),
			getSliderParam : Module.cwrap('dJointGetSliderParam','number',['number', 'number']),
			getHinge2Param : Module.cwrap('dJointGetHinge2Param','number',['number', 'number']),
			getAMotorParam : Module.cwrap('dJointGetAMotorParam','number',['number', 'number']),
			getAMotorAngle : Module.cwrap('dJointGetAMotorAngle','number',['number', 'number']),
			getAMotorAngleRate : Module.cwrap('dJointGetAMotorAngleRate','number',['number', 'number']),
			getHingeAngle : Module.cwrap('dJointGetHingeAngle','number',['number']),
			getHingeAngleRate : Module.cwrap('dJointGetHingeAngleRate','number',['number']),
			getSliderPosition : Module.cwrap('dJointGetSliderPosition','number',['number']),
			getSliderPositionRate : Module.cwrap('dJointGetSliderPositionRate','number',['number']),
			getHinge2Angle1 : Module.cwrap('dJointGetHinge2Angle1','number',['number']),
			getHinge2Angle1Rate : Module.cwrap('dJointGetHinge2Angle1Rate','number',['number']),
			getHinge2Angle2Rate : Module.cwrap('dJointGetHinge2Angle2Rate','number',['number']),
			getAMotorNumAxes : Module.cwrap('dJointGetAMotorNumAxes','number',['number']),
			getAMotorMode : Module.cwrap('dJointGetAMotorMode','number',['number']),
			getAMotorAxisRel : Module.cwrap('dJointGetAMotorAxisRel','number',['number', 'number'])
		},
		
		/**************                                   Space API                                   *********************/
		Space : {
			createSimple : Module.cwrap('dSimpleSpaceCreate','number',[]),
			createHash : Module.cwrap('dHashSpaceCreate','number',[]),
			destroy : Module.cwrap('dSpaceDestroy',null,['number']),
			add : Module.cwrap('dSpaceAdd',null,['number','number']),
			remove : Module.cwrap('dSpaceRemove',null,['number','number']),
			setHashLevels : Module.cwrap('dHashSpaceSetLevels',null,['number','number','number']),
			collide : function(space, nearCallback)
			{
				var ptrFunc = Runtime.addFunction(nearCallback);
				dSpaceCollide(space,0,ptrFunc);
				Runtime.removeFunction(ptrFunc);
			}
		},
		
		/**************                                   Geom API                                   *********************/
		Geom : {
			createSphere : Module.cwrap('dCreateSphere','number',['number','number']),
			createBox : Module.cwrap('dCreateBox','number',['number','number','number','number']),
			createPlane : Module.cwrap('dCreatePlane','number',['number','number','number','number','number']),
			createCCylinder : Module.cwrap('dCreateCCylinder','number',['number','number','number']),
			createGroup : Module.cwrap('dCreateGeomGroup','number',['number']),
			createTransform : Module.cwrap('dCreateGeomTransform','number',['number']),
			destroy : Module.cwrap('dGeomDestroy',null,['number']),
			setPosition : Module.cwrap('dGeomSetPosition',null,['number','number','number','number']),
			setRotation : function(world,rotation) { dGeomSetRotation(world, setMat3(rotation));	},
			getPosition : function(geom)
			{
				var p = dGeomGetPosition(geom);
				return Module.HEAPF32.slice(p/4,p/4+3);
			},
			getRotation : function(geom)
			{
				var p = dGeomGetRotation(geom);
				return Module.HEAPF32.slice(p/4,p/4+12);
			},
			setBody : Module.cwrap('dGeomSetBody',null,['number','number']),
			getBody : Module.cwrap('dGeomGetBody','number',['number']),
			getAABB : function(geom)
			{
				dGeomGetAABB(geom,vec6);
				return getVec6();
			},
			getSpaceAABB : function(geom)
			{
				var p = dGeomGetSpaceAABB(geom);
				return Module.HEAPF32.slice(p/4,p/4+6);
			},
			setSphereRadius : Module.cwrap('dGeomSphereSetRadius',null,['number','number']),
			setBoxLengths : Module.cwrap('dGeomBoxSetLengths',null,['number','number','number','number']),
			setPlaneParams : Module.cwrap('dGeomPlaneSetParams',null,['number','number','number','number','number']),
			setCCylinderParams : Module.cwrap('dGeomCCylinderSetParams',null,['number','number','number']),
			getSphereRadius : Module.cwrap('dGeomSphereGetRadius','number',['number']),
			getBoxLengths : function(geom)
			{
				dGeomBoxGetLengths(geom,vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float') ];
			},
			getPlaneParams : function(geom)
			{
				dGeomPlaneGetParams(geom,vec4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float'), Module.getValue(vec4+8,'float'), Module.getValue(vec4+12,'float') ];
			},
			getCCylinderParams : function(geom)
			{
				dGeomPlaneGetParams(geom,vec4,vec4+4);
				return [ Module.getValue(vec4,'float'), Module.getValue(vec4+4,'float')];
			},
			groupAdd : Module.cwrap('dGeomGroupAdd',null,['number','number']),
			groupRemove : Module.cwrap('dGeomGroupRemove',null,['number','number']),
			groupGetNumGeoms : Module.cwrap('dGeomGroupGetNumGeoms','number',['number']),
			groupGetGeom : Module.cwrap('dGeomGroupGetGeom','number',['number','number']),
			transformSetGeom : Module.cwrap('dGeomTransformSetGeom',null,['number','number']),
			transformGetGeom : Module.cwrap('dGeomTransformGetGeom','number',['number']),
			transformSetCleanup : Module.cwrap('dGeomTransformSetCleanup',null,['number','number']),
			transformGetCleanup : Module.cwrap('dGeomTransformGetCleanup','number',['number']),
			
			collide : function(g1, g2, MaxContact, contactCB)
			{
				var contacts = Module._malloc(MaxContact * sizeOfCantact);
				var n = dCollide(g1, g2, MaxContact, contacts+44, sizeOfCantact);
				for(var i=0;i<n;i++)
				{
					contactCB(new ODE.Contact(contacts+i*sizeOfCantact));
				}
				Module._free(contacts);
			}
		},
		
		Contact : (function()
		{
			var contact = function(/*pointor*/)
			{
				var pointor = arguments[0] ||  Module._malloc(sizeOfCantact);
				this.getPointor = function() { return pointor;}
				this.surface = {};
				Object.defineProperties(this.surface, {
					mode : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor,'i32') },
						set : function(val) {  	 Module.setValue(pointor,val,'i32')	}
					},
					mu : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+4,'float') },
						set : function(val) {  	 Module.setValue(pointor+4,val,'float')	}
					},
					mu2 : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+8,'float') },
						set : function(val) {  	 Module.setValue(pointor+8,val,'float')	}
					},
					bounce : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+12,'float') },
						set : function(val) {  	 Module.setValue(pointor+12,val,'float')	}
					},
					bounce_vel : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+16,'float') },
						set : function(val) {  	 Module.setValue(pointor+16,val,'float')	}
					},
					soft_erp : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+20,'float') },
						set : function(val) {  	 Module.setValue(pointor+20,val,'float')	}
					},
					soft_cfm : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+24,'float') },
						set : function(val) {  	 Module.setValue(pointor+24,val,'float')	}
					},
					motion1 : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+28,'float') },
						set : function(val) {  	 Module.setValue(pointor+24,val,'float')	}
					},
					motion2 : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+32,'float') },
						set : function(val) {  	 Module.setValue(pointor+32,val,'float')	}
					},
					slip1 : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+36,'float') },
						set : function(val) {  	 Module.setValue(pointor+36,val,'float')	}
					},
					slip2 : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+40,'float') },
						set : function(val) {  	 Module.setValue(pointor+40,val,'float')	}
					}
				});
				this.geom={};
				Object.defineProperties(this.geom, {
					pos : {
						enumerable : true,
						get : function(){ return [ Module.getValue(pointor+44,'float'), Module.getValue(vec4+48,'float'), Module.getValue(vec4+52,'float') ];},
						set : function(val) { Module.setValue(pointor+44,val[0],'float'), Module.setValue(pointor+48,val[1],'float'),Module.setValue(pointor+52,val[2],'float')	}
					},
					normal: {
						enumerable : true,
						get : function(){ return [ Module.getValue(pointor+60,'float'), Module.getValue(vec4+64,'float'), Module.getValue(vec4+68,'float') ];},
						set : function(val) { Module.setValue(pointor+60,val[0],'float'), Module.setValue(pointor+64,val[1],'float'),Module.setValue(pointor+68,val[2],'float')	}
					},
					depth: {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+76,'float') },
						set : function(val) {  	 Module.setValue(pointor+76,val,'float')	}
					},
					g1 : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+80,'i32') },
						set : function(val) {  	 Module.setValue(pointor+80,val,'i32')	}
					},
					g2  : {
						enumerable : true,
						get : function(){ return Module.getValue(pointor+84,'i32') },
						set : function(val) {  	 Module.setValue(pointor+84,val,'i32')	}
					}
				});
				Object.defineProperty(this,"fdir1",{
					enumerable : true,
					get : function(){ return [ Module.getValue(pointor+88,'float'), Module.getValue(vec4+92,'float'), Module.getValue(vec4+96,'float') ];},
					set : function(val) { Module.setValue(pointor+88,val[0],'float'), Module.setValue(pointor+92,val[1],'float'),Module.setValue(pointor+96,val[2],'float')	}
				});
			}
			contact.Mode = {
				Mu2		: 0x001,
				FDir1	: 0x002,
				Bounce	: 0x004,
				SoftERP	: 0x008,
				SoftCFM	: 0x010,
				Motion1	: 0x020,
				Motion2	: 0x040,
				Slip1	: 0x080,
				Slip2	: 0x100,

				Approx0	: 0x0000,
				Approx1_1	: 0x1000,
				Approx1_2	: 0x2000,
				Approx1	: 0x3000
			};
			return contact;
		})(),
		
		Rotation : function()
		{
			var pointor = arguments[0] ||  Module._malloc(sizeOfRotation);
			this.getPointor = function() { return pointor;};
			this.setIdentity = function() { dRSetIdentity(pointor); return this; };
			this.setArray = function (mat)
			{
				for(var i=0;i<12;i++)
					Module.setValue(pointor+i*4, mat[i], 'float');
				return this;
			}
			this.getArray = function(geom)
			{
				return Module.HEAPF32.slice(pointor/4,pointor/4+12);
			}
			this.fromAxisAndAngle = function ( ax, ay, az, angle) { dRFromAxisAndAngle(pointor, ax, ay, az, angle); return this; }
			this.fromEulerAngles  = function ( phi, theta, psi)  { dRFromEulerAngles(pointor, phi, theta, psi); return this; }
		},
		
		Quaternion : function()
		{
			var pointor = arguments[0] ||  Module._malloc(sizeOfQuaternion);
			this.getPointor = function() { return pointor;};
			this.setIdentity = function() { dQSetIdentity(pointor); return this; };
			this.setArray = function (quat)
			{
				for(var i=0;i<4;i++)
					Module.setValue(pointor+i*4, quat[i], 'float');
				return this;
			}
			this.getArray = function(geom)
			{
				return Module.HEAPF32.slice(pointor/4,pointor/4+4);
			}
			this.fromAxisAndAngle = function ( ax, ay, az, angle) { dQFromAxisAndAngle(pointor, ax, ay, az, angle); return this; }
		}
		
		
	}
	if (ENVIRONMENT_IS_NODE)
		module.exports = ODE;
	
	return ODE;

})()
